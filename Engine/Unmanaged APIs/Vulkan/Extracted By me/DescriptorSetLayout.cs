/* Please note that this file is generated by the VulkanSharp's generator. Do not edit directly.

   Licensed under the MIT license.

   Copyright 2016 Xamarin Inc

   This notice may not be removed from any source distribution.
   See LICENSE file for licensing details.
*/

using System;
using EngineRenderer;

namespace Vulkan
{
    public class DescriptorSetLayout : INonDispatchableHandleMarshalling
	{
		internal DescriptorSetLayout() {}

		public DescriptorSetLayout(Device selectedDevice)
		{
			AllocationCallbacks pAllocator = null;
			this.selectedDevice = selectedDevice;

			var layoutBinding = new DescriptorSetLayoutBinding
			{
				DescriptorType = DescriptorType.UniformBuffer,
				DescriptorCount = 1,
				StageFlags = ShaderStageFlags.Vertex
			};
			

			var descriptorSetLayoutCreateInfo = new DescriptorSetLayoutCreateInfo
			{
				Bindings = new DescriptorSetLayoutBinding[] { layoutBinding }
			};

			Result result;
			//DescriptorSetLayout pSetLayout;
			unsafe
			{
				//pSetLayout = new DescriptorSetLayout();

				fixed (UInt64* ptrpSetLayout = &this.m)
				{
					result = Interop.NativeMethods.vkCreateDescriptorSetLayout(selectedDevice.Handle, descriptorSetLayoutCreateInfo != null ? descriptorSetLayoutCreateInfo.m : (Interop.DescriptorSetLayoutCreateInfo*)default(IntPtr), pAllocator != null ? pAllocator.m : null, ptrpSetLayout);
				}
				if (result != Result.Success)
					throw new ResultException(result);

			}
		}
		public DescriptorSetLayout(Device selectedDevice, DescriptorSetLayoutCreateInfo descriptorSetLayoutCreateInfo)
		{
			AllocationCallbacks pAllocator = null;
			this.selectedDevice = selectedDevice;
			Result result;
			//DescriptorSetLayout pSetLayout;
			unsafe
			{
				//pSetLayout = new DescriptorSetLayout();

				fixed (UInt64* ptrpSetLayout = &this.m)
				{
					result = Interop.NativeMethods.vkCreateDescriptorSetLayout(selectedDevice.Handle, descriptorSetLayoutCreateInfo != null ? descriptorSetLayoutCreateInfo.m : (Interop.DescriptorSetLayoutCreateInfo*)default(IntPtr), pAllocator != null ? pAllocator.m : null, ptrpSetLayout);
				}
				if (result != Result.Success)
					throw new ResultException(result);

			}
		}
		public DescriptorSetLayout(VulkanPhysicalDevice myVulkanDevice) : this(myVulkanDevice.LogicalDevice)
		{
		}

	

		internal UInt64 m;
		private Device selectedDevice;

		UInt64 INonDispatchableHandleMarshalling.Handle {
			get {
				return m;
			}
		}
	}
}
