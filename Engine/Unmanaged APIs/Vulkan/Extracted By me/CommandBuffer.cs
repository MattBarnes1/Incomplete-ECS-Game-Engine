/* Please note that this file is generated by the VulkanSharp's generator. Do not edit directly.

   Licensed under the MIT license.

   Copyright 2016 Xamarin Inc

   This notice may not be removed from any source distribution.
   See LICENSE file for licensing details.
*/

using System;
using System.Runtime.InteropServices;

namespace Vulkan
{
    public class CommandBuffer : IMarshalling
	{	
		public CommandBuffer(Device myDevice)
		{
			
		}


		internal CommandBuffer() {}

		internal IntPtr m;

		IntPtr IMarshalling.Handle {
			get {
				return m;
			}
		}

		public void Begin (CommandBufferBeginInfo pBeginInfo)
		{
			Result result;
			unsafe {
				result = Interop.NativeMethods.vkBeginCommandBuffer (this.m, pBeginInfo != null ? pBeginInfo.m : (Interop.CommandBufferBeginInfo*)default(IntPtr));
				if (result != Result.Success)
					throw new ResultException (result);
			}
		}

		public void End ()
		{
			Result result;
			unsafe {
				result = Interop.NativeMethods.vkEndCommandBuffer (this.m);
				if (result != Result.Success)
					throw new ResultException (result);
			}
		}

		public void Reset (CommandBufferResetFlags flags = (CommandBufferResetFlags)0)
		{
			Result result;
			unsafe {
				result = Interop.NativeMethods.vkResetCommandBuffer (this.m, flags);
				if (result != Result.Success)
					throw new ResultException (result);
			}
		}

		public void CmdBindPipeline (PipelineBindPoint pipelineBindPoint, Pipeline pipeline)
		{
			unsafe {
				Interop.NativeMethods.vkCmdBindPipeline (this.m, pipelineBindPoint, pipeline != null ? pipeline.m : default(UInt64));
			}
		}

		public void CmdSetViewport (UInt32 firstViewport, Viewport[] pViewports)
		{
			unsafe {
				var arraypViewports = pViewports == null ? IntPtr.Zero : Marshal.AllocHGlobal (pViewports.Length*sizeof (Viewport));
				var lenpViewports = pViewports == null ? 0 : pViewports.Length;
				if (pViewports != null)
					for (int i = 0; i < pViewports.Length; i++)
						((Viewport*)arraypViewports) [i] = (pViewports [i]);
				Interop.NativeMethods.vkCmdSetViewport (this.m, firstViewport, (uint)lenpViewports, (Viewport*)arraypViewports);
				Marshal.FreeHGlobal (arraypViewports);
			}
		}

		public void CmdSetViewport (UInt32 firstViewport, Viewport? pViewport)
		{
			unsafe {
				Viewport valpViewport = pViewport ?? default(Viewport);
				Viewport* ptrpViewport = pViewport != null ? &valpViewport : (Viewport*)IntPtr.Zero;
				Interop.NativeMethods.vkCmdSetViewport (this.m, firstViewport, (UInt32)(pViewport != null ? 1 : 0), ptrpViewport);
			}
		}

		public void CmdSetScissor (UInt32 firstScissor, Rect2D[] pScissors)
		{
			unsafe {
				var arraypScissors = pScissors == null ? IntPtr.Zero : Marshal.AllocHGlobal (pScissors.Length*sizeof (Rect2D));
				var lenpScissors = pScissors == null ? 0 : pScissors.Length;
				if (pScissors != null)
					for (int i = 0; i < pScissors.Length; i++)
						((Rect2D*)arraypScissors) [i] = (pScissors [i]);
				Interop.NativeMethods.vkCmdSetScissor (this.m, firstScissor, (uint)lenpScissors, (Rect2D*)arraypScissors);
				Marshal.FreeHGlobal (arraypScissors);
			}
		}

		public void CmdSetScissor (UInt32 firstScissor, Rect2D? pScissor)
		{
			unsafe {
				Rect2D valpScissor = pScissor ?? default(Rect2D);
				Rect2D* ptrpScissor = pScissor != null ? &valpScissor : (Rect2D*)IntPtr.Zero;
				Interop.NativeMethods.vkCmdSetScissor (this.m, firstScissor, (UInt32)(pScissor != null ? 1 : 0), ptrpScissor);
			}
		}

		public void CmdSetLineWidth (float lineWidth)
		{
			unsafe {
				Interop.NativeMethods.vkCmdSetLineWidth (this.m, lineWidth);
			}
		}

		public void CmdSetDepthBias (float depthBiasConstantFactor, float depthBiasClamp, float depthBiasSlopeFactor)
		{
			unsafe {
				Interop.NativeMethods.vkCmdSetDepthBias (this.m, depthBiasConstantFactor, depthBiasClamp, depthBiasSlopeFactor);
			}
		}

		public void CmdSetBlendConstants (float blendConstants)
		{
			unsafe {
				Interop.NativeMethods.vkCmdSetBlendConstants (this.m, blendConstants);
			}
		}

		public void CmdSetDepthBounds (float minDepthBounds, float maxDepthBounds)
		{
			unsafe {
				Interop.NativeMethods.vkCmdSetDepthBounds (this.m, minDepthBounds, maxDepthBounds);
			}
		}

		public void CmdSetStencilCompareMask (StencilFaceFlags faceMask, UInt32 compareMask)
		{
			unsafe {
				Interop.NativeMethods.vkCmdSetStencilCompareMask (this.m, faceMask, compareMask);
			}
		}

		public void CmdSetStencilWriteMask (StencilFaceFlags faceMask, UInt32 writeMask)
		{
			unsafe {
				Interop.NativeMethods.vkCmdSetStencilWriteMask (this.m, faceMask, writeMask);
			}
		}

		public void CmdSetStencilReference (StencilFaceFlags faceMask, UInt32 reference)
		{
			unsafe {
				Interop.NativeMethods.vkCmdSetStencilReference (this.m, faceMask, reference);
			}
		}

		public void CmdBindDescriptorSets (PipelineBindPoint pipelineBindPoint, PipelineLayout layout, UInt32 firstSet, DescriptorSet[] pDescriptorSets, UInt32[] pDynamicOffsets)
		{
			unsafe {
				var arraypDescriptorSets = pDescriptorSets == null ? IntPtr.Zero : Marshal.AllocHGlobal (pDescriptorSets.Length*sizeof (UInt64));
				var lenpDescriptorSets = pDescriptorSets == null ? 0 : pDescriptorSets.Length;
				if (pDescriptorSets != null)
					for (int i = 0; i < pDescriptorSets.Length; i++)
						((UInt64*)arraypDescriptorSets) [i] = (pDescriptorSets [i].m);
				var arraypDynamicOffsets = pDynamicOffsets == null ? IntPtr.Zero : Marshal.AllocHGlobal (pDynamicOffsets.Length*sizeof (UInt32));
				var lenpDynamicOffsets = pDynamicOffsets == null ? 0 : pDynamicOffsets.Length;
				if (pDynamicOffsets != null)
					for (int i = 0; i < pDynamicOffsets.Length; i++)
						((UInt32*)arraypDynamicOffsets) [i] = (pDynamicOffsets [i]);
				Interop.NativeMethods.vkCmdBindDescriptorSets (this.m, pipelineBindPoint, layout != null ? layout.m : default(UInt64), firstSet, (uint)lenpDescriptorSets, (UInt64*)arraypDescriptorSets, (uint)lenpDynamicOffsets, (UInt32*)arraypDynamicOffsets);
				Marshal.FreeHGlobal (arraypDescriptorSets);
				Marshal.FreeHGlobal (arraypDynamicOffsets);
			}
		}

		public void CmdBindDescriptorSet (PipelineBindPoint pipelineBindPoint, PipelineLayout layout, UInt32 firstSet, DescriptorSet pDescriptorSet, UInt32? pDynamicOffset)
		{
			unsafe {
				fixed (UInt64* ptrpDescriptorSet = &pDescriptorSet.m) {
					UInt32 valpDynamicOffset = pDynamicOffset ?? default(UInt32);
					UInt32* ptrpDynamicOffset = pDynamicOffset != null ? &valpDynamicOffset : (UInt32*)IntPtr.Zero;
					Interop.NativeMethods.vkCmdBindDescriptorSets (this.m, pipelineBindPoint, layout != null ? layout.m : default(UInt64), firstSet, (UInt32)(pDescriptorSet != null ? 1 : 0), ptrpDescriptorSet, (UInt32)(pDynamicOffset != null ? 1 : 0), ptrpDynamicOffset);
				}
			}
		}



		public void CmdBindIndexBuffer (VulkanBuffer buffer, DeviceSize offset, IndexType indexType)
		{
			unsafe {
				Interop.NativeMethods.vkCmdBindIndexBuffer (this.m, buffer != null ? buffer.m : default(UInt64), offset, indexType);
			}
		}

		public void CmdBindVertexBuffers (UInt32 firstBinding, VulkanBuffer[] pBuffers, DeviceSize[] pOffsets)
		{
			unsafe {
				var arraypBuffers = pBuffers == null ? IntPtr.Zero : Marshal.AllocHGlobal (pBuffers.Length*sizeof (UInt64));
				var lenpBuffers = pBuffers == null ? 0 : pBuffers.Length;
				if (pBuffers != null)
					for (int i = 0; i < pBuffers.Length; i++)
						((UInt64*)arraypBuffers) [i] = (pBuffers [i].m);
				var arraypOffsets = pOffsets == null ? IntPtr.Zero : Marshal.AllocHGlobal (pOffsets.Length*sizeof (DeviceSize));
				var lenpOffsets = pOffsets == null ? 0 : pOffsets.Length;
				if (pOffsets != null)
					for (int i = 0; i < pOffsets.Length; i++)
						((DeviceSize*)arraypOffsets) [i] = (pOffsets [i]);
				Interop.NativeMethods.vkCmdBindVertexBuffers (this.m, firstBinding, (uint)lenpOffsets, (UInt64*)arraypBuffers, (DeviceSize*)arraypOffsets);
				Marshal.FreeHGlobal (arraypBuffers);
				Marshal.FreeHGlobal (arraypOffsets);
			}
		}

		public void CmdBindVertexBuffer (UInt32 firstBinding, VulkanBuffer pBuffer, DeviceSize pOffset)
		{
			unsafe {
				fixed (UInt64* ptrpBuffer = &pBuffer.m) {
					Interop.NativeMethods.vkCmdBindVertexBuffers (this.m, firstBinding, (UInt32)(pOffset != null ? 1 : 0), ptrpBuffer, &pOffset);
				}
			}
		}

		public void CmdDraw (UInt32 vertexCount, UInt32 instanceCount, UInt32 firstVertex, UInt32 firstInstance)
		{
			unsafe {
				Interop.NativeMethods.vkCmdDraw (this.m, vertexCount, instanceCount, firstVertex, firstInstance);
			}
		}

		public void CmdDrawIndexed (UInt32 indexCount, UInt32 instanceCount, UInt32 firstIndex, Int32 vertexOffset, UInt32 firstInstance)
		{
			unsafe {
				Interop.NativeMethods.vkCmdDrawIndexed (this.m, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance);
			}
		}

		public void CmdDrawIndirect (VulkanBuffer buffer, DeviceSize offset, UInt32 drawCount, UInt32 stride)
		{
			unsafe {
				Interop.NativeMethods.vkCmdDrawIndirect (this.m, buffer != null ? buffer.m : default(UInt64), offset, drawCount, stride);
			}
		}

		public void CmdDrawIndexedIndirect (VulkanBuffer buffer, DeviceSize offset, UInt32 drawCount, UInt32 stride)
		{
			unsafe {
				Interop.NativeMethods.vkCmdDrawIndexedIndirect (this.m, buffer != null ? buffer.m : default(UInt64), offset, drawCount, stride);
			}
		}

		public void CmdDispatch (UInt32 groupCountX, UInt32 groupCountY, UInt32 groupCountZ)
		{
			unsafe {
				Interop.NativeMethods.vkCmdDispatch (this.m, groupCountX, groupCountY, groupCountZ);
			}
		}

		public void CmdDispatchIndirect (VulkanBuffer buffer, DeviceSize offset)
		{
			unsafe {
				Interop.NativeMethods.vkCmdDispatchIndirect (this.m, buffer != null ? buffer.m : default(UInt64), offset);
			}
		}

		public void CmdCopyBuffer (VulkanBuffer srcBuffer, VulkanBuffer dstBuffer, BufferCopy[] pRegions)
		{
			unsafe {
				var arraypRegions = pRegions == null ? IntPtr.Zero : Marshal.AllocHGlobal (pRegions.Length*sizeof (BufferCopy));
				var lenpRegions = pRegions == null ? 0 : pRegions.Length;
				if (pRegions != null)
					for (int i = 0; i < pRegions.Length; i++)
						((BufferCopy*)arraypRegions) [i] = (pRegions [i]);
				Interop.NativeMethods.vkCmdCopyBuffer (this.m, srcBuffer != null ? srcBuffer.m : default(UInt64), dstBuffer != null ? dstBuffer.m : default(UInt64), (uint)lenpRegions, (BufferCopy*)arraypRegions);
				Marshal.FreeHGlobal (arraypRegions);
			}
		}

		public void CmdCopyBuffer (VulkanBuffer srcBuffer, VulkanBuffer dstBuffer, BufferCopy? pRegion)
		{
			unsafe {
				BufferCopy valpRegion = pRegion ?? default(BufferCopy);
				BufferCopy* ptrpRegion = pRegion != null ? &valpRegion : (BufferCopy*)IntPtr.Zero;
				Interop.NativeMethods.vkCmdCopyBuffer (this.m, srcBuffer != null ? srcBuffer.m : default(UInt64), dstBuffer != null ? dstBuffer.m : default(UInt64), (UInt32)(pRegion != null ? 1 : 0), ptrpRegion);
			}
		}

		public void CmdCopyImage (Image srcImage, ImageLayout srcImageLayout, Image dstImage, ImageLayout dstImageLayout, ImageCopy[] pRegions)
		{
			unsafe {
				var arraypRegions = pRegions == null ? IntPtr.Zero : Marshal.AllocHGlobal (pRegions.Length*sizeof (ImageCopy));
				var lenpRegions = pRegions == null ? 0 : pRegions.Length;
				if (pRegions != null)
					for (int i = 0; i < pRegions.Length; i++)
						((ImageCopy*)arraypRegions) [i] = (pRegions [i]);
				Interop.NativeMethods.vkCmdCopyImage (this.m, srcImage != null ? srcImage.m : default(UInt64), srcImageLayout, dstImage != null ? dstImage.m : default(UInt64), dstImageLayout, (uint)lenpRegions, (ImageCopy*)arraypRegions);
				Marshal.FreeHGlobal (arraypRegions);
			}
		}

		public void CmdCopyImage (Image srcImage, ImageLayout srcImageLayout, Image dstImage, ImageLayout dstImageLayout, ImageCopy? pRegion)
		{
			unsafe {
				ImageCopy valpRegion = pRegion ?? default(ImageCopy);
				ImageCopy* ptrpRegion = pRegion != null ? &valpRegion : (ImageCopy*)IntPtr.Zero;
				Interop.NativeMethods.vkCmdCopyImage (this.m, srcImage != null ? srcImage.m : default(UInt64), srcImageLayout, dstImage != null ? dstImage.m : default(UInt64), dstImageLayout, (UInt32)(pRegion != null ? 1 : 0), ptrpRegion);
			}
		}

		public void CmdBlitImage (Image srcImage, ImageLayout srcImageLayout, Image dstImage, ImageLayout dstImageLayout, ImageBlit[] pRegions, Filter filter)
		{
			unsafe {
				var arraypRegions = pRegions == null ? IntPtr.Zero : Marshal.AllocHGlobal (pRegions.Length*sizeof (Interop.ImageBlit));
				var lenpRegions = pRegions == null ? 0 : pRegions.Length;
				if (pRegions != null)
					for (int i = 0; i < pRegions.Length; i++)
						((Interop.ImageBlit*)arraypRegions) [i] = *(pRegions [i].m);
				Interop.NativeMethods.vkCmdBlitImage (this.m, srcImage != null ? srcImage.m : default(UInt64), srcImageLayout, dstImage != null ? dstImage.m : default(UInt64), dstImageLayout, (uint)lenpRegions, (Interop.ImageBlit*)arraypRegions, filter);
				Marshal.FreeHGlobal (arraypRegions);
			}
		}

		public void CmdBlitImage (Image srcImage, ImageLayout srcImageLayout, Image dstImage, ImageLayout dstImageLayout, ImageBlit pRegion, Filter filter)
		{
			unsafe {
				Interop.NativeMethods.vkCmdBlitImage (this.m, srcImage != null ? srcImage.m : default(UInt64), srcImageLayout, dstImage != null ? dstImage.m : default(UInt64), dstImageLayout, (UInt32)(pRegion != null ? 1 : 0), pRegion != null ? pRegion.m : (Interop.ImageBlit*)default(IntPtr), filter);
			}
		}

		public void CmdCopyBufferToImage (VulkanBuffer srcBuffer, Image dstImage, ImageLayout dstImageLayout, BufferImageCopy[] pRegions)
		{
			unsafe {
				var arraypRegions = pRegions == null ? IntPtr.Zero : Marshal.AllocHGlobal (pRegions.Length*sizeof (BufferImageCopy));
				var lenpRegions = pRegions == null ? 0 : pRegions.Length;
				if (pRegions != null)
					for (int i = 0; i < pRegions.Length; i++)
						((BufferImageCopy*)arraypRegions) [i] = (pRegions [i]);
				Interop.NativeMethods.vkCmdCopyBufferToImage (this.m, srcBuffer != null ? srcBuffer.m : default(UInt64), dstImage != null ? dstImage.m : default(UInt64), dstImageLayout, (uint)lenpRegions, (BufferImageCopy*)arraypRegions);
				Marshal.FreeHGlobal (arraypRegions);
			}
		}

		public void CmdCopyBufferToImage (VulkanBuffer srcBuffer, Image dstImage, ImageLayout dstImageLayout, BufferImageCopy? pRegion)
		{
			unsafe {
				BufferImageCopy valpRegion = pRegion ?? default(BufferImageCopy);
				BufferImageCopy* ptrpRegion = pRegion != null ? &valpRegion : (BufferImageCopy*)IntPtr.Zero;
				Interop.NativeMethods.vkCmdCopyBufferToImage (this.m, srcBuffer != null ? srcBuffer.m : default(UInt64), dstImage != null ? dstImage.m : default(UInt64), dstImageLayout, (UInt32)(pRegion != null ? 1 : 0), ptrpRegion);
			}
		}

        internal void CmdBeginRenderPass(object renderPassBeginInfo, SubpassContents inline)
        {
            throw new NotImplementedException();
        }

        public void CmdCopyImageToBuffer (Image srcImage, ImageLayout srcImageLayout, VulkanBuffer dstBuffer, BufferImageCopy[] pRegions)
		{
			unsafe {
				var arraypRegions = pRegions == null ? IntPtr.Zero : Marshal.AllocHGlobal (pRegions.Length*sizeof (BufferImageCopy));
				var lenpRegions = pRegions == null ? 0 : pRegions.Length;
				if (pRegions != null)
					for (int i = 0; i < pRegions.Length; i++)
						((BufferImageCopy*)arraypRegions) [i] = (pRegions [i]);
				Interop.NativeMethods.vkCmdCopyImageToBuffer (this.m, srcImage != null ? srcImage.m : default(UInt64), srcImageLayout, dstBuffer != null ? dstBuffer.m : default(UInt64), (uint)lenpRegions, (BufferImageCopy*)arraypRegions);
				Marshal.FreeHGlobal (arraypRegions);
			}
		}

		public void CmdCopyImageToBuffer (Image srcImage, ImageLayout srcImageLayout, VulkanBuffer dstBuffer, BufferImageCopy? pRegion)
		{
			unsafe {
				BufferImageCopy valpRegion = pRegion ?? default(BufferImageCopy);
				BufferImageCopy* ptrpRegion = pRegion != null ? &valpRegion : (BufferImageCopy*)IntPtr.Zero;
				Interop.NativeMethods.vkCmdCopyImageToBuffer (this.m, srcImage != null ? srcImage.m : default(UInt64), srcImageLayout, dstBuffer != null ? dstBuffer.m : default(UInt64), (UInt32)(pRegion != null ? 1 : 0), ptrpRegion);
			}
		}

		public void CmdUpdateBuffer (VulkanBuffer dstBuffer, DeviceSize dstOffset, DeviceSize dataSize, IntPtr pData)
		{
			unsafe {
				Interop.NativeMethods.vkCmdUpdateBuffer (this.m, dstBuffer != null ? dstBuffer.m : default(UInt64), dstOffset, dataSize, pData);
			}
		}

		public void CmdFillBuffer (VulkanBuffer dstBuffer, DeviceSize dstOffset, DeviceSize size, UInt32 data)
		{
			unsafe {
				Interop.NativeMethods.vkCmdFillBuffer (this.m, dstBuffer != null ? dstBuffer.m : default(UInt64), dstOffset, size, data);
			}
		}

		public void CmdClearColorImage (Image image, ImageLayout imageLayout, ClearColorValue pColor, ImageSubresourceRange[] pRanges)
		{
			unsafe {
				var arraypRanges = pRanges == null ? IntPtr.Zero : Marshal.AllocHGlobal (pRanges.Length*sizeof (ImageSubresourceRange));
				var lenpRanges = pRanges == null ? 0 : pRanges.Length;
				if (pRanges != null)
					for (int i = 0; i < pRanges.Length; i++)
						((ImageSubresourceRange*)arraypRanges) [i] = (pRanges [i]);
				Interop.NativeMethods.vkCmdClearColorImage (this.m, image != null ? image.m : default(UInt64), imageLayout, pColor != null ? pColor.m : (Interop.ClearColorValue*)default(IntPtr), (uint)lenpRanges, (ImageSubresourceRange*)arraypRanges);
				Marshal.FreeHGlobal (arraypRanges);
			}
		}

		public void CmdClearColorImage (Image image, ImageLayout imageLayout, ClearColorValue pColor, ImageSubresourceRange? pRange)
		{
			unsafe {
				ImageSubresourceRange valpRange = pRange ?? default(ImageSubresourceRange);
				ImageSubresourceRange* ptrpRange = pRange != null ? &valpRange : (ImageSubresourceRange*)IntPtr.Zero;
				Interop.NativeMethods.vkCmdClearColorImage (this.m, image != null ? image.m : default(UInt64), imageLayout, pColor != null ? pColor.m : (Interop.ClearColorValue*)default(IntPtr), (UInt32)(pRange != null ? 1 : 0), ptrpRange);
			}
		}

		public void CmdClearDepthStencilImage (Image image, ImageLayout imageLayout, ClearDepthStencilValue pDepthStencil, ImageSubresourceRange[] pRanges)
		{
			unsafe {
				var arraypRanges = pRanges == null ? IntPtr.Zero : Marshal.AllocHGlobal (pRanges.Length*sizeof (ImageSubresourceRange));
				var lenpRanges = pRanges == null ? 0 : pRanges.Length;
				if (pRanges != null)
					for (int i = 0; i < pRanges.Length; i++)
						((ImageSubresourceRange*)arraypRanges) [i] = (pRanges [i]);
				Interop.NativeMethods.vkCmdClearDepthStencilImage (this.m, image != null ? image.m : default(UInt64), imageLayout, &pDepthStencil, (uint)lenpRanges, (ImageSubresourceRange*)arraypRanges);
				Marshal.FreeHGlobal (arraypRanges);
			}
		}

		public void CmdClearDepthStencilImage (Image image, ImageLayout imageLayout, ClearDepthStencilValue pDepthStencil, ImageSubresourceRange? pRange)
		{
			unsafe {
				ImageSubresourceRange valpRange = pRange ?? default(ImageSubresourceRange);
				ImageSubresourceRange* ptrpRange = pRange != null ? &valpRange : (ImageSubresourceRange*)IntPtr.Zero;
				Interop.NativeMethods.vkCmdClearDepthStencilImage (this.m, image != null ? image.m : default(UInt64), imageLayout, &pDepthStencil, (UInt32)(pRange != null ? 1 : 0), ptrpRange);
			}
		}

		public void CmdClearAttachments (ClearAttachment[] pAttachments, ClearRect[] pRects)
		{
			unsafe {
				var arraypAttachments = pAttachments == null ? IntPtr.Zero : Marshal.AllocHGlobal (pAttachments.Length*sizeof (Interop.ClearAttachment));
				var lenpAttachments = pAttachments == null ? 0 : pAttachments.Length;
				if (pAttachments != null)
					for (int i = 0; i < pAttachments.Length; i++)
						((Interop.ClearAttachment*)arraypAttachments) [i] = *(pAttachments [i].m);
				var arraypRects = pRects == null ? IntPtr.Zero : Marshal.AllocHGlobal (pRects.Length*sizeof (ClearRect));
				var lenpRects = pRects == null ? 0 : pRects.Length;
				if (pRects != null)
					for (int i = 0; i < pRects.Length; i++)
						((ClearRect*)arraypRects) [i] = (pRects [i]);
				Interop.NativeMethods.vkCmdClearAttachments (this.m, (uint)lenpAttachments, (Interop.ClearAttachment*)arraypAttachments, (uint)lenpRects, (ClearRect*)arraypRects);
				Marshal.FreeHGlobal (arraypAttachments);
				Marshal.FreeHGlobal (arraypRects);
			}
		}

		public void CmdClearAttachment (ClearAttachment pAttachment, ClearRect? pRect)
		{
			unsafe {
				ClearRect valpRect = pRect ?? default(ClearRect);
				ClearRect* ptrpRect = pRect != null ? &valpRect : (ClearRect*)IntPtr.Zero;
				Interop.NativeMethods.vkCmdClearAttachments (this.m, (UInt32)(pAttachment != null ? 1 : 0), pAttachment != null ? pAttachment.m : (Interop.ClearAttachment*)default(IntPtr), (UInt32)(pRect != null ? 1 : 0), ptrpRect);
			}
		}

		public void CmdResolveImage (Image srcImage, ImageLayout srcImageLayout, Image dstImage, ImageLayout dstImageLayout, ImageResolve[] pRegions)
		{
			unsafe {
				var arraypRegions = pRegions == null ? IntPtr.Zero : Marshal.AllocHGlobal (pRegions.Length*sizeof (ImageResolve));
				var lenpRegions = pRegions == null ? 0 : pRegions.Length;
				if (pRegions != null)
					for (int i = 0; i < pRegions.Length; i++)
						((ImageResolve*)arraypRegions) [i] = (pRegions [i]);
				Interop.NativeMethods.vkCmdResolveImage (this.m, srcImage != null ? srcImage.m : default(UInt64), srcImageLayout, dstImage != null ? dstImage.m : default(UInt64), dstImageLayout, (uint)lenpRegions, (ImageResolve*)arraypRegions);
				Marshal.FreeHGlobal (arraypRegions);
			}
		}

		public void CmdResolveImage (Image srcImage, ImageLayout srcImageLayout, Image dstImage, ImageLayout dstImageLayout, ImageResolve? pRegion)
		{
			unsafe {
				ImageResolve valpRegion = pRegion ?? default(ImageResolve);
				ImageResolve* ptrpRegion = pRegion != null ? &valpRegion : (ImageResolve*)IntPtr.Zero;
				Interop.NativeMethods.vkCmdResolveImage (this.m, srcImage != null ? srcImage.m : default(UInt64), srcImageLayout, dstImage != null ? dstImage.m : default(UInt64), dstImageLayout, (UInt32)(pRegion != null ? 1 : 0), ptrpRegion);
			}
		}

		public void CmdSetEvent (Event @event, PipelineStageFlags stageMask)
		{
			unsafe {
				Interop.NativeMethods.vkCmdSetEvent (this.m, @event != null ? @event.m : default(UInt64), stageMask);
			}
		}

		public void CmdResetEvent (Event @event, PipelineStageFlags stageMask)
		{
			unsafe {
				Interop.NativeMethods.vkCmdResetEvent (this.m, @event != null ? @event.m : default(UInt64), stageMask);
			}
		}

		public void CmdWaitEvents (Event[] pEvents, PipelineStageFlags srcStageMask, PipelineStageFlags dstStageMask, MemoryBarrier[] pMemoryBarriers, BufferMemoryBarrier[] pBufferMemoryBarriers, ImageMemoryBarrier[] pImageMemoryBarriers)
		{
			unsafe {
				var arraypEvents = pEvents == null ? IntPtr.Zero : Marshal.AllocHGlobal (pEvents.Length*sizeof (UInt64));
				var lenpEvents = pEvents == null ? 0 : pEvents.Length;
				if (pEvents != null)
					for (int i = 0; i < pEvents.Length; i++)
						((UInt64*)arraypEvents) [i] = (pEvents [i].m);
				var arraypMemoryBarriers = pMemoryBarriers == null ? IntPtr.Zero : Marshal.AllocHGlobal (pMemoryBarriers.Length*sizeof (Interop.MemoryBarrier));
				var lenpMemoryBarriers = pMemoryBarriers == null ? 0 : pMemoryBarriers.Length;
				if (pMemoryBarriers != null)
					for (int i = 0; i < pMemoryBarriers.Length; i++)
						((Interop.MemoryBarrier*)arraypMemoryBarriers) [i] = *(pMemoryBarriers [i].m);
				var arraypBufferMemoryBarriers = pBufferMemoryBarriers == null ? IntPtr.Zero : Marshal.AllocHGlobal (pBufferMemoryBarriers.Length*sizeof (Interop.BufferMemoryBarrier));
				var lenpBufferMemoryBarriers = pBufferMemoryBarriers == null ? 0 : pBufferMemoryBarriers.Length;
				if (pBufferMemoryBarriers != null)
					for (int i = 0; i < pBufferMemoryBarriers.Length; i++)
						((Interop.BufferMemoryBarrier*)arraypBufferMemoryBarriers) [i] = *(pBufferMemoryBarriers [i].m);
				var arraypImageMemoryBarriers = pImageMemoryBarriers == null ? IntPtr.Zero : Marshal.AllocHGlobal (pImageMemoryBarriers.Length*sizeof (Interop.ImageMemoryBarrier));
				var lenpImageMemoryBarriers = pImageMemoryBarriers == null ? 0 : pImageMemoryBarriers.Length;
				if (pImageMemoryBarriers != null)
					for (int i = 0; i < pImageMemoryBarriers.Length; i++)
						((Interop.ImageMemoryBarrier*)arraypImageMemoryBarriers) [i] = *(pImageMemoryBarriers [i].m);
				Interop.NativeMethods.vkCmdWaitEvents (this.m, (uint)lenpEvents, (UInt64*)arraypEvents, srcStageMask, dstStageMask, (uint)lenpMemoryBarriers, (Interop.MemoryBarrier*)arraypMemoryBarriers, (uint)lenpBufferMemoryBarriers, (Interop.BufferMemoryBarrier*)arraypBufferMemoryBarriers, (uint)lenpImageMemoryBarriers, (Interop.ImageMemoryBarrier*)arraypImageMemoryBarriers);
				Marshal.FreeHGlobal (arraypEvents);
				Marshal.FreeHGlobal (arraypMemoryBarriers);
				Marshal.FreeHGlobal (arraypBufferMemoryBarriers);
				Marshal.FreeHGlobal (arraypImageMemoryBarriers);
			}
		}

		public void CmdWaitEvent (Event pEvent, PipelineStageFlags srcStageMask, PipelineStageFlags dstStageMask, MemoryBarrier pMemoryBarrier, BufferMemoryBarrier pBufferMemoryBarrier, ImageMemoryBarrier pImageMemoryBarrier)
		{
			unsafe {
				fixed (UInt64* ptrpEvent = &pEvent.m) {
					Interop.NativeMethods.vkCmdWaitEvents (this.m, (UInt32)(pEvent != null ? 1 : 0), ptrpEvent, srcStageMask, dstStageMask, (UInt32)(pMemoryBarrier != null ? 1 : 0), pMemoryBarrier != null ? pMemoryBarrier.m : (Interop.MemoryBarrier*)default(IntPtr), (UInt32)(pBufferMemoryBarrier != null ? 1 : 0), pBufferMemoryBarrier != null ? pBufferMemoryBarrier.m : (Interop.BufferMemoryBarrier*)default(IntPtr), (UInt32)(pImageMemoryBarrier != null ? 1 : 0), pImageMemoryBarrier != null ? pImageMemoryBarrier.m : (Interop.ImageMemoryBarrier*)default(IntPtr));
				}
			}
		}

		public void CmdPipelineBarrier (PipelineStageFlags srcStageMask, PipelineStageFlags dstStageMask, DependencyFlags dependencyFlags, MemoryBarrier[] pMemoryBarriers, BufferMemoryBarrier[] pBufferMemoryBarriers, ImageMemoryBarrier[] pImageMemoryBarriers)
		{
			unsafe {
				var arraypMemoryBarriers = pMemoryBarriers == null ? IntPtr.Zero : Marshal.AllocHGlobal (pMemoryBarriers.Length*sizeof (Interop.MemoryBarrier));
				var lenpMemoryBarriers = pMemoryBarriers == null ? 0 : pMemoryBarriers.Length;
				if (pMemoryBarriers != null)
					for (int i = 0; i < pMemoryBarriers.Length; i++)
						((Interop.MemoryBarrier*)arraypMemoryBarriers) [i] = *(pMemoryBarriers [i].m);
				var arraypBufferMemoryBarriers = pBufferMemoryBarriers == null ? IntPtr.Zero : Marshal.AllocHGlobal (pBufferMemoryBarriers.Length*sizeof (Interop.BufferMemoryBarrier));
				var lenpBufferMemoryBarriers = pBufferMemoryBarriers == null ? 0 : pBufferMemoryBarriers.Length;
				if (pBufferMemoryBarriers != null)
					for (int i = 0; i < pBufferMemoryBarriers.Length; i++)
						((Interop.BufferMemoryBarrier*)arraypBufferMemoryBarriers) [i] = *(pBufferMemoryBarriers [i].m);
				var arraypImageMemoryBarriers = pImageMemoryBarriers == null ? IntPtr.Zero : Marshal.AllocHGlobal (pImageMemoryBarriers.Length*sizeof (Interop.ImageMemoryBarrier));
				var lenpImageMemoryBarriers = pImageMemoryBarriers == null ? 0 : pImageMemoryBarriers.Length;
				if (pImageMemoryBarriers != null)
					for (int i = 0; i < pImageMemoryBarriers.Length; i++)
						((Interop.ImageMemoryBarrier*)arraypImageMemoryBarriers) [i] = *(pImageMemoryBarriers [i].m);
				Interop.NativeMethods.vkCmdPipelineBarrier (this.m, srcStageMask, dstStageMask, dependencyFlags, (uint)lenpMemoryBarriers, (Interop.MemoryBarrier*)arraypMemoryBarriers, (uint)lenpBufferMemoryBarriers, (Interop.BufferMemoryBarrier*)arraypBufferMemoryBarriers, (uint)lenpImageMemoryBarriers, (Interop.ImageMemoryBarrier*)arraypImageMemoryBarriers);
				Marshal.FreeHGlobal (arraypMemoryBarriers);
				Marshal.FreeHGlobal (arraypBufferMemoryBarriers);
				Marshal.FreeHGlobal (arraypImageMemoryBarriers);
			}
		}

		public void CmdPipelineBarrier (PipelineStageFlags srcStageMask, PipelineStageFlags dstStageMask, DependencyFlags dependencyFlag, MemoryBarrier pMemoryBarrier, BufferMemoryBarrier pBufferMemoryBarrier, ImageMemoryBarrier pImageMemoryBarrier)
		{
			unsafe {
				Interop.NativeMethods.vkCmdPipelineBarrier (this.m, srcStageMask, dstStageMask, dependencyFlag, (UInt32)(pMemoryBarrier != null ? 1 : 0), pMemoryBarrier != null ? pMemoryBarrier.m : (Interop.MemoryBarrier*)default(IntPtr), (UInt32)(pBufferMemoryBarrier != null ? 1 : 0), pBufferMemoryBarrier != null ? pBufferMemoryBarrier.m : (Interop.BufferMemoryBarrier*)default(IntPtr), (UInt32)(pImageMemoryBarrier != null ? 1 : 0), pImageMemoryBarrier != null ? pImageMemoryBarrier.m : (Interop.ImageMemoryBarrier*)default(IntPtr));
			}
		}

		public void CmdBeginQuery (QueryPool queryPool, UInt32 query, QueryControlFlags flags = (QueryControlFlags)0)
		{
			unsafe {
				Interop.NativeMethods.vkCmdBeginQuery (this.m, queryPool != null ? queryPool.m : default(UInt64), query, flags);
			}
		}

		public void CmdEndQuery (QueryPool queryPool, UInt32 query)
		{
			unsafe {
				Interop.NativeMethods.vkCmdEndQuery (this.m, queryPool != null ? queryPool.m : default(UInt64), query);
			}
		}

		public void CmdResetQueryPool (QueryPool queryPool, UInt32 firstQuery, UInt32 queryCount)
		{
			unsafe {
				Interop.NativeMethods.vkCmdResetQueryPool (this.m, queryPool != null ? queryPool.m : default(UInt64), firstQuery, queryCount);
			}
		}

		public void CmdWriteTimestamp (PipelineStageFlags pipelineStage, QueryPool queryPool, UInt32 query)
		{
			unsafe {
				Interop.NativeMethods.vkCmdWriteTimestamp (this.m, pipelineStage, queryPool != null ? queryPool.m : default(UInt64), query);
			}
		}

		public void CmdCopyQueryPoolResults (QueryPool queryPool, UInt32 firstQuery, UInt32 queryCount, VulkanBuffer dstBuffer, DeviceSize dstOffset, DeviceSize stride, QueryResultFlags flags = (QueryResultFlags)0)
		{
			unsafe {
				Interop.NativeMethods.vkCmdCopyQueryPoolResults (this.m, queryPool != null ? queryPool.m : default(UInt64), firstQuery, queryCount, dstBuffer != null ? dstBuffer.m : default(UInt64), dstOffset, stride, flags);
			}
		}

		public void CmdPushConstants (PipelineLayout layout, ShaderStageFlags stageFlags, UInt32 offset, UInt32 size, IntPtr pValues)
		{
			unsafe {
				Interop.NativeMethods.vkCmdPushConstants (this.m, layout != null ? layout.m : default(UInt64), stageFlags, offset, size, pValues);
			}
		}

		public void CmdBeginRenderPass (RenderPassBeginInfo pRenderPassBegin, SubpassContents contents)
		{
			unsafe {
				Interop.NativeMethods.vkCmdBeginRenderPass (this.m, pRenderPassBegin != null ? pRenderPassBegin.m : (Interop.RenderPassBeginInfo*)default(IntPtr), contents);
			}
		}

		public void CmdNextSubpass (SubpassContents contents)
		{
			unsafe {
				Interop.NativeMethods.vkCmdNextSubpass (this.m, contents);
			}
		}

		public void CmdEndRenderPass ()
		{
			unsafe {
				Interop.NativeMethods.vkCmdEndRenderPass (this.m);
			}
		}

		public void CmdExecuteCommands (CommandBuffer[] pCommandBuffers)
		{
			unsafe {
				var arraypCommandBuffers = pCommandBuffers == null ? IntPtr.Zero : Marshal.AllocHGlobal (pCommandBuffers.Length*sizeof (IntPtr));
				var lenpCommandBuffers = pCommandBuffers == null ? 0 : pCommandBuffers.Length;
				if (pCommandBuffers != null)
					for (int i = 0; i < pCommandBuffers.Length; i++)
						((IntPtr*)arraypCommandBuffers) [i] = (pCommandBuffers [i].m);
				Interop.NativeMethods.vkCmdExecuteCommands (this.m, (uint)lenpCommandBuffers, (IntPtr*)arraypCommandBuffers);
				Marshal.FreeHGlobal (arraypCommandBuffers);
			}
		}

		public void CmdExecuteCommand (CommandBuffer pCommandBuffer)
		{
			unsafe {
				fixed (IntPtr* ptrpCommandBuffer = &pCommandBuffer.m) {
					Interop.NativeMethods.vkCmdExecuteCommands (this.m, (UInt32)(pCommandBuffer != null ? 1 : 0), ptrpCommandBuffer);
				}
			}
		}

		public void CmdDebugMarkerBeginEXT (DebugMarkerMarkerInfoExt pMarkerInfo)
		{
			unsafe {
				Interop.NativeMethods.vkCmdDebugMarkerBeginEXT (this.m, pMarkerInfo != null ? pMarkerInfo.m : (Interop.DebugMarkerMarkerInfoExt*)default(IntPtr));
			}
		}

		public void CmdDebugMarkerEndEXT ()
		{
			unsafe {
				Interop.NativeMethods.vkCmdDebugMarkerEndEXT (this.m);
			}
		}

		public void CmdDebugMarkerInsertEXT (DebugMarkerMarkerInfoExt pMarkerInfo)
		{
			unsafe {
				Interop.NativeMethods.vkCmdDebugMarkerInsertEXT (this.m, pMarkerInfo != null ? pMarkerInfo.m : (Interop.DebugMarkerMarkerInfoExt*)default(IntPtr));
			}
		}

		public void CmdDrawIndirectCountAMD (VulkanBuffer buffer, DeviceSize offset, VulkanBuffer countBuffer, DeviceSize countBufferOffset, UInt32 maxDrawCount, UInt32 stride)
		{
			unsafe {
				Interop.NativeMethods.vkCmdDrawIndirectCountAMD (this.m, buffer != null ? buffer.m : default(UInt64), offset, countBuffer != null ? countBuffer.m : default(UInt64), countBufferOffset, maxDrawCount, stride);
			}
		}

		public void CmdDrawIndexedIndirectCountAMD (VulkanBuffer buffer, DeviceSize offset, VulkanBuffer countBuffer, DeviceSize countBufferOffset, UInt32 maxDrawCount, UInt32 stride)
		{
			unsafe {
				Interop.NativeMethods.vkCmdDrawIndexedIndirectCountAMD (this.m, buffer != null ? buffer.m : default(UInt64), offset, countBuffer != null ? countBuffer.m : default(UInt64), countBufferOffset, maxDrawCount, stride);
			}
		}

		public void CmdProcessCommandsNVX (CmdProcessCommandsInfoNvx pProcessCommandsInfo)
		{
			unsafe {
				Interop.NativeMethods.vkCmdProcessCommandsNVX (this.m, pProcessCommandsInfo != null ? pProcessCommandsInfo.m : (Interop.CmdProcessCommandsInfoNvx*)default(IntPtr));
			}
		}

		public void CmdReserveSpaceForCommandsNVX (CmdReserveSpaceForCommandsInfoNvx pReserveSpaceInfo)
		{
			unsafe {
				Interop.NativeMethods.vkCmdReserveSpaceForCommandsNVX (this.m, pReserveSpaceInfo != null ? pReserveSpaceInfo.m : (Interop.CmdReserveSpaceForCommandsInfoNvx*)default(IntPtr));
			}
		}

		public void CmdPushDescriptorSetKHR (PipelineBindPoint pipelineBindPoint, PipelineLayout layout, UInt32 set, WriteDescriptorSet[] pDescriptorWrites)
		{
			unsafe {
				var arraypDescriptorWrites = pDescriptorWrites == null ? IntPtr.Zero : Marshal.AllocHGlobal (pDescriptorWrites.Length*sizeof (Interop.WriteDescriptorSet));
				var lenpDescriptorWrites = pDescriptorWrites == null ? 0 : pDescriptorWrites.Length;
				if (pDescriptorWrites != null)
					for (int i = 0; i < pDescriptorWrites.Length; i++)
						((Interop.WriteDescriptorSet*)arraypDescriptorWrites) [i] = *(pDescriptorWrites [i].m);
				Interop.NativeMethods.vkCmdPushDescriptorSetKHR (this.m, pipelineBindPoint, layout != null ? layout.m : default(UInt64), set, (uint)lenpDescriptorWrites, (Interop.WriteDescriptorSet*)arraypDescriptorWrites);
				Marshal.FreeHGlobal (arraypDescriptorWrites);
			}
		}

		public void CmdPushDescriptorSetKHR (PipelineBindPoint pipelineBindPoint, PipelineLayout layout, UInt32 set, WriteDescriptorSet pDescriptorWrite)
		{
			unsafe {
				Interop.NativeMethods.vkCmdPushDescriptorSetKHR (this.m, pipelineBindPoint, layout != null ? layout.m : default(UInt64), set, (UInt32)(pDescriptorWrite != null ? 1 : 0), pDescriptorWrite != null ? pDescriptorWrite.m : (Interop.WriteDescriptorSet*)default(IntPtr));
			}
		}

		public void CmdSetDeviceMaskKHX (UInt32 deviceMask)
		{
			unsafe {
				Interop.NativeMethods.vkCmdSetDeviceMaskKHX (this.m, deviceMask);
			}
		}

		public void CmdDispatchBaseKHX (UInt32 baseGroupX, UInt32 baseGroupY, UInt32 baseGroupZ, UInt32 groupCountX, UInt32 groupCountY, UInt32 groupCountZ)
		{
			unsafe {
				Interop.NativeMethods.vkCmdDispatchBaseKHX (this.m, baseGroupX, baseGroupY, baseGroupZ, groupCountX, groupCountY, groupCountZ);
			}
		}

		public void CmdPushDescriptorSetWithTemplateKHR (DescriptorUpdateTemplateKHR descriptorUpdateTemplate, PipelineLayout layout, UInt32 set, IntPtr pData)
		{
			unsafe {
				Interop.NativeMethods.vkCmdPushDescriptorSetWithTemplateKHR (this.m, descriptorUpdateTemplate != null ? descriptorUpdateTemplate.m : default(UInt64), layout != null ? layout.m : default(UInt64), set, pData);
			}
		}

		public void CmdSetViewportWScalingNV (UInt32 firstViewport, ViewportWScalingNv[] pViewportWScalings)
		{
			unsafe {
				var arraypViewportWScalings = pViewportWScalings == null ? IntPtr.Zero : Marshal.AllocHGlobal (pViewportWScalings.Length*sizeof (ViewportWScalingNv));
				var lenpViewportWScalings = pViewportWScalings == null ? 0 : pViewportWScalings.Length;
				if (pViewportWScalings != null)
					for (int i = 0; i < pViewportWScalings.Length; i++)
						((ViewportWScalingNv*)arraypViewportWScalings) [i] = (pViewportWScalings [i]);
				Interop.NativeMethods.vkCmdSetViewportWScalingNV (this.m, firstViewport, (uint)lenpViewportWScalings, (ViewportWScalingNv*)arraypViewportWScalings);
				Marshal.FreeHGlobal (arraypViewportWScalings);
			}
		}

		public void CmdSetViewportWScalingNV (UInt32 firstViewport, ViewportWScalingNv? pViewportWScaling)
		{
			unsafe {
				ViewportWScalingNv valpViewportWScaling = pViewportWScaling ?? default(ViewportWScalingNv);
				ViewportWScalingNv* ptrpViewportWScaling = pViewportWScaling != null ? &valpViewportWScaling : (ViewportWScalingNv*)IntPtr.Zero;
				Interop.NativeMethods.vkCmdSetViewportWScalingNV (this.m, firstViewport, (UInt32)(pViewportWScaling != null ? 1 : 0), ptrpViewportWScaling);
			}
		}

		public void CmdSetDiscardRectangleEXT (UInt32 firstDiscardRectangle, Rect2D[] pDiscardRectangles)
		{
			unsafe {
				var arraypDiscardRectangles = pDiscardRectangles == null ? IntPtr.Zero : Marshal.AllocHGlobal (pDiscardRectangles.Length*sizeof (Rect2D));
				var lenpDiscardRectangles = pDiscardRectangles == null ? 0 : pDiscardRectangles.Length;
				if (pDiscardRectangles != null)
					for (int i = 0; i < pDiscardRectangles.Length; i++)
						((Rect2D*)arraypDiscardRectangles) [i] = (pDiscardRectangles [i]);
				Interop.NativeMethods.vkCmdSetDiscardRectangleEXT (this.m, firstDiscardRectangle, (uint)lenpDiscardRectangles, (Rect2D*)arraypDiscardRectangles);
				Marshal.FreeHGlobal (arraypDiscardRectangles);
			}
		}

		public void CmdSetDiscardRectangleEXT (UInt32 firstDiscardRectangle, Rect2D? pDiscardRectangle)
		{
			unsafe {
				Rect2D valpDiscardRectangle = pDiscardRectangle ?? default(Rect2D);
				Rect2D* ptrpDiscardRectangle = pDiscardRectangle != null ? &valpDiscardRectangle : (Rect2D*)IntPtr.Zero;
				Interop.NativeMethods.vkCmdSetDiscardRectangleEXT (this.m, firstDiscardRectangle, (UInt32)(pDiscardRectangle != null ? 1 : 0), ptrpDiscardRectangle);
			}
		}

		public void CmdSetSampleLocationsEXT (SampleLocationsInfoExt pSampleLocationsInfo)
		{
			unsafe {
				Interop.NativeMethods.vkCmdSetSampleLocationsEXT (this.m, pSampleLocationsInfo != null ? pSampleLocationsInfo.m : (Interop.SampleLocationsInfoExt*)default(IntPtr));
			}
		}

		public void CmdWriteBufferMarkerAMD (PipelineStageFlags pipelineStage, VulkanBuffer dstBuffer, DeviceSize dstOffset, UInt32 marker)
		{
			unsafe {
				Interop.NativeMethods.vkCmdWriteBufferMarkerAMD (this.m, pipelineStage, dstBuffer != null ? dstBuffer.m : default(UInt64), dstOffset, marker);
			}
		}
	}
}
