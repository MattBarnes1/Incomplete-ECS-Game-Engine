/* Please note that this file is generated by the VulkanSharp's generator. Do not edit directly.

   Licensed under the MIT license.

   Copyright 2016 Xamarin Inc

   This notice may not be removed from any source distribution.
   See LICENSE file for licensing details.
*/

using Engine.Renderer;
using System;
using System.Runtime.InteropServices;

namespace Vulkan
{

	/// <summary>
	/// This class is used to create the color to clear the screen.
	/// </summary>
	unsafe public partial class ClearValue : MarshalledObject
	{
		ClearColorValue lColor;

        public ClearColorValue Color {
			get { return lColor; }
			set { lColor = value; m->Color = value != null ? *value.m : default(Interop.ClearColorValue); }
		}

		public ClearDepthStencilValue DepthStencil {
			get { return m->DepthStencil; }
			set { m->DepthStencil = value; }
		}
		internal Interop.ClearValue* m {

			get {
				return (Interop.ClearValue*)native.Handle;
			}
		}
		
		public ClearValue ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.ClearValue));
			Initialize ();
		}

		internal ClearValue (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}

		public void SetColorValue(Color aColor)
		{
			//Color.Uint32 = new uint[] { aColor.B, aColor.G, aColor.R, aColor.A };
			lColor = new ClearColorValue(new uint[] { aColor.B, aColor.G, aColor.R, aColor.A });
			//lColornew NativePointer(native.Reference, (IntPtr)(&m->Color));
		}

        public ClearValue(Color aliceBlue)
        {
			native = Interop.Structure.Allocate(typeof(Interop.ClearValue));
			Initialize();
			SetColorValue(aliceBlue);
		}

        internal void Initialize ()
		{
			lColor = new ClearColorValue (new NativePointer (native.Reference, (IntPtr)(&m->Color)));
		}


	}
}
