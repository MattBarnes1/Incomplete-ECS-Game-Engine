/* Please note that this file is generated by the VulkanSharp's generator. Do not edit directly.

   Licensed under the MIT license.

   Copyright 2016 Xamarin Inc

   This notice may not be removed from any source distribution.
   See LICENSE file for licensing details.
*/

using System;

namespace Vulkan
{
    public class SurfaceKHR : INonDispatchableHandleMarshalling
	{
		internal SurfaceKHR() {}

        ~SurfaceKHR()
        {
            unsafe
            {
                Interop.NativeMethods.vkDestroySurfaceKHR(myWindow.m, this.m, null);
            }
        }

		public SurfaceKHR(VulkanInstance myWindow)
        {
            this.myWindow = myWindow;
            this.sDLWindowHandle = myWindow.GetWindowHandle();
            unsafe
            { 
                fixed (UInt64* ptrpSurface = &this.m)
                fixed (IntPtr* ptrInstance = &myWindow.m)
                {
                    if(SDL2.SDL.SDL_Vulkan_CreateSurface(sDLWindowHandle, *ptrInstance, ptrpSurface) == 0)
                    {
                        throw new EngineRenderer.Exceptions.VULKAN.VULKAN_SURFACE_CREATION_FAILED();
                    }

                }
            }
		}

		internal UInt64 m;
		private VulkanInstance myWindow;
		private IntPtr sDLWindowHandle;

		UInt64 INonDispatchableHandleMarshalling.Handle {
			get {
				return m;
			}
		}

        public SurfaceCapabilitiesKHR SurfaceCapabilities { get; internal set; }
        public SurfaceFormatKHR SelectedSurfaceFormat { get; internal set; }
    }
}
