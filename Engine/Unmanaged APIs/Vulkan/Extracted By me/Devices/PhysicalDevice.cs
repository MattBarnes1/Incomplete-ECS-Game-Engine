/* Please note that this file is generated by the VulkanSharp's generator. Do not edit directly.

   Licensed under the MIT license.

   Copyright 2016 Xamarin Inc

   This notice may not be removed from any source distribution.
   See LICENSE file for licensing details.
*/

using System;
using System.Runtime.InteropServices;

namespace Vulkan
{
    public partial class PhysicalDevice : IMarshalling
	{
		internal PhysicalDevice() {}

		internal IntPtr m;

		IntPtr IMarshalling.Handle {
			get {
				return m;
			}
		}

		public PhysicalDeviceProperties GetProperties ()
		{
			PhysicalDeviceProperties pProperties;
			unsafe {
				pProperties = new PhysicalDeviceProperties ();
				Interop.NativeMethods.vkGetPhysicalDeviceProperties (this.m, pProperties != null ? pProperties.m : (Interop.PhysicalDeviceProperties*)default(IntPtr));

				return pProperties;
			}
		}

		public QueueFamilyProperties[] GetQueueFamilyProperties ()
		{
			unsafe {
				UInt32 pQueueFamilyPropertyCount;
				Interop.NativeMethods.vkGetPhysicalDeviceQueueFamilyProperties (this.m, &pQueueFamilyPropertyCount, null);
				if (pQueueFamilyPropertyCount <= 0)
					return null;

				int size = Marshal.SizeOf (typeof (QueueFamilyProperties));
				var refpQueueFamilyProperties = new NativeReference ((int)(size * pQueueFamilyPropertyCount));
				var ptrpQueueFamilyProperties = refpQueueFamilyProperties.Handle;
				Interop.NativeMethods.vkGetPhysicalDeviceQueueFamilyProperties (this.m, &pQueueFamilyPropertyCount, (QueueFamilyProperties*)ptrpQueueFamilyProperties);

				if (pQueueFamilyPropertyCount <= 0)
					return null;
				var arr = new QueueFamilyProperties [pQueueFamilyPropertyCount];
				for (int i = 0; i < pQueueFamilyPropertyCount; i++) {
					arr [i] = (((QueueFamilyProperties*)ptrpQueueFamilyProperties) [i]);
				}

				return arr;
			}
		}

		public PhysicalDeviceMemoryProperties GetMemoryProperties ()
		{
			PhysicalDeviceMemoryProperties pMemoryProperties;
			unsafe {
				pMemoryProperties = new PhysicalDeviceMemoryProperties ();
				Interop.NativeMethods.vkGetPhysicalDeviceMemoryProperties (this.m, pMemoryProperties != null ? pMemoryProperties.m : (Interop.PhysicalDeviceMemoryProperties*)default(IntPtr));

				return pMemoryProperties;
			}
		}

		public PhysicalDeviceFeatures GetFeatures ()
		{
			PhysicalDeviceFeatures pFeatures;
			unsafe {
				pFeatures = new PhysicalDeviceFeatures ();
				Interop.NativeMethods.vkGetPhysicalDeviceFeatures (this.m, &pFeatures);

				return pFeatures;
			}
		}

		public FormatProperties GetFormatProperties (Format format)
		{
			FormatProperties pFormatProperties;
			unsafe {
				pFormatProperties = new FormatProperties ();
				Interop.NativeMethods.vkGetPhysicalDeviceFormatProperties (this.m, format, &pFormatProperties);

				return pFormatProperties;
			}
		}

		public ImageFormatProperties GetImageFormatProperties (Format format, ImageType type, ImageTiling tiling, ImageUsageFlags usage, ImageCreateFlags flags = (ImageCreateFlags)0)
		{
			Result result;
			ImageFormatProperties pImageFormatProperties;
			unsafe {
				pImageFormatProperties = new ImageFormatProperties ();
				result = Interop.NativeMethods.vkGetPhysicalDeviceImageFormatProperties (this.m, format, type, tiling, usage, flags, &pImageFormatProperties);
				if (result != Result.Success)
					throw new ResultException (result);

				return pImageFormatProperties;
			}
		}

		public Device CreateDevice (DeviceCreateInfo pCreateInfo, AllocationCallbacks pAllocator = null)
		{
			Result result;
			Device pDevice;
			unsafe {
				pDevice = new Device ();

				fixed (IntPtr* ptrpDevice = &pDevice.m) {
					result = Interop.NativeMethods.vkCreateDevice (this.m, pCreateInfo != null ? pCreateInfo.m : (Interop.DeviceCreateInfo*)default(IntPtr), pAllocator != null ? pAllocator.m : null, ptrpDevice);
				}
				if (result != Result.Success)
					throw new ResultException (result);

				return pDevice;
			}
		}

		public LayerProperties[] EnumerateDeviceLayerProperties ()
		{
			Result result;
			unsafe {
				UInt32 pPropertyCount;
				result = Interop.NativeMethods.vkEnumerateDeviceLayerProperties (this.m, &pPropertyCount, null);
				if (result != Result.Success)
					throw new ResultException (result);
				if (pPropertyCount <= 0)
					return null;

				int size = Marshal.SizeOf (typeof (Interop.LayerProperties));
				var refpProperties = new NativeReference ((int)(size * pPropertyCount));
				var ptrpProperties = refpProperties.Handle;
				result = Interop.NativeMethods.vkEnumerateDeviceLayerProperties (this.m, &pPropertyCount, (Interop.LayerProperties*)ptrpProperties);
				if (result != Result.Success)
					throw new ResultException (result);

				if (pPropertyCount <= 0)
					return null;
				var arr = new LayerProperties [pPropertyCount];
				for (int i = 0; i < pPropertyCount; i++) {
					arr [i] = new LayerProperties (new NativePointer (refpProperties, (IntPtr)(&((Interop.LayerProperties*)ptrpProperties) [i])));
				}

				return arr;
			}
		}

		public ExtensionProperties[] EnumerateDeviceExtensionProperties (string pLayerName = null)
		{
			Result result;
			unsafe {
				UInt32 pPropertyCount;
				result = Interop.NativeMethods.vkEnumerateDeviceExtensionProperties (this.m, pLayerName, &pPropertyCount, null);
				if (result != Result.Success)
					throw new ResultException (result);
				if (pPropertyCount <= 0)
					return null;

				int size = Marshal.SizeOf (typeof (Interop.ExtensionProperties));
				var refpProperties = new NativeReference ((int)(size * pPropertyCount));
				var ptrpProperties = refpProperties.Handle;
				result = Interop.NativeMethods.vkEnumerateDeviceExtensionProperties (this.m, pLayerName, &pPropertyCount, (Interop.ExtensionProperties*)ptrpProperties);
				if (result != Result.Success)
					throw new ResultException (result);

				if (pPropertyCount <= 0)
					return null;
				var arr = new ExtensionProperties [pPropertyCount];
				for (int i = 0; i < pPropertyCount; i++) {
					arr [i] = new ExtensionProperties (new NativePointer (refpProperties, (IntPtr)(&((Interop.ExtensionProperties*)ptrpProperties) [i])));
				}

				return arr;
			}
		}

		public SparseImageFormatProperties[] GetSparseImageFormatProperties (Format format, ImageType type, SampleCountFlags samples, ImageUsageFlags usage, ImageTiling tiling)
		{
			unsafe {
				UInt32 pPropertyCount;
				Interop.NativeMethods.vkGetPhysicalDeviceSparseImageFormatProperties (this.m, format, type, samples, usage, tiling, &pPropertyCount, null);
				if (pPropertyCount <= 0)
					return null;

				int size = Marshal.SizeOf (typeof (SparseImageFormatProperties));
				var refpProperties = new NativeReference ((int)(size * pPropertyCount));
				var ptrpProperties = refpProperties.Handle;
				Interop.NativeMethods.vkGetPhysicalDeviceSparseImageFormatProperties (this.m, format, type, samples, usage, tiling, &pPropertyCount, (SparseImageFormatProperties*)ptrpProperties);

				if (pPropertyCount <= 0)
					return null;
				var arr = new SparseImageFormatProperties [pPropertyCount];
				for (int i = 0; i < pPropertyCount; i++) {
					arr [i] = (((SparseImageFormatProperties*)ptrpProperties) [i]);
				}

				return arr;
			}
		}

		public DisplayPropertiesKHR[] GetDisplayPropertiesKHR ()
		{
			Result result;
			unsafe {
				UInt32 pPropertyCount;
				result = Interop.NativeMethods.vkGetPhysicalDeviceDisplayPropertiesKHR (this.m, &pPropertyCount, null);
				if (result != Result.Success)
					throw new ResultException (result);
				if (pPropertyCount <= 0)
					return null;

				int size = Marshal.SizeOf (typeof (Interop.DisplayPropertiesKHR));
				var refpProperties = new NativeReference ((int)(size * pPropertyCount));
				var ptrpProperties = refpProperties.Handle;
				result = Interop.NativeMethods.vkGetPhysicalDeviceDisplayPropertiesKHR (this.m, &pPropertyCount, (Interop.DisplayPropertiesKHR*)ptrpProperties);
				if (result != Result.Success)
					throw new ResultException (result);

				if (pPropertyCount <= 0)
					return null;
				var arr = new DisplayPropertiesKHR [pPropertyCount];
				for (int i = 0; i < pPropertyCount; i++) {
					arr [i] = new DisplayPropertiesKHR (new NativePointer (refpProperties, (IntPtr)(&((Interop.DisplayPropertiesKHR*)ptrpProperties) [i])));
				}

				return arr;
			}
		}

		public DisplayPlanePropertiesKHR[] GetDisplayPlanePropertiesKHR ()
		{
			Result result;
			unsafe {
				UInt32 pPropertyCount;
				result = Interop.NativeMethods.vkGetPhysicalDeviceDisplayPlanePropertiesKHR (this.m, &pPropertyCount, null);
				if (result != Result.Success)
					throw new ResultException (result);
				if (pPropertyCount <= 0)
					return null;

				int size = Marshal.SizeOf (typeof (Interop.DisplayPlanePropertiesKHR));
				var refpProperties = new NativeReference ((int)(size * pPropertyCount));
				var ptrpProperties = refpProperties.Handle;
				result = Interop.NativeMethods.vkGetPhysicalDeviceDisplayPlanePropertiesKHR (this.m, &pPropertyCount, (Interop.DisplayPlanePropertiesKHR*)ptrpProperties);
				if (result != Result.Success)
					throw new ResultException (result);

				if (pPropertyCount <= 0)
					return null;
				var arr = new DisplayPlanePropertiesKHR [pPropertyCount];
				for (int i = 0; i < pPropertyCount; i++) {
					arr [i] = new DisplayPlanePropertiesKHR (new NativePointer (refpProperties, (IntPtr)(&((Interop.DisplayPlanePropertiesKHR*)ptrpProperties) [i])));
				}

				return arr;
			}
		}

		public DisplayKHR[] GetDisplayPlaneSupportedDisplaysKHR (UInt32 planeIndex)
		{
			Result result;
			unsafe {
				UInt32 pDisplayCount;
				result = Interop.NativeMethods.vkGetDisplayPlaneSupportedDisplaysKHR (this.m, planeIndex, &pDisplayCount, null);
				if (result != Result.Success)
					throw new ResultException (result);
				if (pDisplayCount <= 0)
					return null;

				int size = Marshal.SizeOf (typeof (UInt64));
				var refpDisplays = new NativeReference ((int)(size * pDisplayCount));
				var ptrpDisplays = refpDisplays.Handle;
				result = Interop.NativeMethods.vkGetDisplayPlaneSupportedDisplaysKHR (this.m, planeIndex, &pDisplayCount, (UInt64*)ptrpDisplays);
				if (result != Result.Success)
					throw new ResultException (result);

				if (pDisplayCount <= 0)
					return null;
				var arr = new DisplayKHR [pDisplayCount];
				for (int i = 0; i < pDisplayCount; i++) {
					arr [i] = new DisplayKHR ();
					arr [i].m = ((UInt64*)ptrpDisplays) [i];
				}

				return arr;
			}
		}

		public DisplayModePropertiesKHR[] GetDisplayModePropertiesKHR (DisplayKHR display)
		{
			Result result;
			unsafe {
				UInt32 pPropertyCount;
				result = Interop.NativeMethods.vkGetDisplayModePropertiesKHR (this.m, display != null ? display.m : default(UInt64), &pPropertyCount, null);
				if (result != Result.Success)
					throw new ResultException (result);
				if (pPropertyCount <= 0)
					return null;

				int size = Marshal.SizeOf (typeof (Interop.DisplayModePropertiesKHR));
				var refpProperties = new NativeReference ((int)(size * pPropertyCount));
				var ptrpProperties = refpProperties.Handle;
				result = Interop.NativeMethods.vkGetDisplayModePropertiesKHR (this.m, display != null ? display.m : default(UInt64), &pPropertyCount, (Interop.DisplayModePropertiesKHR*)ptrpProperties);
				if (result != Result.Success)
					throw new ResultException (result);

				if (pPropertyCount <= 0)
					return null;
				var arr = new DisplayModePropertiesKHR [pPropertyCount];
				for (int i = 0; i < pPropertyCount; i++) {
					arr [i] = new DisplayModePropertiesKHR (new NativePointer (refpProperties, (IntPtr)(&((Interop.DisplayModePropertiesKHR*)ptrpProperties) [i])));
				}

				return arr;
			}
		}

		public DisplayModeKHR CreateDisplayModeKHR (DisplayKHR display, DisplayModeCreateInfoKHR pCreateInfo, AllocationCallbacks pAllocator = null)
		{
			Result result;
			DisplayModeKHR pMode;
			unsafe {
				pMode = new DisplayModeKHR ();

				fixed (UInt64* ptrpMode = &pMode.m) {
					result = Interop.NativeMethods.vkCreateDisplayModeKHR (this.m, display != null ? display.m : default(UInt64), pCreateInfo != null ? pCreateInfo.m : (Interop.DisplayModeCreateInfoKHR*)default(IntPtr), pAllocator != null ? pAllocator.m : null, ptrpMode);
				}
				if (result != Result.Success)
					throw new ResultException (result);

				return pMode;
			}
		}

		public DisplayPlaneCapabilitiesKHR GetDisplayPlaneCapabilitiesKHR (DisplayModeKHR mode, UInt32 planeIndex)
		{
			Result result;
			DisplayPlaneCapabilitiesKHR pCapabilities;
			unsafe {
				pCapabilities = new DisplayPlaneCapabilitiesKHR ();
				result = Interop.NativeMethods.vkGetDisplayPlaneCapabilitiesKHR (this.m, mode != null ? mode.m : default(UInt64), planeIndex, &pCapabilities);
				if (result != Result.Success)
					throw new ResultException (result);

				return pCapabilities;
			}
		}

		public Bool32 GetSurfaceSupportKHR (UInt32 queueFamilyIndex, SurfaceKHR surface)
		{
			Result result;
			Bool32 pSupported;
			unsafe {
				pSupported = new Bool32 ();
				result = Interop.NativeMethods.vkGetPhysicalDeviceSurfaceSupportKHR (this.m, queueFamilyIndex, surface != null ? surface.m : default(UInt64), &pSupported);
				if (result != Result.Success)
					throw new ResultException (result);

				return pSupported;
			}
		}

		public SurfaceCapabilitiesKHR GetSurfaceCapabilitiesKHR (SurfaceKHR surface)
		{
			Result result;
			SurfaceCapabilitiesKHR pSurfaceCapabilities;
			unsafe {
				pSurfaceCapabilities = new SurfaceCapabilitiesKHR ();
				result = Interop.NativeMethods.vkGetPhysicalDeviceSurfaceCapabilitiesKHR (this.m, surface != null ? surface.m : default(UInt64), &pSurfaceCapabilities);
				if (result != Result.Success)
					throw new ResultException (result);

				return pSurfaceCapabilities;
			}
		}

		public SurfaceFormatKHR[] GetSurfaceFormatsKHR (SurfaceKHR surface)
		{
			Result result;
			unsafe {
				UInt32 pSurfaceFormatCount;
				result = Interop.NativeMethods.vkGetPhysicalDeviceSurfaceFormatsKHR (this.m, surface != null ? surface.m : default(UInt64), &pSurfaceFormatCount, null);
				if (result != Result.Success)
					throw new ResultException (result);
				if (pSurfaceFormatCount <= 0)
					return null;

				int size = Marshal.SizeOf (typeof (SurfaceFormatKHR));
				var refpSurfaceFormats = new NativeReference ((int)(size * pSurfaceFormatCount));
				var ptrpSurfaceFormats = refpSurfaceFormats.Handle;
				result = Interop.NativeMethods.vkGetPhysicalDeviceSurfaceFormatsKHR (this.m, surface != null ? surface.m : default(UInt64), &pSurfaceFormatCount, (SurfaceFormatKHR*)ptrpSurfaceFormats);
				if (result != Result.Success)
					throw new ResultException (result);

				if (pSurfaceFormatCount <= 0)
					return null;
				var arr = new SurfaceFormatKHR [pSurfaceFormatCount];
				for (int i = 0; i < pSurfaceFormatCount; i++) {
					arr [i] = (((SurfaceFormatKHR*)ptrpSurfaceFormats) [i]);
				}

				return arr;
			}
		}

		public PresentModeKHR[] GetSurfacePresentModesKHR (SurfaceKHR surface)
		{
			Result result;
			unsafe {
				UInt32 pPresentModeCount;
				result = Interop.NativeMethods.vkGetPhysicalDeviceSurfacePresentModesKHR (this.m, surface != null ? surface.m : default(UInt64), &pPresentModeCount, null);
				if (result != Result.Success)
					throw new ResultException (result);
				if (pPresentModeCount <= 0)
					return null;

				int size = 4;
				var refpPresentModes = new NativeReference ((int)(size * pPresentModeCount));
				var ptrpPresentModes = refpPresentModes.Handle;
				result = Interop.NativeMethods.vkGetPhysicalDeviceSurfacePresentModesKHR (this.m, surface != null ? surface.m : default(UInt64), &pPresentModeCount, (PresentModeKHR*)ptrpPresentModes);
				if (result != Result.Success)
					throw new ResultException (result);

				if (pPresentModeCount <= 0)
					return null;
				var arr = new PresentModeKHR [pPresentModeCount];
				for (int i = 0; i < pPresentModeCount; i++) {
					arr [i] = new PresentModeKHR ();
					arr [i] = ((PresentModeKHR*)ptrpPresentModes) [i];
				}

				return arr;
			}
		}

		public ExternalImageFormatPropertiesNv GetExternalImageFormatPropertiesNV (Format format, ImageType type, ImageTiling tiling, ImageUsageFlags usage, ImageCreateFlags flags = (ImageCreateFlags)0, ExternalMemoryHandleTypeFlagsNv externalHandleType = (ExternalMemoryHandleTypeFlagsNv)0)
		{
			Result result;
			ExternalImageFormatPropertiesNv pExternalImageFormatProperties;
			unsafe {
				pExternalImageFormatProperties = new ExternalImageFormatPropertiesNv ();
				result = Interop.NativeMethods.vkGetPhysicalDeviceExternalImageFormatPropertiesNV (this.m, format, type, tiling, usage, flags, externalHandleType, &pExternalImageFormatProperties);
				if (result != Result.Success)
					throw new ResultException (result);

				return pExternalImageFormatProperties;
			}
		}

		public void GetGeneratedCommandsPropertiesNVX (out DeviceGeneratedCommandsFeaturesNvx pFeatures, out DeviceGeneratedCommandsLimitsNvx pLimits)
		{
			unsafe {
				pFeatures = new DeviceGeneratedCommandsFeaturesNvx ();
				pLimits = new DeviceGeneratedCommandsLimitsNvx ();
				Interop.NativeMethods.vkGetPhysicalDeviceGeneratedCommandsPropertiesNVX (this.m, pFeatures != null ? pFeatures.m : (Interop.DeviceGeneratedCommandsFeaturesNvx*)default(IntPtr), pLimits != null ? pLimits.m : (Interop.DeviceGeneratedCommandsLimitsNvx*)default(IntPtr));
			}
		}

		public PhysicalDeviceFeatures2KHR GetFeatures2KHR ()
		{
			PhysicalDeviceFeatures2KHR pFeatures;
			unsafe {
				pFeatures = new PhysicalDeviceFeatures2KHR ();
				Interop.NativeMethods.vkGetPhysicalDeviceFeatures2KHR (this.m, pFeatures != null ? pFeatures.m : (Interop.PhysicalDeviceFeatures2KHR*)default(IntPtr));

				return pFeatures;
			}
		}

		public PhysicalDeviceProperties2KHR GetProperties2KHR ()
		{
			PhysicalDeviceProperties2KHR pProperties;
			unsafe {
				pProperties = new PhysicalDeviceProperties2KHR ();
				Interop.NativeMethods.vkGetPhysicalDeviceProperties2KHR (this.m, pProperties != null ? pProperties.m : (Interop.PhysicalDeviceProperties2KHR*)default(IntPtr));

				return pProperties;
			}
		}

		public FormatProperties2KHR GetFormatProperties2KHR (Format format)
		{
			FormatProperties2KHR pFormatProperties;
			unsafe {
				pFormatProperties = new FormatProperties2KHR ();
				Interop.NativeMethods.vkGetPhysicalDeviceFormatProperties2KHR (this.m, format, pFormatProperties != null ? pFormatProperties.m : (Interop.FormatProperties2KHR*)default(IntPtr));

				return pFormatProperties;
			}
		}

		public ImageFormatProperties2KHR GetImageFormatProperties2KHR (PhysicalDeviceImageFormatInfo2KHR pImageFormatInfo)
		{
			Result result;
			ImageFormatProperties2KHR pImageFormatProperties;
			unsafe {
				pImageFormatProperties = new ImageFormatProperties2KHR ();
				result = Interop.NativeMethods.vkGetPhysicalDeviceImageFormatProperties2KHR (this.m, pImageFormatInfo != null ? pImageFormatInfo.m : (Interop.PhysicalDeviceImageFormatInfo2KHR*)default(IntPtr), pImageFormatProperties != null ? pImageFormatProperties.m : (Interop.ImageFormatProperties2KHR*)default(IntPtr));
				if (result != Result.Success)
					throw new ResultException (result);

				return pImageFormatProperties;
			}
		}

		public QueueFamilyProperties2KHR[] GetQueueFamilyProperties2KHR ()
		{
			unsafe {
				UInt32 pQueueFamilyPropertyCount;
				Interop.NativeMethods.vkGetPhysicalDeviceQueueFamilyProperties2KHR (this.m, &pQueueFamilyPropertyCount, null);
				if (pQueueFamilyPropertyCount <= 0)
					return null;

				int size = Marshal.SizeOf (typeof (Interop.QueueFamilyProperties2KHR));
				var refpQueueFamilyProperties = new NativeReference ((int)(size * pQueueFamilyPropertyCount));
				var ptrpQueueFamilyProperties = refpQueueFamilyProperties.Handle;
				Interop.NativeMethods.vkGetPhysicalDeviceQueueFamilyProperties2KHR (this.m, &pQueueFamilyPropertyCount, (Interop.QueueFamilyProperties2KHR*)ptrpQueueFamilyProperties);

				if (pQueueFamilyPropertyCount <= 0)
					return null;
				var arr = new QueueFamilyProperties2KHR [pQueueFamilyPropertyCount];
				for (int i = 0; i < pQueueFamilyPropertyCount; i++) {
					arr [i] = new QueueFamilyProperties2KHR (new NativePointer (refpQueueFamilyProperties, (IntPtr)(&((Interop.QueueFamilyProperties2KHR*)ptrpQueueFamilyProperties) [i])));
				}

				return arr;
			}
		}

		public PhysicalDeviceMemoryProperties2KHR GetMemoryProperties2KHR ()
		{
			PhysicalDeviceMemoryProperties2KHR pMemoryProperties;
			unsafe {
				pMemoryProperties = new PhysicalDeviceMemoryProperties2KHR ();
				Interop.NativeMethods.vkGetPhysicalDeviceMemoryProperties2KHR (this.m, pMemoryProperties != null ? pMemoryProperties.m : (Interop.PhysicalDeviceMemoryProperties2KHR*)default(IntPtr));

				return pMemoryProperties;
			}
		}

		public SparseImageFormatProperties2KHR[] GetSparseImageFormatProperties2KHR (PhysicalDeviceSparseImageFormatInfo2KHR pFormatInfo)
		{
			unsafe {
				UInt32 pPropertyCount;
				Interop.NativeMethods.vkGetPhysicalDeviceSparseImageFormatProperties2KHR (this.m, pFormatInfo != null ? pFormatInfo.m : (Interop.PhysicalDeviceSparseImageFormatInfo2KHR*)default(IntPtr), &pPropertyCount, null);
				if (pPropertyCount <= 0)
					return null;

				int size = Marshal.SizeOf (typeof (Interop.SparseImageFormatProperties2KHR));
				var refpProperties = new NativeReference ((int)(size * pPropertyCount));
				var ptrpProperties = refpProperties.Handle;
				Interop.NativeMethods.vkGetPhysicalDeviceSparseImageFormatProperties2KHR (this.m, pFormatInfo != null ? pFormatInfo.m : (Interop.PhysicalDeviceSparseImageFormatInfo2KHR*)default(IntPtr), &pPropertyCount, (Interop.SparseImageFormatProperties2KHR*)ptrpProperties);

				if (pPropertyCount <= 0)
					return null;
				var arr = new SparseImageFormatProperties2KHR [pPropertyCount];
				for (int i = 0; i < pPropertyCount; i++) {
					arr [i] = new SparseImageFormatProperties2KHR (new NativePointer (refpProperties, (IntPtr)(&((Interop.SparseImageFormatProperties2KHR*)ptrpProperties) [i])));
				}

				return arr;
			}
		}

		public ExternalBufferPropertiesKHR GetExternalBufferPropertiesKHR (PhysicalDeviceExternalBufferInfoKHR pExternalBufferInfo)
		{
			ExternalBufferPropertiesKHR pExternalBufferProperties;
			unsafe {
				pExternalBufferProperties = new ExternalBufferPropertiesKHR ();
				Interop.NativeMethods.vkGetPhysicalDeviceExternalBufferPropertiesKHR (this.m, pExternalBufferInfo != null ? pExternalBufferInfo.m : (Interop.PhysicalDeviceExternalBufferInfoKHR*)default(IntPtr), pExternalBufferProperties != null ? pExternalBufferProperties.m : (Interop.ExternalBufferPropertiesKHR*)default(IntPtr));

				return pExternalBufferProperties;
			}
		}

		public ExternalSemaphorePropertiesKHR GetExternalSemaphorePropertiesKHR (PhysicalDeviceExternalSemaphoreInfoKHR pExternalSemaphoreInfo)
		{
			ExternalSemaphorePropertiesKHR pExternalSemaphoreProperties;
			unsafe {
				pExternalSemaphoreProperties = new ExternalSemaphorePropertiesKHR ();
				Interop.NativeMethods.vkGetPhysicalDeviceExternalSemaphorePropertiesKHR (this.m, pExternalSemaphoreInfo != null ? pExternalSemaphoreInfo.m : (Interop.PhysicalDeviceExternalSemaphoreInfoKHR*)default(IntPtr), pExternalSemaphoreProperties != null ? pExternalSemaphoreProperties.m : (Interop.ExternalSemaphorePropertiesKHR*)default(IntPtr));

				return pExternalSemaphoreProperties;
			}
		}

		public ExternalFencePropertiesKHR GetExternalFencePropertiesKHR (PhysicalDeviceExternalFenceInfoKHR pExternalFenceInfo)
		{
			ExternalFencePropertiesKHR pExternalFenceProperties;
			unsafe {
				pExternalFenceProperties = new ExternalFencePropertiesKHR ();
				Interop.NativeMethods.vkGetPhysicalDeviceExternalFencePropertiesKHR (this.m, pExternalFenceInfo != null ? pExternalFenceInfo.m : (Interop.PhysicalDeviceExternalFenceInfoKHR*)default(IntPtr), pExternalFenceProperties != null ? pExternalFenceProperties.m : (Interop.ExternalFencePropertiesKHR*)default(IntPtr));

				return pExternalFenceProperties;
			}
		}

		public void ReleaseDisplayEXT (DisplayKHR display)
		{
			Result result;
			unsafe {
				result = Interop.NativeMethods.vkReleaseDisplayEXT (this.m, display != null ? display.m : default(UInt64));
				if (result != Result.Success)
					throw new ResultException (result);
			}
		}

		public IntPtr AcquireXlibDisplayEXT (DisplayKHR display)
		{
			Result result;
			IntPtr dpy;
			unsafe {
				dpy = new IntPtr ();
				result = Interop.NativeMethods.vkAcquireXlibDisplayEXT (this.m, &dpy, display != null ? display.m : default(UInt64));
				if (result != Result.Success)
					throw new ResultException (result);

				return dpy;
			}
		}

		public void GetRandROutputDisplayEXT (out IntPtr dpy, UInt32 rrOutput, out DisplayKHR pDisplay)
		{
			Result result;
			unsafe {
				pDisplay = new DisplayKHR ();

				fixed (IntPtr* ptrdpy = &dpy) {
					fixed (UInt64* ptrpDisplay = &pDisplay.m) {
						result = Interop.NativeMethods.vkGetRandROutputDisplayEXT (this.m, ptrdpy, rrOutput, ptrpDisplay);
					}
				}
				if (result != Result.Success)
					throw new ResultException (result);
			}
		}

		public SurfaceCapabilities2Ext GetSurfaceCapabilities2EXT (SurfaceKHR surface)
		{
			Result result;
			SurfaceCapabilities2Ext pSurfaceCapabilities;
			unsafe {
				pSurfaceCapabilities = new SurfaceCapabilities2Ext ();
				result = Interop.NativeMethods.vkGetPhysicalDeviceSurfaceCapabilities2EXT (this.m, surface != null ? surface.m : default(UInt64), pSurfaceCapabilities != null ? pSurfaceCapabilities.m : (Interop.SurfaceCapabilities2Ext*)default(IntPtr));
				if (result != Result.Success)
					throw new ResultException (result);

				return pSurfaceCapabilities;
			}
		}

		public Rect2D[] GetPresentRectanglesKHX (SurfaceKHR surface)
		{
			Result result;
			unsafe {
				UInt32 pRectCount;
				result = Interop.NativeMethods.vkGetPhysicalDevicePresentRectanglesKHX (this.m, surface != null ? surface.m : default(UInt64), &pRectCount, null);
				if (result != Result.Success)
					throw new ResultException (result);
				if (pRectCount <= 0)
					return null;

				int size = Marshal.SizeOf (typeof (Rect2D));
				var refpRects = new NativeReference ((int)(size * pRectCount));
				var ptrpRects = refpRects.Handle;
				result = Interop.NativeMethods.vkGetPhysicalDevicePresentRectanglesKHX (this.m, surface != null ? surface.m : default(UInt64), &pRectCount, (Rect2D*)ptrpRects);
				if (result != Result.Success)
					throw new ResultException (result);

				if (pRectCount <= 0)
					return null;
				var arr = new Rect2D [pRectCount];
				for (int i = 0; i < pRectCount; i++) {
					arr [i] = (((Rect2D*)ptrpRects) [i]);
				}

				return arr;
			}
		}

		public MultisamplePropertiesExt GetMultisamplePropertiesEXT (SampleCountFlags samples)
		{
			MultisamplePropertiesExt pMultisampleProperties;
			unsafe {
				pMultisampleProperties = new MultisamplePropertiesExt ();
				Interop.NativeMethods.vkGetPhysicalDeviceMultisamplePropertiesEXT (this.m, samples, pMultisampleProperties != null ? pMultisampleProperties.m : (Interop.MultisamplePropertiesExt*)default(IntPtr));

				return pMultisampleProperties;
			}
		}

		public SurfaceCapabilities2KHR GetSurfaceCapabilities2KHR (PhysicalDeviceSurfaceInfo2KHR pSurfaceInfo)
		{
			Result result;
			SurfaceCapabilities2KHR pSurfaceCapabilities;
			unsafe {
				pSurfaceCapabilities = new SurfaceCapabilities2KHR ();
				result = Interop.NativeMethods.vkGetPhysicalDeviceSurfaceCapabilities2KHR (this.m, pSurfaceInfo != null ? pSurfaceInfo.m : (Interop.PhysicalDeviceSurfaceInfo2KHR*)default(IntPtr), pSurfaceCapabilities != null ? pSurfaceCapabilities.m : (Interop.SurfaceCapabilities2KHR*)default(IntPtr));
				if (result != Result.Success)
					throw new ResultException (result);

				return pSurfaceCapabilities;
			}
		}

		public SurfaceFormat2KHR[] GetSurfaceFormats2KHR (PhysicalDeviceSurfaceInfo2KHR pSurfaceInfo)
		{
			Result result;
			unsafe {
				UInt32 pSurfaceFormatCount;
				result = Interop.NativeMethods.vkGetPhysicalDeviceSurfaceFormats2KHR (this.m, pSurfaceInfo != null ? pSurfaceInfo.m : (Interop.PhysicalDeviceSurfaceInfo2KHR*)default(IntPtr), &pSurfaceFormatCount, null);
				if (result != Result.Success)
					throw new ResultException (result);
				if (pSurfaceFormatCount <= 0)
					return null;

				int size = Marshal.SizeOf (typeof (Interop.SurfaceFormat2KHR));
				var refpSurfaceFormats = new NativeReference ((int)(size * pSurfaceFormatCount));
				var ptrpSurfaceFormats = refpSurfaceFormats.Handle;
				result = Interop.NativeMethods.vkGetPhysicalDeviceSurfaceFormats2KHR (this.m, pSurfaceInfo != null ? pSurfaceInfo.m : (Interop.PhysicalDeviceSurfaceInfo2KHR*)default(IntPtr), &pSurfaceFormatCount, (Interop.SurfaceFormat2KHR*)ptrpSurfaceFormats);
				if (result != Result.Success)
					throw new ResultException (result);

				if (pSurfaceFormatCount <= 0)
					return null;
				var arr = new SurfaceFormat2KHR [pSurfaceFormatCount];
				for (int i = 0; i < pSurfaceFormatCount; i++) {
					arr [i] = new SurfaceFormat2KHR (new NativePointer (refpSurfaceFormats, (IntPtr)(&((Interop.SurfaceFormat2KHR*)ptrpSurfaceFormats) [i])));
				}

				return arr;
			}
		}
	}
}
