/* Please note that this file is generated by the VulkanSharp's generator. Do not edit directly.

   Licensed under the MIT license.

   Copyright 2016 Xamarin Inc

   This notice may not be removed from any source distribution.
   See LICENSE file for licensing details.
*/

using System;
using System.Runtime.InteropServices;

namespace Vulkan
{
	unsafe public partial struct Offset2D
	{
		public Int32 X;
		public Int32 Y;
	}

	unsafe public partial struct Offset3D
	{
		public Int32 X;
		public Int32 Y;
		public Int32 Z;
	}

	unsafe public partial struct Extent2D
	{
		public UInt32 Width;
		public UInt32 Height;
	}

	unsafe public partial struct Extent3D
	{
		public UInt32 Width;
		public UInt32 Height;
		public UInt32 Depth;
	}

	unsafe public partial struct Viewport
	{
		public float X;
		public float Y;
		public float Width;
		public float Height;
		public float MinDepth;
		public float MaxDepth;
	}

	unsafe public partial struct Rect2D
	{
		public Offset2D Offset;
		public Extent2D Extent;
	}

	unsafe public partial struct ClearRect
	{
		public Rect2D Rect;
		public UInt32 BaseArrayLayer;
		public UInt32 LayerCount;
	}

	unsafe public partial struct ComponentMapping
	{
		public ComponentSwizzle R;
		public ComponentSwizzle G;
		public ComponentSwizzle B;
		public ComponentSwizzle A;
	}

	unsafe public partial class PhysicalDeviceProperties : MarshalledObject
	{
		public UInt32 ApiVersion {
			get { return m->ApiVersion; }
			set { m->ApiVersion = value; }
		}

		public UInt32 DriverVersion {
			get { return m->DriverVersion; }
			set { m->DriverVersion = value; }
		}

		public UInt32 VendorId {
			get { return m->VendorId; }
			set { m->VendorId = value; }
		}

		public UInt32 DeviceId {
			get { return m->DeviceId; }
			set { m->DeviceId = value; }
		}

		public PhysicalDeviceType DeviceType {
			get { return m->DeviceType; }
			set { m->DeviceType = value; }
		}

		public string DeviceName {
			get { return Marshal.PtrToStringAnsi ((IntPtr)m->DeviceName); }
			set { Interop.Structure.MarshalFixedSizeString (m->DeviceName, value, 256); }
		}

		public byte[] PipelineCacheUuid {
			get {
				var arr = new byte [16];
				for (int i = 0; i < 16; i++)
					arr [i] = m->PipelineCacheUuid [i];
				return arr;
			}

			set {
				if (value.Length > 16)
					throw new Exception ("array too long");
				for (int i = 0; i < value.Length; i++)
					m->PipelineCacheUuid [i] = value [i];
				for (int i = value.Length; i < 16; i++)
					m->PipelineCacheUuid [i] = 0;
			}
		}

		PhysicalDeviceLimits lLimits;
		public PhysicalDeviceLimits Limits {
			get { return lLimits; }
			set { lLimits = value; m->Limits = value != null ? *value.m : default(Interop.PhysicalDeviceLimits); }
		}

		public PhysicalDeviceSparseProperties SparseProperties {
			get { return m->SparseProperties; }
			set { m->SparseProperties = value; }
		}
		internal Interop.PhysicalDeviceProperties* m {

			get {
				return (Interop.PhysicalDeviceProperties*)native.Handle;
			}
		}

		public PhysicalDeviceProperties ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.PhysicalDeviceProperties));
			Initialize ();
		}

		internal PhysicalDeviceProperties (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}


		internal void Initialize ()
		{
			lLimits = new PhysicalDeviceLimits (new NativePointer (native.Reference, (IntPtr)(&m->Limits)));
		}

	}

	unsafe public partial class ExtensionProperties : MarshalledObject
	{
		public string ExtensionName {
			get { return Marshal.PtrToStringAnsi ((IntPtr)m->ExtensionName); }
			set { Interop.Structure.MarshalFixedSizeString (m->ExtensionName, value, 256); }
		}

		public UInt32 SpecVersion {
			get { return m->SpecVersion; }
			set { m->SpecVersion = value; }
		}
		internal Interop.ExtensionProperties* m {

			get {
				return (Interop.ExtensionProperties*)native.Handle;
			}
		}

		public ExtensionProperties ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.ExtensionProperties));
		}

		internal ExtensionProperties (NativePointer pointer)
		{
			native = pointer;
		}

	}

	unsafe public partial class LayerProperties : MarshalledObject
	{
		public string LayerName {
			get { return Marshal.PtrToStringAnsi ((IntPtr)m->LayerName); }
			set { Interop.Structure.MarshalFixedSizeString (m->LayerName, value, 256); }
		}

		public UInt32 SpecVersion {
			get { return m->SpecVersion; }
			set { m->SpecVersion = value; }
		}

		public UInt32 ImplementationVersion {
			get { return m->ImplementationVersion; }
			set { m->ImplementationVersion = value; }
		}

		public string Description {
			get { return Marshal.PtrToStringAnsi ((IntPtr)m->Description); }
			set { Interop.Structure.MarshalFixedSizeString (m->Description, value, 256); }
		}
		internal Interop.LayerProperties* m {

			get {
				return (Interop.LayerProperties*)native.Handle;
			}
		}

		public LayerProperties ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.LayerProperties));
		}

		internal LayerProperties (NativePointer pointer)
		{
			native = pointer;
		}

	}

	unsafe public partial class ApplicationInfo : MarshalledObject
	{
		public string ApplicationName {
			get { return Marshal.PtrToStringAnsi (m->ApplicationName); }
			set { m->ApplicationName = Marshal.StringToHGlobalAnsi (value); }
		}

		public UInt32 ApplicationVersion {
			get { return m->ApplicationVersion; }
			set { m->ApplicationVersion = value; }
		}

		public string EngineName {
			get { return Marshal.PtrToStringAnsi (m->EngineName); }
			set { m->EngineName = Marshal.StringToHGlobalAnsi (value); }
		}

		public UInt32 EngineVersion {
			get { return m->EngineVersion; }
			set { m->EngineVersion = value; }
		}

		public UInt32 ApiVersion {
			get { return m->ApiVersion; }
			set { m->ApiVersion = value; }
		}
		internal Interop.ApplicationInfo* m {

			get {
				return (Interop.ApplicationInfo*)native.Handle;
			}
		}

		public ApplicationInfo ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.ApplicationInfo));
			Initialize ();
		}

		internal ApplicationInfo (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}


		internal void Initialize ()
		{
			m->SType = StructureType.ApplicationInfo;
		}

	}

	unsafe public partial class AllocationCallbacks : MarshalledObject
	{
		public IntPtr UserData {
			get { return m->UserData; }
			set { m->UserData = value; }
		}

		public IntPtr PfnAllocation {
			get { return m->PfnAllocation; }
			set { m->PfnAllocation = value; }
		}

		public IntPtr PfnReallocation {
			get { return m->PfnReallocation; }
			set { m->PfnReallocation = value; }
		}

		public IntPtr PfnFree {
			get { return m->PfnFree; }
			set { m->PfnFree = value; }
		}

		public IntPtr PfnInternalAllocation {
			get { return m->PfnInternalAllocation; }
			set { m->PfnInternalAllocation = value; }
		}

		public IntPtr PfnInternalFree {
			get { return m->PfnInternalFree; }
			set { m->PfnInternalFree = value; }
		}
		internal Interop.AllocationCallbacks* m {

			get {
				return (Interop.AllocationCallbacks*)native.Handle;
			}
		}

		public AllocationCallbacks ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.AllocationCallbacks));
		}

		internal AllocationCallbacks (NativePointer pointer)
		{
			native = pointer;
		}

	}

	unsafe public partial class DeviceQueueCreateInfo : MarshalledObject
	{
		public UInt32 Flags {
			get { return m->Flags; }
			set { m->Flags = value; }
		}

		public UInt32 QueueFamilyIndex {
			get { return m->QueueFamilyIndex; }
			set { m->QueueFamilyIndex = value; }
		}

		public UInt32 QueueCount {
			get { return m->QueueCount; }
			set { m->QueueCount = value; }
		}

		NativeReference refQueuePriorities;
		public float[] QueuePriorities {
			get {
				if (m->QueueCount == 0)
					return null;
				var values = new float [m->QueueCount];
				unsafe
				{
					float* ptr = (float*)m->QueuePriorities;
					for (int i = 0; i < values.Length; i++) 
						values [i] = ptr [i];
				}
				return values;
			}

			set {
				if (value == null) {
					m->QueueCount = 0;
					m->QueuePriorities = IntPtr.Zero;
					return;
				}
				m->QueueCount = (uint)value.Length;
				refQueuePriorities = new NativeReference ((int)(sizeof(float)*value.Length));
				m->QueuePriorities = refQueuePriorities.Handle;
				unsafe
				{
					float* ptr = (float*)m->QueuePriorities;
					for (int i = 0; i < value.Length; i++)
						ptr [i] = value [i];
				}
			}
		}
		internal Interop.DeviceQueueCreateInfo* m {

			get {
				return (Interop.DeviceQueueCreateInfo*)native.Handle;
			}
		}

		public DeviceQueueCreateInfo ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.DeviceQueueCreateInfo));
			Initialize ();
		}

		internal DeviceQueueCreateInfo (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}

		override public void Dispose (bool disposing)
		{
			base.Dispose (disposing);
			if (!disposing)
				return;
			refQueuePriorities.Dispose ();
			refQueuePriorities = null;
		}

		internal void Initialize ()
		{
			m->SType = StructureType.DeviceQueueCreateInfo;
		}

	}

	unsafe public partial class DeviceCreateInfo : MarshalledObject
	{
		public UInt32 Flags {
			get { return m->Flags; }
			set { m->Flags = value; }
		}

		public UInt32 QueueCreateInfoCount {
			get { return m->QueueCreateInfoCount; }
			set { m->QueueCreateInfoCount = value; }
		}

		NativeReference refQueueCreateInfos;
		public DeviceQueueCreateInfo[] QueueCreateInfos {
			get {
				if (m->QueueCreateInfoCount == 0)
					return null;
				var values = new DeviceQueueCreateInfo [m->QueueCreateInfoCount];
				unsafe
				{
					Interop.DeviceQueueCreateInfo* ptr = (Interop.DeviceQueueCreateInfo*)m->QueueCreateInfos;
					for (int i = 0; i < values.Length; i++) {
						values [i] = new DeviceQueueCreateInfo ();
						*values [i].m = ptr [i];
					}
				}
				return values;
			}

			set {
				if (value == null) {
					m->QueueCreateInfoCount = 0;
					m->QueueCreateInfos = IntPtr.Zero;
					return;
				}
				m->QueueCreateInfoCount = (uint)value.Length;
				refQueueCreateInfos = new NativeReference ((int)(sizeof(Interop.DeviceQueueCreateInfo)*value.Length));
				m->QueueCreateInfos = refQueueCreateInfos.Handle;
				unsafe
				{
					Interop.DeviceQueueCreateInfo* ptr = (Interop.DeviceQueueCreateInfo*)m->QueueCreateInfos;
					for (int i = 0; i < value.Length; i++)
						ptr [i] = *value [i].m;
				}
			}
		}

		public UInt32 EnabledLayerCount {
			get { return m->EnabledLayerCount; }
			set { m->EnabledLayerCount = value; }
		}

		NativeReference refEnabledLayerNames;
		public string[] EnabledLayerNames {
			get {
				if (m->EnabledLayerCount == 0)
					return null;
				var strings = new string [m->EnabledLayerCount];
				unsafe
				{
					void** ptr = (void**)m->EnabledLayerNames;
					for (int i = 0; i < m->EnabledLayerCount; i++)
						strings [i] = Marshal.PtrToStringAnsi ((IntPtr)ptr [i]);
				}
				return strings;
			}

			set {
				if (value == null) {
					m->EnabledLayerCount = 0;
					m->EnabledLayerNames = IntPtr.Zero;
					return;
				}
				m->EnabledLayerCount = (uint)value.Length;
				refEnabledLayerNames = new NativeReference ((int)(sizeof(IntPtr)*m->EnabledLayerCount));
				m->EnabledLayerNames = refEnabledLayerNames.Handle;
				unsafe
				{
					void** ptr = (void**)m->EnabledLayerNames;
					for (int i = 0; i < m->EnabledLayerCount; i++)
						ptr [i] = (void*) Marshal.StringToHGlobalAnsi (value [i]);
				}
			}
		}

		public UInt32 EnabledExtensionCount {
			get { return m->EnabledExtensionCount; }
			set { m->EnabledExtensionCount = value; }
		}

		NativeReference refEnabledExtensionNames;
		public string[] EnabledExtensionNames {
			get {
				if (m->EnabledExtensionCount == 0)
					return null;
				var strings = new string [m->EnabledExtensionCount];
				unsafe
				{
					void** ptr = (void**)m->EnabledExtensionNames;
					for (int i = 0; i < m->EnabledExtensionCount; i++)
						strings [i] = Marshal.PtrToStringAnsi ((IntPtr)ptr [i]);
				}
				return strings;
			}

			set {
				if (value == null) {
					m->EnabledExtensionCount = 0;
					m->EnabledExtensionNames = IntPtr.Zero;
					return;
				}
				m->EnabledExtensionCount = (uint)value.Length;
				refEnabledExtensionNames = new NativeReference ((int)(sizeof(IntPtr)*m->EnabledExtensionCount));
				m->EnabledExtensionNames = refEnabledExtensionNames.Handle;
				unsafe
				{
					void** ptr = (void**)m->EnabledExtensionNames;
					for (int i = 0; i < m->EnabledExtensionCount; i++)
						ptr [i] = (void*) Marshal.StringToHGlobalAnsi (value [i]);
				}
			}
		}

		public PhysicalDeviceFeatures EnabledFeatures {
			get { return (PhysicalDeviceFeatures)Interop.Structure.MarshalPointerToObject (m->EnabledFeatures, typeof (PhysicalDeviceFeatures)); }
			set { m->EnabledFeatures = Interop.Structure.MarshalObjectToPointer (m->EnabledFeatures, value); }
		}
		internal Interop.DeviceCreateInfo* m {

			get {
				return (Interop.DeviceCreateInfo*)native.Handle;
			}
		}

		public DeviceCreateInfo ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.DeviceCreateInfo));
			Initialize ();
		}

		internal DeviceCreateInfo (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}

		override public void Dispose (bool disposing)
		{
			base.Dispose (disposing);
			if (!disposing)
				return;
			refQueueCreateInfos?.Dispose ();
			refQueueCreateInfos = null;
			refEnabledLayerNames?.Dispose ();
			refEnabledLayerNames = null;
			refEnabledExtensionNames?.Dispose ();
			refEnabledExtensionNames = null;
		}

		internal void Initialize ()
		{
			m->SType = StructureType.DeviceCreateInfo;
		}

	}

	unsafe public partial class InstanceCreateInfo : MarshalledObject
	{
		public UInt32 Flags {
			get { return m->Flags; }
			set { m->Flags = value; }
		}

		ApplicationInfo lApplicationInfo;
		public ApplicationInfo ApplicationInfo {
			get { return lApplicationInfo; }
			set { lApplicationInfo = value; m->ApplicationInfo = value != null ? (IntPtr)value.m : default(IntPtr); }
		}

		public UInt32 EnabledLayerCount {
			get { return m->EnabledLayerCount; }
			set { m->EnabledLayerCount = value; }
		}

		NativeReference refEnabledLayerNames;
		public string[] EnabledLayerNames {
			get {
				if (m->EnabledLayerCount == 0)
					return null;
				var strings = new string [m->EnabledLayerCount];
				unsafe
				{
					void** ptr = (void**)m->EnabledLayerNames;
					for (int i = 0; i < m->EnabledLayerCount; i++)
						strings [i] = Marshal.PtrToStringAnsi ((IntPtr)ptr [i]);
				}
				return strings;
			}

			set {
				if (value == null) {
					m->EnabledLayerCount = 0;
					m->EnabledLayerNames = IntPtr.Zero;
					return;
				}
				m->EnabledLayerCount = (uint)value.Length;
				refEnabledLayerNames = new NativeReference ((int)(sizeof(IntPtr)*m->EnabledLayerCount));
				m->EnabledLayerNames = refEnabledLayerNames.Handle;
				unsafe
				{
					void** ptr = (void**)m->EnabledLayerNames;
					for (int i = 0; i < m->EnabledLayerCount; i++)
						ptr [i] = (void*) Marshal.StringToHGlobalAnsi (value [i]);
				}
			}
		}

		public UInt32 EnabledExtensionCount {
			get { return m->EnabledExtensionCount; }
			set { m->EnabledExtensionCount = value; }
		}

		NativeReference refEnabledExtensionNames;
		public string[] EnabledExtensionNames {
			get {
				if (m->EnabledExtensionCount == 0)
					return null;
				var strings = new string [m->EnabledExtensionCount];
				unsafe
				{
					void** ptr = (void**)m->EnabledExtensionNames;
					for (int i = 0; i < m->EnabledExtensionCount; i++)
						strings [i] = Marshal.PtrToStringAnsi ((IntPtr)ptr [i]);
				}
				return strings;
			}

			set {
				if (value == null) {
					m->EnabledExtensionCount = 0;
					m->EnabledExtensionNames = IntPtr.Zero;
					return;
				}
				m->EnabledExtensionCount = (uint)value.Length;
				refEnabledExtensionNames = new NativeReference ((int)(sizeof(IntPtr)*m->EnabledExtensionCount));
				m->EnabledExtensionNames = refEnabledExtensionNames.Handle;
				unsafe
				{
					void** ptr = (void**)m->EnabledExtensionNames;
					for (int i = 0; i < m->EnabledExtensionCount; i++)
						ptr [i] = (void*) Marshal.StringToHGlobalAnsi (value [i]);
				}
			}
		}
		internal Interop.InstanceCreateInfo* m {

			get {
				return (Interop.InstanceCreateInfo*)native.Handle;
			}
		}

		public InstanceCreateInfo ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.InstanceCreateInfo));
			Initialize ();
		}

		internal InstanceCreateInfo (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}

		override public void Dispose (bool disposing)
		{
			base.Dispose (disposing);
			if (!disposing)
				return;
			refEnabledLayerNames.Dispose ();
			refEnabledLayerNames = null;
			refEnabledExtensionNames.Dispose ();
			refEnabledExtensionNames = null;
		}

		internal void Initialize ()
		{
			m->SType = StructureType.InstanceCreateInfo;
		}

	}

	unsafe public partial struct QueueFamilyProperties
	{
		public QueueFlags QueueFlags;
		public UInt32 QueueCount;
		public UInt32 TimestampValidBits;
		public Extent3D MinImageTransferGranularity;
	}

	unsafe public partial class PhysicalDeviceMemoryProperties : MarshalledObject
	{
		public UInt32 MemoryTypeCount {
			get { return m->MemoryTypeCount; }
			set { m->MemoryTypeCount = value; }
		}

		public MemoryType[] MemoryTypes {
			get {
				var arr = new MemoryType [m->MemoryTypeCount];
				for (int i = 0; i < m->MemoryTypeCount; i++)
					unsafe
					{
						arr [i] = (&m->MemoryTypes0) [i];
					}
				return arr;
			}

			set {
				if (value.Length > m->MemoryTypeCount)
					throw new Exception ("array too long");
				m->MemoryTypeCount = (uint)value.Length;
				for (int i = 0; i < value.Length; i++)
					unsafe
					{
						(&m->MemoryTypes0) [i] = value [i];
					}
			}
		}

		public UInt32 MemoryHeapCount {
			get { return m->MemoryHeapCount; }
			set { m->MemoryHeapCount = value; }
		}

		public MemoryHeap[] MemoryHeaps {
			get {
				var arr = new MemoryHeap [m->MemoryHeapCount];
				for (int i = 0; i < m->MemoryHeapCount; i++)
					unsafe
					{
						arr [i] = (&m->MemoryHeaps0) [i];
					}
				return arr;
			}

			set {
				if (value.Length > m->MemoryHeapCount)
					throw new Exception ("array too long");
				m->MemoryHeapCount = (uint)value.Length;
				for (int i = 0; i < value.Length; i++)
					unsafe
					{
						(&m->MemoryHeaps0) [i] = value [i];
					}
			}
		}
		internal Interop.PhysicalDeviceMemoryProperties* m {

			get {
				return (Interop.PhysicalDeviceMemoryProperties*)native.Handle;
			}
		}

		public PhysicalDeviceMemoryProperties ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.PhysicalDeviceMemoryProperties));
		}

		internal PhysicalDeviceMemoryProperties (NativePointer pointer)
		{
			native = pointer;
		}

	}

	unsafe public partial class MemoryAllocateInfo : MarshalledObject
	{
		public DeviceSize AllocationSize {
			get { return m->AllocationSize; }
			set { m->AllocationSize = value; }
		}

		public UInt32 MemoryTypeIndex {
			get { return m->MemoryTypeIndex; }
			set { m->MemoryTypeIndex = value; }
		}
		internal Interop.MemoryAllocateInfo* m {

			get {
				return (Interop.MemoryAllocateInfo*)native.Handle;
			}
		}

		public MemoryAllocateInfo ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.MemoryAllocateInfo));
			Initialize ();
		}

		internal MemoryAllocateInfo (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}


		internal void Initialize ()
		{
			m->SType = StructureType.MemoryAllocateInfo;
		}

	}

	unsafe public partial struct MemoryRequirements
	{
		public DeviceSize Size;
		public DeviceSize Alignment;
		public UInt32 MemoryTypeBits;
	}

	unsafe public partial struct SparseImageFormatProperties
	{
		public ImageAspectFlags AspectMask;
		public Extent3D ImageGranularity;
		public SparseImageFormatFlags Flags;
	}

	unsafe public partial struct SparseImageMemoryRequirements
	{
		public SparseImageFormatProperties FormatProperties;
		public UInt32 ImageMipTailFirstLod;
		public DeviceSize ImageMipTailSize;
		public DeviceSize ImageMipTailOffset;
		public DeviceSize ImageMipTailStride;
	}

	unsafe public partial struct MemoryType
	{
		public MemoryPropertyFlags PropertyFlags;
		public UInt32 HeapIndex;
	}

	unsafe public partial struct MemoryHeap
	{
		public DeviceSize Size;
		public MemoryHeapFlags Flags;
	}

	unsafe public partial class MappedMemoryRange : MarshalledObject
	{
		DeviceMemory lMemory;
		public DeviceMemory Memory {
			get { return lMemory; }
			set { lMemory = value; m->Memory = value != null ? (UInt64)value.m : default(UInt64); }
		}

		public DeviceSize Offset {
			get { return m->Offset; }
			set { m->Offset = value; }
		}

		public DeviceSize Size {
			get { return m->Size; }
			set { m->Size = value; }
		}
		internal Interop.MappedMemoryRange* m {

			get {
				return (Interop.MappedMemoryRange*)native.Handle;
			}
		}

		public MappedMemoryRange ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.MappedMemoryRange));
			Initialize ();
		}

		internal MappedMemoryRange (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}


		internal void Initialize ()
		{
			m->SType = StructureType.MappedMemoryRange;
		}

	}

	unsafe public partial struct FormatProperties
	{
		public FormatFeatureFlags LinearTilingFeatures;
		public FormatFeatureFlags OptimalTilingFeatures;
		public FormatFeatureFlags BufferFeatures;
	}

	unsafe public partial struct ImageFormatProperties
	{
		public Extent3D MaxExtent;
		public UInt32 MaxMipLevels;
		public UInt32 MaxArrayLayers;
		public SampleCountFlags SampleCounts;
		public DeviceSize MaxResourceSize;
	}

	unsafe public partial class DescriptorBufferInfo : MarshalledObject
	{
		VulkanBuffer lBuffer;
		/// <summary>
		/// buffer is the buffer resource.
		/// </summary>
		public VulkanBuffer Buffer {
			get { return lBuffer; }
			set { lBuffer = value; m->Buffer = value != null ? (UInt64)value.m : default(UInt64); }
		}
		/// <summary>
		/// offset is the offset in bytes from the start of buffer. Access to buffer memory via this descriptor uses addressing that is relative to this starting offset.
		/// </summary>
		public DeviceSize Offset {
			get { return m->Offset; }
			set { m->Offset = value; }
		}
		/// <summary>
		/// range is the size in bytes that is used for this descriptor update, or VK_WHOLE_SIZE to use the range from offset to the end of the buffer.
		/// </summary>
		public DeviceSize Range {
			get { return m->Range; }
			set { m->Range = value; }
		}
		internal Interop.DescriptorBufferInfo* m {

			get {
				return (Interop.DescriptorBufferInfo*)native.Handle;
			}
		}

		public DescriptorBufferInfo ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.DescriptorBufferInfo));
			Initialize ();
		}

		internal DescriptorBufferInfo (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}


		internal void Initialize ()
		{
		}

	}

	unsafe public partial class DescriptorImageInfo : MarshalledObject
	{
		Sampler lSampler;
		public Sampler Sampler {
			get { return lSampler; }
			set { lSampler = value; m->Sampler = value != null ? (UInt64)value.m : default(UInt64); }
		}

		ImageView lImageView;
		public ImageView ImageView {
			get { return lImageView; }
			set { lImageView = value; m->ImageView = value != null ? (UInt64)value.m : default(UInt64); }
		}

		public ImageLayout ImageLayout {
			get { return m->ImageLayout; }
			set { m->ImageLayout = value; }
		}
		internal Interop.DescriptorImageInfo* m {

			get {
				return (Interop.DescriptorImageInfo*)native.Handle;
			}
		}

		public DescriptorImageInfo ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.DescriptorImageInfo));
			Initialize ();
		}

		internal DescriptorImageInfo (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}


		internal void Initialize ()
		{
		}

	}

	unsafe public partial class WriteDescriptorSet : MarshalledObject
	{
		DescriptorSet lDstSet;
		public DescriptorSet DstSet {
			get { return lDstSet; }
			set { lDstSet = value; m->DstSet = value != null ? (UInt64)value.m : default(UInt64); }
		}

		public UInt32 DstBinding {
			get { return m->DstBinding; }
			set { m->DstBinding = value; }
		}

		public UInt32 DstArrayElement {
			get { return m->DstArrayElement; }
			set { m->DstArrayElement = value; }
		}

		public UInt32 DescriptorCount {
			get { return m->DescriptorCount; }
			set { m->DescriptorCount = value; }
		}

		public DescriptorType DescriptorType {
			get { return m->DescriptorType; }
			set { m->DescriptorType = value; }
		}

		NativeReference refImageInfo;
		public DescriptorImageInfo[] ImageInfo {
			get {
				if (m->DescriptorCount == 0)
					return null;
				var values = new DescriptorImageInfo [m->DescriptorCount];
				unsafe
				{
					Interop.DescriptorImageInfo* ptr = (Interop.DescriptorImageInfo*)m->ImageInfo;
					for (int i = 0; i < values.Length; i++) {
						values [i] = new DescriptorImageInfo ();
						*values [i].m = ptr [i];
					}
				}
				return values;
			}

			set {
				if (value == null) {
					m->DescriptorCount = 0;
					m->ImageInfo = IntPtr.Zero;
					return;
				}
				m->DescriptorCount = (uint)value.Length;
				refImageInfo = new NativeReference ((int)(sizeof(Interop.DescriptorImageInfo)*value.Length));
				m->ImageInfo = refImageInfo.Handle;
				unsafe
				{
					Interop.DescriptorImageInfo* ptr = (Interop.DescriptorImageInfo*)m->ImageInfo;
					for (int i = 0; i < value.Length; i++)
						ptr [i] = *value [i].m;
				}
			}
		}

		NativeReference refBufferInfo;
		public DescriptorBufferInfo[] BufferInfo {
			get {
				if (m->DescriptorCount == 0)
					return null;
				var values = new DescriptorBufferInfo [m->DescriptorCount];
				unsafe
				{
					Interop.DescriptorBufferInfo* ptr = (Interop.DescriptorBufferInfo*)m->BufferInfo;
					for (int i = 0; i < values.Length; i++) {
						values [i] = new DescriptorBufferInfo ();
						*values [i].m = ptr [i];
					}
				}
				return values;
			}

			set {
				if (value == null) {
					m->DescriptorCount = 0;
					m->BufferInfo = IntPtr.Zero;
					return;
				}
				m->DescriptorCount = (uint)value.Length;
				refBufferInfo = new NativeReference ((int)(sizeof(Interop.DescriptorBufferInfo)*value.Length));
				m->BufferInfo = refBufferInfo.Handle;
				unsafe
				{
					Interop.DescriptorBufferInfo* ptr = (Interop.DescriptorBufferInfo*)m->BufferInfo;
					for (int i = 0; i < value.Length; i++)
						ptr [i] = *value [i].m;
				}
			}
		}

		NativeReference refTexelBufferView;
		public BufferView[] TexelBufferView {
			get {
				if (m->DescriptorCount == 0)
					return null;
				var values = new BufferView [m->DescriptorCount];
				unsafe
				{
					UInt64* ptr = (UInt64*)m->TexelBufferView;
					for (int i = 0; i < values.Length; i++) {
						values [i] = new BufferView ();
						values [i].m = ptr [i];
					}
				}
				return values;
			}

			set {
				if (value == null) {
					m->DescriptorCount = 0;
					m->TexelBufferView = IntPtr.Zero;
					return;
				}
				m->DescriptorCount = (uint)value.Length;
				refTexelBufferView = new NativeReference ((int)(sizeof(UInt64)*value.Length));
				m->TexelBufferView = refTexelBufferView.Handle;
				unsafe
				{
					UInt64* ptr = (UInt64*)m->TexelBufferView;
					for (int i = 0; i < value.Length; i++)
						ptr [i] = value [i].m;
				}
			}
		}
		internal Interop.WriteDescriptorSet* m {

			get {
				return (Interop.WriteDescriptorSet*)native.Handle;
			}
		}

		public WriteDescriptorSet ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.WriteDescriptorSet));
			Initialize ();
		}

		internal WriteDescriptorSet (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}

		override public void Dispose (bool disposing)
		{
			base.Dispose (disposing);
			refImageInfo?.Dispose ();
			refImageInfo = null;
			refBufferInfo?.Dispose ();
			refBufferInfo = null;
			refTexelBufferView?.Dispose ();
			refTexelBufferView = null;
		}

		internal void Initialize ()
		{
			m->SType = StructureType.WriteDescriptorSet;
		}

	}

	unsafe public partial class CopyDescriptorSet : MarshalledObject
	{
		DescriptorSet lSrcSet;
		public DescriptorSet SrcSet {
			get { return lSrcSet; }
			set { lSrcSet = value; m->SrcSet = value != null ? (UInt64)value.m : default(UInt64); }
		}

		public UInt32 SrcBinding {
			get { return m->SrcBinding; }
			set { m->SrcBinding = value; }
		}

		public UInt32 SrcArrayElement {
			get { return m->SrcArrayElement; }
			set { m->SrcArrayElement = value; }
		}

		DescriptorSet lDstSet;
		public DescriptorSet DstSet {
			get { return lDstSet; }
			set { lDstSet = value; m->DstSet = value != null ? (UInt64)value.m : default(UInt64); }
		}

		public UInt32 DstBinding {
			get { return m->DstBinding; }
			set { m->DstBinding = value; }
		}

		public UInt32 DstArrayElement {
			get { return m->DstArrayElement; }
			set { m->DstArrayElement = value; }
		}

		public UInt32 DescriptorCount {
			get { return m->DescriptorCount; }
			set { m->DescriptorCount = value; }
		}
		internal Interop.CopyDescriptorSet* m {

			get {
				return (Interop.CopyDescriptorSet*)native.Handle;
			}
		}

		public CopyDescriptorSet ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.CopyDescriptorSet));
			Initialize ();
		}

		internal CopyDescriptorSet (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}


		internal void Initialize ()
		{
			m->SType = StructureType.CopyDescriptorSet;
		}

	}

	unsafe public partial class BufferCreateInfo : MarshalledObject
	{
		public BufferCreateFlags Flags {
			get { return m->Flags; }
			set { m->Flags = value; }
		}

		public DeviceSize Size {
			get { return m->Size; }
			set { m->Size = value; }
		}

		public BufferUsageFlags Usage {
			get { return m->Usage; }
			set { m->Usage = value; }
		}

		public SharingMode SharingMode {
			get { return m->SharingMode; }
			set { m->SharingMode = value; }
		}

		public UInt32 QueueFamilyIndexCount {
			get { return m->QueueFamilyIndexCount; }
			set { m->QueueFamilyIndexCount = value; }
		}

		NativeReference refQueueFamilyIndices;
		public UInt32[] QueueFamilyIndices {
			get {
				if (m->QueueFamilyIndexCount == 0)
					return null;
				var values = new UInt32 [m->QueueFamilyIndexCount];
				unsafe
				{
					UInt32* ptr = (UInt32*)m->QueueFamilyIndices;
					for (int i = 0; i < values.Length; i++) 
						values [i] = ptr [i];
				}
				return values;
			}

			set {
				if (value == null) {
					m->QueueFamilyIndexCount = 0;
					m->QueueFamilyIndices = IntPtr.Zero;
					return;
				}
				m->QueueFamilyIndexCount = (uint)value.Length;
				refQueueFamilyIndices = new NativeReference ((int)(sizeof(UInt32)*value.Length));
				m->QueueFamilyIndices = refQueueFamilyIndices.Handle;
				unsafe
				{
					UInt32* ptr = (UInt32*)m->QueueFamilyIndices;
					for (int i = 0; i < value.Length; i++)
						ptr [i] = value [i];
				}
			}
		}
		internal Interop.BufferCreateInfo* m {

			get {
				return (Interop.BufferCreateInfo*)native.Handle;
			}
		}

		public BufferCreateInfo ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.BufferCreateInfo));
			Initialize ();
		}

		internal BufferCreateInfo (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}

		override public void Dispose (bool disposing)
		{
			if(disposing)
			{
				refQueueFamilyIndices.Dispose();
				refQueueFamilyIndices = null;
			}
			base.Dispose (disposing);
			
		}

		internal void Initialize ()
		{
			m->SType = StructureType.BufferCreateInfo;
		}

	}

	unsafe public partial class BufferViewCreateInfo : MarshalledObject
	{
		public UInt32 Flags {
			get { return m->Flags; }
			set { m->Flags = value; }
		}

		VulkanBuffer lBuffer;
		public VulkanBuffer Buffer {
			get { return lBuffer; }
			set { lBuffer = value; m->Buffer = value != null ? (UInt64)value.m : default(UInt64); }
		}

		public Format Format {
			get { return m->Format; }
			set { m->Format = value; }
		}

		public DeviceSize Offset {
			get { return m->Offset; }
			set { m->Offset = value; }
		}

		public DeviceSize Range {
			get { return m->Range; }
			set { m->Range = value; }
		}
		internal Interop.BufferViewCreateInfo* m {

			get {
				return (Interop.BufferViewCreateInfo*)native.Handle;
			}
		}

		public BufferViewCreateInfo ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.BufferViewCreateInfo));
			Initialize ();
		}

		internal BufferViewCreateInfo (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}


		internal void Initialize ()
		{
			m->SType = StructureType.BufferViewCreateInfo;
		}

	}

	unsafe public partial struct ImageSubresource
	{
		public ImageAspectFlags AspectMask;
		public UInt32 MipLevel;
		public UInt32 ArrayLayer;
	}

	unsafe public partial struct ImageSubresourceLayers
	{
		public ImageAspectFlags AspectMask;
		public UInt32 MipLevel;
		public UInt32 BaseArrayLayer;
		public UInt32 LayerCount;
	}

	unsafe public partial struct ImageSubresourceRange
	{
		public ImageAspectFlags AspectMask;
		public UInt32 BaseMipLevel;
		public UInt32 LevelCount;
		public UInt32 BaseArrayLayer;
		public UInt32 LayerCount;
	}

	unsafe public partial class MemoryBarrier : MarshalledObject
	{
		public AccessFlags SrcAccessMask {
			get { return m->SrcAccessMask; }
			set { m->SrcAccessMask = value; }
		}

		public AccessFlags DstAccessMask {
			get { return m->DstAccessMask; }
			set { m->DstAccessMask = value; }
		}
		internal Interop.MemoryBarrier* m {

			get {
				return (Interop.MemoryBarrier*)native.Handle;
			}
		}

		public MemoryBarrier ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.MemoryBarrier));
			Initialize ();
		}

		internal MemoryBarrier (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}


		internal void Initialize ()
		{
			m->SType = StructureType.MemoryBarrier;
		}

	}

	unsafe public partial class BufferMemoryBarrier : MarshalledObject
	{
		public AccessFlags SrcAccessMask {
			get { return m->SrcAccessMask; }
			set { m->SrcAccessMask = value; }
		}

		public AccessFlags DstAccessMask {
			get { return m->DstAccessMask; }
			set { m->DstAccessMask = value; }
		}

		public UInt32 SrcQueueFamilyIndex {
			get { return m->SrcQueueFamilyIndex; }
			set { m->SrcQueueFamilyIndex = value; }
		}

		public UInt32 DstQueueFamilyIndex {
			get { return m->DstQueueFamilyIndex; }
			set { m->DstQueueFamilyIndex = value; }
		}

		VulkanBuffer lBuffer;
		public VulkanBuffer Buffer {
			get { return lBuffer; }
			set { lBuffer = value; m->Buffer = value != null ? (UInt64)value.m : default(UInt64); }
		}

		public DeviceSize Offset {
			get { return m->Offset; }
			set { m->Offset = value; }
		}

		public DeviceSize Size {
			get { return m->Size; }
			set { m->Size = value; }
		}
		internal Interop.BufferMemoryBarrier* m {

			get {
				return (Interop.BufferMemoryBarrier*)native.Handle;
			}
		}

		public BufferMemoryBarrier ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.BufferMemoryBarrier));
			Initialize ();
		}

		internal BufferMemoryBarrier (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}


		internal void Initialize ()
		{
			m->SType = StructureType.BufferMemoryBarrier;
		}

	}

	unsafe public partial class ImageMemoryBarrier : MarshalledObject
	{
		public AccessFlags SrcAccessMask {
			get { return m->SrcAccessMask; }
			set { m->SrcAccessMask = value; }
		}

		public AccessFlags DstAccessMask {
			get { return m->DstAccessMask; }
			set { m->DstAccessMask = value; }
		}

		public ImageLayout OldLayout {
			get { return m->OldLayout; }
			set { m->OldLayout = value; }
		}

		public ImageLayout NewLayout {
			get { return m->NewLayout; }
			set { m->NewLayout = value; }
		}

		public UInt32 SrcQueueFamilyIndex {
			get { return m->SrcQueueFamilyIndex; }
			set { m->SrcQueueFamilyIndex = value; }
		}

		public UInt32 DstQueueFamilyIndex {
			get { return m->DstQueueFamilyIndex; }
			set { m->DstQueueFamilyIndex = value; }
		}

		Image lImage;
		public Image Image {
			get { return lImage; }
			set { lImage = value; m->Image = value != null ? (UInt64)value.m : default(UInt64); }
		}

		public ImageSubresourceRange SubresourceRange {
			get { return m->SubresourceRange; }
			set { m->SubresourceRange = value; }
		}
		internal Interop.ImageMemoryBarrier* m {

			get {
				return (Interop.ImageMemoryBarrier*)native.Handle;
			}
		}

		public ImageMemoryBarrier ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.ImageMemoryBarrier));
			Initialize ();
		}

		internal ImageMemoryBarrier (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}


		internal void Initialize ()
		{
			m->SType = StructureType.ImageMemoryBarrier;
		}

	}

	unsafe public partial class ImageCreateInfo : MarshalledObject
	{
		public ImageCreateFlags Flags {
			get { return m->Flags; }
			set { m->Flags = value; }
		}

		public ImageType ImageType {
			get { return m->ImageType; }
			set { m->ImageType = value; }
		}

		public Format Format {
			get { return m->Format; }
			set { m->Format = value; }
		}

		public Extent3D Extent {
			get { return m->Extent; }
			set { m->Extent = value; }
		}

		public UInt32 MipLevels {
			get { return m->MipLevels; }
			set { m->MipLevels = value; }
		}

		public UInt32 ArrayLayers {
			get { return m->ArrayLayers; }
			set { m->ArrayLayers = value; }
		}

		public SampleCountFlags Samples {
			get { return m->Samples; }
			set { m->Samples = value; }
		}

		public ImageTiling Tiling {
			get { return m->Tiling; }
			set { m->Tiling = value; }
		}

		public ImageUsageFlags Usage {
			get { return m->Usage; }
			set { m->Usage = value; }
		}

		public SharingMode SharingMode {
			get { return m->SharingMode; }
			set { m->SharingMode = value; }
		}

		public UInt32 QueueFamilyIndexCount {
			get { return m->QueueFamilyIndexCount; }
			set { m->QueueFamilyIndexCount = value; }
		}

		NativeReference refQueueFamilyIndices;
		public UInt32[] QueueFamilyIndices {
			get {
				if (m->QueueFamilyIndexCount == 0)
					return null;
				var values = new UInt32 [m->QueueFamilyIndexCount];
				unsafe
				{
					UInt32* ptr = (UInt32*)m->QueueFamilyIndices;
					for (int i = 0; i < values.Length; i++) 
						values [i] = ptr [i];
				}
				return values;
			}

			set {
				if (value == null) {
					m->QueueFamilyIndexCount = 0;
					m->QueueFamilyIndices = IntPtr.Zero;
					return;
				}
				m->QueueFamilyIndexCount = (uint)value.Length;
				refQueueFamilyIndices = new NativeReference ((int)(sizeof(UInt32)*value.Length));
				m->QueueFamilyIndices = refQueueFamilyIndices.Handle;
				unsafe
				{
					UInt32* ptr = (UInt32*)m->QueueFamilyIndices;
					for (int i = 0; i < value.Length; i++)
						ptr [i] = value [i];
				}
			}
		}

		public ImageLayout InitialLayout {
			get { return m->InitialLayout; }
			set { m->InitialLayout = value; }
		}
		internal Interop.ImageCreateInfo* m {

			get {
				return (Interop.ImageCreateInfo*)native.Handle;
			}
		}

		public ImageCreateInfo ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.ImageCreateInfo));
			Initialize ();
		}

		internal ImageCreateInfo (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}

		override public void Dispose (bool disposing)
		{
			base.Dispose (disposing);
			if (!disposing)
				return;
			refQueueFamilyIndices.Dispose ();
			refQueueFamilyIndices = null;
		}

		internal void Initialize ()
		{
			m->SType = StructureType.ImageCreateInfo;
		}

	}

	unsafe public partial struct SubresourceLayout
	{
		public DeviceSize Offset;
		public DeviceSize Size;
		public DeviceSize RowPitch;
		public DeviceSize ArrayPitch;
		public DeviceSize DepthPitch;
	}

	unsafe public partial class ImageViewCreateInfo : MarshalledObject
	{
		public UInt32 Flags {
			get { return m->Flags; }
			set { m->Flags = value; }
		}

		Image lImage;
		public Image Image {
			get { return lImage; }
			set { lImage = value; m->Image = value != null ? (UInt64)value.m : default(UInt64); }
		}

		public ImageViewType ViewType {
			get { return m->ViewType; }
			set { m->ViewType = value; }
		}

		public Format Format {
			get { return m->Format; }
			set { m->Format = value; }
		}

		public ComponentMapping Components {
			get { return m->Components; }
			set { m->Components = value; }
		}

		public ImageSubresourceRange SubresourceRange {
			get { return m->SubresourceRange; }
			set { m->SubresourceRange = value; }
		}
		internal Interop.ImageViewCreateInfo* m {

			get {
				return (Interop.ImageViewCreateInfo*)native.Handle;
			}
		}

		public ImageViewCreateInfo ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.ImageViewCreateInfo));
			Initialize ();
		}

		internal ImageViewCreateInfo (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}


		internal void Initialize ()
		{
			m->SType = StructureType.ImageViewCreateInfo;
		}

	}

	unsafe public partial struct BufferCopy
	{
		public DeviceSize SrcOffset;
		public DeviceSize DstOffset;
		public DeviceSize Size;
	}

	unsafe public partial class SparseMemoryBind : MarshalledObject
	{
		public DeviceSize ResourceOffset {
			get { return m->ResourceOffset; }
			set { m->ResourceOffset = value; }
		}

		public DeviceSize Size {
			get { return m->Size; }
			set { m->Size = value; }
		}

		DeviceMemory lMemory;
		public DeviceMemory Memory {
			get { return lMemory; }
			set { lMemory = value; m->Memory = value != null ? (UInt64)value.m : default(UInt64); }
		}

		public DeviceSize MemoryOffset {
			get { return m->MemoryOffset; }
			set { m->MemoryOffset = value; }
		}

		public SparseMemoryBindFlags Flags {
			get { return m->Flags; }
			set { m->Flags = value; }
		}
		internal Interop.SparseMemoryBind* m {

			get {
				return (Interop.SparseMemoryBind*)native.Handle;
			}
		}

		public SparseMemoryBind ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.SparseMemoryBind));
			Initialize ();
		}

		internal SparseMemoryBind (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}


		internal void Initialize ()
		{
		}

	}

	unsafe public partial class SparseImageMemoryBind : MarshalledObject
	{
		public ImageSubresource Subresource {
			get { return m->Subresource; }
			set { m->Subresource = value; }
		}

		public Offset3D Offset {
			get { return m->Offset; }
			set { m->Offset = value; }
		}

		public Extent3D Extent {
			get { return m->Extent; }
			set { m->Extent = value; }
		}

		DeviceMemory lMemory;
		public DeviceMemory Memory {
			get { return lMemory; }
			set { lMemory = value; m->Memory = value != null ? (UInt64)value.m : default(UInt64); }
		}

		public DeviceSize MemoryOffset {
			get { return m->MemoryOffset; }
			set { m->MemoryOffset = value; }
		}

		public SparseMemoryBindFlags Flags {
			get { return m->Flags; }
			set { m->Flags = value; }
		}
		internal Interop.SparseImageMemoryBind* m {

			get {
				return (Interop.SparseImageMemoryBind*)native.Handle;
			}
		}

		public SparseImageMemoryBind ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.SparseImageMemoryBind));
			Initialize ();
		}

		internal SparseImageMemoryBind (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}


		internal void Initialize ()
		{
		}

	}

	unsafe public partial class SparseBufferMemoryBindInfo : MarshalledObject
	{
		VulkanBuffer lBuffer;
		public VulkanBuffer Buffer {
			get { return lBuffer; }
			set { lBuffer = value; m->Buffer = value != null ? (UInt64)value.m : default(UInt64); }
		}

		public UInt32 BindCount {
			get { return m->BindCount; }
			set { m->BindCount = value; }
		}

		NativeReference refBinds;
		public SparseMemoryBind[] Binds {
			get {
				if (m->BindCount == 0)
					return null;
				var values = new SparseMemoryBind [m->BindCount];
				unsafe
				{
					Interop.SparseMemoryBind* ptr = (Interop.SparseMemoryBind*)m->Binds;
					for (int i = 0; i < values.Length; i++) {
						values [i] = new SparseMemoryBind ();
						*values [i].m = ptr [i];
					}
				}
				return values;
			}

			set {
				if (value == null) {
					m->BindCount = 0;
					m->Binds = IntPtr.Zero;
					return;
				}
				m->BindCount = (uint)value.Length;
				refBinds = new NativeReference ((int)(sizeof(Interop.SparseMemoryBind)*value.Length));
				m->Binds = refBinds.Handle;
				unsafe
				{
					Interop.SparseMemoryBind* ptr = (Interop.SparseMemoryBind*)m->Binds;
					for (int i = 0; i < value.Length; i++)
						ptr [i] = *value [i].m;
				}
			}
		}
		internal Interop.SparseBufferMemoryBindInfo* m {

			get {
				return (Interop.SparseBufferMemoryBindInfo*)native.Handle;
			}
		}

		public SparseBufferMemoryBindInfo ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.SparseBufferMemoryBindInfo));
			Initialize ();
		}

		internal SparseBufferMemoryBindInfo (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}

		override public void Dispose (bool disposing)
		{
			base.Dispose (disposing);
			if (!disposing)
				return;
			refBinds.Dispose ();
			refBinds = null;
		}

		internal void Initialize ()
		{
		}

	}

	unsafe public partial class SparseImageOpaqueMemoryBindInfo : MarshalledObject
	{
		Image lImage;
		public Image Image {
			get { return lImage; }
			set { lImage = value; m->Image = value != null ? (UInt64)value.m : default(UInt64); }
		}

		public UInt32 BindCount {
			get { return m->BindCount; }
			set { m->BindCount = value; }
		}

		NativeReference refBinds;
		public SparseMemoryBind[] Binds {
			get {
				if (m->BindCount == 0)
					return null;
				var values = new SparseMemoryBind [m->BindCount];
				unsafe
				{
					Interop.SparseMemoryBind* ptr = (Interop.SparseMemoryBind*)m->Binds;
					for (int i = 0; i < values.Length; i++) {
						values [i] = new SparseMemoryBind ();
						*values [i].m = ptr [i];
					}
				}
				return values;
			}

			set {
				if (value == null) {
					m->BindCount = 0;
					m->Binds = IntPtr.Zero;
					return;
				}
				m->BindCount = (uint)value.Length;
				refBinds = new NativeReference ((int)(sizeof(Interop.SparseMemoryBind)*value.Length));
				m->Binds = refBinds.Handle;
				unsafe
				{
					Interop.SparseMemoryBind* ptr = (Interop.SparseMemoryBind*)m->Binds;
					for (int i = 0; i < value.Length; i++)
						ptr [i] = *value [i].m;
				}
			}
		}
		internal Interop.SparseImageOpaqueMemoryBindInfo* m {

			get {
				return (Interop.SparseImageOpaqueMemoryBindInfo*)native.Handle;
			}
		}

		public SparseImageOpaqueMemoryBindInfo ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.SparseImageOpaqueMemoryBindInfo));
			Initialize ();
		}

		internal SparseImageOpaqueMemoryBindInfo (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}

		override public void Dispose (bool disposing)
		{
			base.Dispose (disposing);
			if (!disposing)
				return;
			refBinds.Dispose ();
			refBinds = null;
		}

		internal void Initialize ()
		{
		}

	}

	unsafe public partial class SparseImageMemoryBindInfo : MarshalledObject
	{
		Image lImage;
		public Image Image {
			get { return lImage; }
			set { lImage = value; m->Image = value != null ? (UInt64)value.m : default(UInt64); }
		}

		public UInt32 BindCount {
			get { return m->BindCount; }
			set { m->BindCount = value; }
		}

		NativeReference refBinds;
		public SparseImageMemoryBind[] Binds {
			get {
				if (m->BindCount == 0)
					return null;
				var values = new SparseImageMemoryBind [m->BindCount];
				unsafe
				{
					Interop.SparseImageMemoryBind* ptr = (Interop.SparseImageMemoryBind*)m->Binds;
					for (int i = 0; i < values.Length; i++) {
						values [i] = new SparseImageMemoryBind ();
						*values [i].m = ptr [i];
					}
				}
				return values;
			}

			set {
				if (value == null) {
					m->BindCount = 0;
					m->Binds = IntPtr.Zero;
					return;
				}
				m->BindCount = (uint)value.Length;
				refBinds = new NativeReference ((int)(sizeof(Interop.SparseImageMemoryBind)*value.Length));
				m->Binds = refBinds.Handle;
				unsafe
				{
					Interop.SparseImageMemoryBind* ptr = (Interop.SparseImageMemoryBind*)m->Binds;
					for (int i = 0; i < value.Length; i++)
						ptr [i] = *value [i].m;
				}
			}
		}
		internal Interop.SparseImageMemoryBindInfo* m {

			get {
				return (Interop.SparseImageMemoryBindInfo*)native.Handle;
			}
		}

		public SparseImageMemoryBindInfo ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.SparseImageMemoryBindInfo));
			Initialize ();
		}

		internal SparseImageMemoryBindInfo (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}

		override public void Dispose (bool disposing)
		{
			base.Dispose (disposing);
			if (!disposing)
				return;
			refBinds.Dispose ();
			refBinds = null;
		}

		internal void Initialize ()
		{
		}

	}

	unsafe public partial class BindSparseInfo : MarshalledObject
	{
		public UInt32 WaitSemaphoreCount {
			get { return m->WaitSemaphoreCount; }
			set { m->WaitSemaphoreCount = value; }
		}

		NativeReference refWaitSemaphores;
		public Semaphore[] WaitSemaphores {
			get {
				if (m->WaitSemaphoreCount == 0)
					return null;
				var values = new Semaphore [m->WaitSemaphoreCount];
				unsafe
				{
					UInt64* ptr = (UInt64*)m->WaitSemaphores;
					for (int i = 0; i < values.Length; i++) {
						values [i] = new Semaphore ();
						values [i].m = ptr [i];
					}
				}
				return values;
			}

			set {
				if (value == null) {
					m->WaitSemaphoreCount = 0;
					m->WaitSemaphores = IntPtr.Zero;
					return;
				}
				m->WaitSemaphoreCount = (uint)value.Length;
				refWaitSemaphores = new NativeReference ((int)(sizeof(UInt64)*value.Length));
				m->WaitSemaphores = refWaitSemaphores.Handle;
				unsafe
				{
					UInt64* ptr = (UInt64*)m->WaitSemaphores;
					for (int i = 0; i < value.Length; i++)
						ptr [i] = value [i].m;
				}
			}
		}

		public UInt32 BufferBindCount {
			get { return m->BufferBindCount; }
			set { m->BufferBindCount = value; }
		}

		NativeReference refBufferBinds;
		public SparseBufferMemoryBindInfo[] BufferBinds {
			get {
				if (m->BufferBindCount == 0)
					return null;
				var values = new SparseBufferMemoryBindInfo [m->BufferBindCount];
				unsafe
				{
					Interop.SparseBufferMemoryBindInfo* ptr = (Interop.SparseBufferMemoryBindInfo*)m->BufferBinds;
					for (int i = 0; i < values.Length; i++) {
						values [i] = new SparseBufferMemoryBindInfo ();
						*values [i].m = ptr [i];
					}
				}
				return values;
			}

			set {
				if (value == null) {
					m->BufferBindCount = 0;
					m->BufferBinds = IntPtr.Zero;
					return;
				}
				m->BufferBindCount = (uint)value.Length;
				refBufferBinds = new NativeReference ((int)(sizeof(Interop.SparseBufferMemoryBindInfo)*value.Length));
				m->BufferBinds = refBufferBinds.Handle;
				unsafe
				{
					Interop.SparseBufferMemoryBindInfo* ptr = (Interop.SparseBufferMemoryBindInfo*)m->BufferBinds;
					for (int i = 0; i < value.Length; i++)
						ptr [i] = *value [i].m;
				}
			}
		}

		public UInt32 ImageOpaqueBindCount {
			get { return m->ImageOpaqueBindCount; }
			set { m->ImageOpaqueBindCount = value; }
		}

		NativeReference refImageOpaqueBinds;
		public SparseImageOpaqueMemoryBindInfo[] ImageOpaqueBinds {
			get {
				if (m->ImageOpaqueBindCount == 0)
					return null;
				var values = new SparseImageOpaqueMemoryBindInfo [m->ImageOpaqueBindCount];
				unsafe
				{
					Interop.SparseImageOpaqueMemoryBindInfo* ptr = (Interop.SparseImageOpaqueMemoryBindInfo*)m->ImageOpaqueBinds;
					for (int i = 0; i < values.Length; i++) {
						values [i] = new SparseImageOpaqueMemoryBindInfo ();
						*values [i].m = ptr [i];
					}
				}
				return values;
			}

			set {
				if (value == null) {
					m->ImageOpaqueBindCount = 0;
					m->ImageOpaqueBinds = IntPtr.Zero;
					return;
				}
				m->ImageOpaqueBindCount = (uint)value.Length;
				refImageOpaqueBinds = new NativeReference ((int)(sizeof(Interop.SparseImageOpaqueMemoryBindInfo)*value.Length));
				m->ImageOpaqueBinds = refImageOpaqueBinds.Handle;
				unsafe
				{
					Interop.SparseImageOpaqueMemoryBindInfo* ptr = (Interop.SparseImageOpaqueMemoryBindInfo*)m->ImageOpaqueBinds;
					for (int i = 0; i < value.Length; i++)
						ptr [i] = *value [i].m;
				}
			}
		}

		public UInt32 ImageBindCount {
			get { return m->ImageBindCount; }
			set { m->ImageBindCount = value; }
		}

		NativeReference refImageBinds;
		public SparseImageMemoryBindInfo[] ImageBinds {
			get {
				if (m->ImageBindCount == 0)
					return null;
				var values = new SparseImageMemoryBindInfo [m->ImageBindCount];
				unsafe
				{
					Interop.SparseImageMemoryBindInfo* ptr = (Interop.SparseImageMemoryBindInfo*)m->ImageBinds;
					for (int i = 0; i < values.Length; i++) {
						values [i] = new SparseImageMemoryBindInfo ();
						*values [i].m = ptr [i];
					}
				}
				return values;
			}

			set {
				if (value == null) {
					m->ImageBindCount = 0;
					m->ImageBinds = IntPtr.Zero;
					return;
				}
				m->ImageBindCount = (uint)value.Length;
				refImageBinds = new NativeReference ((int)(sizeof(Interop.SparseImageMemoryBindInfo)*value.Length));
				m->ImageBinds = refImageBinds.Handle;
				unsafe
				{
					Interop.SparseImageMemoryBindInfo* ptr = (Interop.SparseImageMemoryBindInfo*)m->ImageBinds;
					for (int i = 0; i < value.Length; i++)
						ptr [i] = *value [i].m;
				}
			}
		}

		public UInt32 SignalSemaphoreCount {
			get { return m->SignalSemaphoreCount; }
			set { m->SignalSemaphoreCount = value; }
		}

		NativeReference refSignalSemaphores;
		public Semaphore[] SignalSemaphores {
			get {
				if (m->SignalSemaphoreCount == 0)
					return null;
				var values = new Semaphore [m->SignalSemaphoreCount];
				unsafe
				{
					UInt64* ptr = (UInt64*)m->SignalSemaphores;
					for (int i = 0; i < values.Length; i++) {
						values [i] = new Semaphore ();
						values [i].m = ptr [i];
					}
				}
				return values;
			}

			set {
				if (value == null) {
					m->SignalSemaphoreCount = 0;
					m->SignalSemaphores = IntPtr.Zero;
					return;
				}
				m->SignalSemaphoreCount = (uint)value.Length;
				refSignalSemaphores = new NativeReference ((int)(sizeof(UInt64)*value.Length));
				m->SignalSemaphores = refSignalSemaphores.Handle;
				unsafe
				{
					UInt64* ptr = (UInt64*)m->SignalSemaphores;
					for (int i = 0; i < value.Length; i++)
						ptr [i] = value [i].m;
				}
			}
		}
		internal Interop.BindSparseInfo* m {

			get {
				return (Interop.BindSparseInfo*)native.Handle;
			}
		}

		public BindSparseInfo ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.BindSparseInfo));
			Initialize ();
		}

		internal BindSparseInfo (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}

		override public void Dispose (bool disposing)
		{
			base.Dispose (disposing);
			if (!disposing)
				return;
			refWaitSemaphores.Dispose ();
			refWaitSemaphores = null;
			refBufferBinds.Dispose ();
			refBufferBinds = null;
			refImageOpaqueBinds.Dispose ();
			refImageOpaqueBinds = null;
			refImageBinds.Dispose ();
			refImageBinds = null;
			refSignalSemaphores.Dispose ();
			refSignalSemaphores = null;
		}

		internal void Initialize ()
		{
			m->SType = StructureType.BindSparseInfo;
		}

	}

	unsafe public partial struct ImageCopy
	{
		public ImageSubresourceLayers SrcSubresource;
		public Offset3D SrcOffset;
		public ImageSubresourceLayers DstSubresource;
		public Offset3D DstOffset;
		public Extent3D Extent;
	}

	unsafe public partial class ImageBlit : MarshalledObject
	{
		public ImageSubresourceLayers SrcSubresource {
			get { return m->SrcSubresource; }
			set { m->SrcSubresource = value; }
		}

		public Offset3D[] SrcOffsets {
			get {
				var arr = new Offset3D [2];
				for (int i = 0; i < 2; i++)
					unsafe
					{
						arr [i] = (&m->SrcOffsets0) [i];
					}
				return arr;
			}

			set {
				if (value.Length > 2)
					throw new Exception ("array too long");
				for (int i = 0; i < value.Length; i++)
					unsafe
					{
						(&m->SrcOffsets0) [i] = value [i];
					}
			}
		}

		public ImageSubresourceLayers DstSubresource {
			get { return m->DstSubresource; }
			set { m->DstSubresource = value; }
		}

		public Offset3D[] DstOffsets {
			get {
				var arr = new Offset3D [2];
				for (int i = 0; i < 2; i++)
					unsafe
					{
						arr [i] = (&m->DstOffsets0) [i];
					}
				return arr;
			}

			set {
				if (value.Length > 2)
					throw new Exception ("array too long");
				for (int i = 0; i < value.Length; i++)
					unsafe
					{
						(&m->DstOffsets0) [i] = value [i];
					}
			}
		}
		internal Interop.ImageBlit* m {

			get {
				return (Interop.ImageBlit*)native.Handle;
			}
		}

		public ImageBlit ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.ImageBlit));
		}

		internal ImageBlit (NativePointer pointer)
		{
			native = pointer;
		}

	}

	unsafe public partial struct BufferImageCopy
	{
		public DeviceSize BufferOffset;
		public UInt32 BufferRowLength;
		public UInt32 BufferImageHeight;
		public ImageSubresourceLayers ImageSubresource;
		public Offset3D ImageOffset;
		public Extent3D ImageExtent;
	}

	unsafe public partial struct ImageResolve
	{
		public ImageSubresourceLayers SrcSubresource;
		public Offset3D SrcOffset;
		public ImageSubresourceLayers DstSubresource;
		public Offset3D DstOffset;
		public Extent3D Extent;
	}

	unsafe public partial class ShaderModuleCreateInfo : MarshalledObject
	{
		public UInt32 Flags {
			get { return m->Flags; }
			set { m->Flags = value; }
		}

		public UIntPtr CodeSize {
			get { return m->CodeSize; }
			set { m->CodeSize = value; }
		}

		NativeReference refCode;
		public UInt32[] Code {
			get {
				if (m->CodeSize == UIntPtr.Zero)
					return null;
				var values = new UInt32 [((uint)m->CodeSize >> 2)];
				unsafe
				{
					UInt32* ptr = (UInt32*)m->Code;
					for (int i = 0; i < values.Length; i++) 
						values [i] = ptr [i];
				}
				return values;
			}

			set {
				if (value == null) {
					m->CodeSize = UIntPtr.Zero;
					m->Code = IntPtr.Zero;
					return;
				}
				m->CodeSize = (UIntPtr)(value.Length << 2);
				refCode = new NativeReference ((int)(sizeof(UInt32)*value.Length));
				m->Code = refCode.Handle;
				unsafe
				{
					UInt32* ptr = (UInt32*)m->Code;
					for (int i = 0; i < value.Length; i++)
						ptr [i] = value [i];
				}
			}
		}
		internal Interop.ShaderModuleCreateInfo* m {

			get {
				return (Interop.ShaderModuleCreateInfo*)native.Handle;
			}
		}

		public ShaderModuleCreateInfo ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.ShaderModuleCreateInfo));
			Initialize ();
		}

		internal ShaderModuleCreateInfo (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}

		override public void Dispose (bool disposing)
		{
			base.Dispose (disposing);
			if (!disposing)
				return;
			refCode.Dispose ();
			refCode = null;
		}

		internal void Initialize ()
		{
			m->SType = StructureType.ShaderModuleCreateInfo;
		}

	}

	unsafe public partial class DescriptorSetLayoutBinding : MarshalledObject
	{
		public UInt32 Binding {
			get { return m->Binding; }
			set { m->Binding = value; }
		}

		public DescriptorType DescriptorType {
			get { return m->DescriptorType; }
			set { m->DescriptorType = value; }
		}

		public UInt32 DescriptorCount {
			get { return m->DescriptorCount; }
			set { m->DescriptorCount = value; }
		}

		public ShaderStageFlags StageFlags {
			get { return m->StageFlags; }
			set { m->StageFlags = value; }
		}

		NativeReference refImmutableSamplers;
		public Sampler[] ImmutableSamplers {
			get {
				if (m->DescriptorCount == 0)
					return null;
				var values = new Sampler [m->DescriptorCount];
				unsafe
				{
					UInt64* ptr = (UInt64*)m->ImmutableSamplers;
					for (int i = 0; i < values.Length; i++) {
						values [i] = new Sampler ();
						values [i].m = ptr [i];
					}
				}
				return values;
			}

			set {
				if (value == null) {
					m->DescriptorCount = 0;
					m->ImmutableSamplers = IntPtr.Zero;
					return;
				}
				m->DescriptorCount = (uint)value.Length;
				refImmutableSamplers = new NativeReference ((int)(sizeof(UInt64)*value.Length));
				m->ImmutableSamplers = refImmutableSamplers.Handle;
				unsafe
				{
					UInt64* ptr = (UInt64*)m->ImmutableSamplers;
					for (int i = 0; i < value.Length; i++)
						ptr [i] = value [i].m;
				}
			}
		}
		internal Interop.DescriptorSetLayoutBinding* m {

			get {
				return (Interop.DescriptorSetLayoutBinding*)native.Handle;
			}
		}

		public DescriptorSetLayoutBinding ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.DescriptorSetLayoutBinding));
		}

		internal DescriptorSetLayoutBinding (NativePointer pointer)
		{
			native = pointer;
		}

		override public void Dispose (bool disposing)
		{
			base.Dispose (disposing);
			if (!disposing)
				return;
			refImmutableSamplers.Dispose ();
			refImmutableSamplers = null;
		}
	}

	unsafe public partial class DescriptorSetLayoutCreateInfo : MarshalledObject
	{
		public DescriptorSetLayoutCreateFlags Flags {
			get { return m->Flags; }
			set { m->Flags = value; }
		}

		public UInt32 BindingCount {
			get { return m->BindingCount; }
			set { m->BindingCount = value; }
		}

		NativeReference refBindings;
		public DescriptorSetLayoutBinding[] Bindings {
			get {
				if (m->BindingCount == 0)
					return null;
				var values = new DescriptorSetLayoutBinding [m->BindingCount];
				unsafe
				{
					Interop.DescriptorSetLayoutBinding* ptr = (Interop.DescriptorSetLayoutBinding*)m->Bindings;
					for (int i = 0; i < values.Length; i++) {
						values [i] = new DescriptorSetLayoutBinding ();
						*values [i].m = ptr [i];
					}
				}
				return values;
			}

			set {
				if (value == null) {
					m->BindingCount = 0;
					m->Bindings = IntPtr.Zero;
					return;
				}
				m->BindingCount = (uint)value.Length;
				refBindings = new NativeReference ((int)(sizeof(Interop.DescriptorSetLayoutBinding)*value.Length));
				m->Bindings = refBindings.Handle;
				unsafe
				{
					Interop.DescriptorSetLayoutBinding* ptr = (Interop.DescriptorSetLayoutBinding*)m->Bindings;
					for (int i = 0; i < value.Length; i++)
						ptr [i] = *value [i].m;
				}
			}
		}
		internal Interop.DescriptorSetLayoutCreateInfo* m {

			get {
				return (Interop.DescriptorSetLayoutCreateInfo*)native.Handle;
			}
		}

		public DescriptorSetLayoutCreateInfo ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.DescriptorSetLayoutCreateInfo));
			Initialize ();
		}

		internal DescriptorSetLayoutCreateInfo (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}

		override public void Dispose (bool disposing)
		{
			base.Dispose (disposing);
			if (!disposing)
				return;
			refBindings.Dispose ();
			refBindings = null;
		}

		internal void Initialize ()
		{
			m->SType = StructureType.DescriptorSetLayoutCreateInfo;
		}

	}

	unsafe public partial struct DescriptorPoolSize
	{
		public DescriptorType Type;
		public UInt32 DescriptorCount;
	}

	unsafe public partial class DescriptorPoolCreateInfo : MarshalledObject
	{
		public DescriptorPoolCreateFlags Flags {
			get { return m->Flags; }
			set { m->Flags = value; }
		}

		public UInt32 MaxSets {
			get { return m->MaxSets; }
			set { m->MaxSets = value; }
		}

		public UInt32 PoolSizeCount {
			get { return m->PoolSizeCount; }
			set { m->PoolSizeCount = value; }
		}

		NativeReference refPoolSizes;
		public DescriptorPoolSize[] PoolSizes {
			get {
				if (m->PoolSizeCount == 0)
					return null;
				var values = new DescriptorPoolSize [m->PoolSizeCount];
				unsafe
				{
					DescriptorPoolSize* ptr = (DescriptorPoolSize*)m->PoolSizes;
					for (int i = 0; i < values.Length; i++) 
						values [i] = ptr [i];
				}
				return values;
			}

			set {
				if (value == null) {
					m->PoolSizeCount = 0;
					m->PoolSizes = IntPtr.Zero;
					return;
				}
				m->PoolSizeCount = (uint)value.Length;
				refPoolSizes = new NativeReference ((int)(sizeof(DescriptorPoolSize)*value.Length));
				m->PoolSizes = refPoolSizes.Handle;
				unsafe
				{
					DescriptorPoolSize* ptr = (DescriptorPoolSize*)m->PoolSizes;
					for (int i = 0; i < value.Length; i++)
						ptr [i] = value [i];
				}
			}
		}
		internal Interop.DescriptorPoolCreateInfo* m {

			get {
				return (Interop.DescriptorPoolCreateInfo*)native.Handle;
			}
		}

		public DescriptorPoolCreateInfo ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.DescriptorPoolCreateInfo));
			Initialize ();
		}

		internal DescriptorPoolCreateInfo (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}

		override public void Dispose (bool disposing)
		{
			base.Dispose (disposing);
			if (!disposing)
				return;
			refPoolSizes.Dispose ();
			refPoolSizes = null;
		}

		internal void Initialize ()
		{
			m->SType = StructureType.DescriptorPoolCreateInfo;
		}

	}

	unsafe public partial class DescriptorSetAllocateInfo : MarshalledObject
	{
		DescriptorPool lDescriptorPool;
		public DescriptorPool DescriptorPool {
			get { return lDescriptorPool; }
			set { lDescriptorPool = value; m->DescriptorPool = value != null ? (UInt64)value.m : default(UInt64); }
		}

		public UInt32 DescriptorSetCount {
			get { return m->DescriptorSetCount; }
			set { m->DescriptorSetCount = value; }
		}

		NativeReference refSetLayouts;
		public DescriptorSetLayout[] SetLayouts {
			get {
				if (m->DescriptorSetCount == 0)
					return null;
				var values = new DescriptorSetLayout [m->DescriptorSetCount];
				unsafe
				{
					UInt64* ptr = (UInt64*)m->SetLayouts;
					for (int i = 0; i < values.Length; i++) {
						values [i] = new DescriptorSetLayout ();
						values [i].m = ptr [i];
					}
				}
				return values;
			}

			set {
				if (value == null) {
					m->DescriptorSetCount = 0;
					m->SetLayouts = IntPtr.Zero;
					return;
				}
				m->DescriptorSetCount = (uint)value.Length;
				refSetLayouts = new NativeReference ((int)(sizeof(UInt64)*value.Length));
				m->SetLayouts = refSetLayouts.Handle;
				unsafe
				{
					UInt64* ptr = (UInt64*)m->SetLayouts;
					for (int i = 0; i < value.Length; i++)
						ptr [i] = value [i].m;
				}
			}
		}
		internal Interop.DescriptorSetAllocateInfo* m {

			get {
				return (Interop.DescriptorSetAllocateInfo*)native.Handle;
			}
		}

		public DescriptorSetAllocateInfo ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.DescriptorSetAllocateInfo));
			Initialize ();
		}

		internal DescriptorSetAllocateInfo (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}

		override public void Dispose (bool disposing)
		{
			if(disposing)
			{
				refSetLayouts.Dispose();
				refSetLayouts = null;
				base.Dispose(disposing);
			}
		}

		internal void Initialize ()
		{
			m->SType = StructureType.DescriptorSetAllocateInfo;
		}

	}

	unsafe public partial struct SpecializationMapEntry
	{
		public UInt32 ConstantId;
		public UInt32 Offset;
		public UIntPtr Size;
	}

	unsafe public partial class SpecializationInfo : MarshalledObject
	{
		public UInt32 MapEntryCount {
			get { return m->MapEntryCount; }
			set { m->MapEntryCount = value; }
		}

		NativeReference refMapEntries;
		public SpecializationMapEntry[] MapEntries {
			get {
				if (m->MapEntryCount == 0)
					return null;
				var values = new SpecializationMapEntry [m->MapEntryCount];
				unsafe
				{
					SpecializationMapEntry* ptr = (SpecializationMapEntry*)m->MapEntries;
					for (int i = 0; i < values.Length; i++) 
						values [i] = ptr [i];
				}
				return values;
			}

			set {
				if (value == null) {
					m->MapEntryCount = 0;
					m->MapEntries = IntPtr.Zero;
					return;
				}
				m->MapEntryCount = (uint)value.Length;
				refMapEntries = new NativeReference ((int)(sizeof(SpecializationMapEntry)*value.Length));
				m->MapEntries = refMapEntries.Handle;
				unsafe
				{
					SpecializationMapEntry* ptr = (SpecializationMapEntry*)m->MapEntries;
					for (int i = 0; i < value.Length; i++)
						ptr [i] = value [i];
				}
			}
		}

		public UIntPtr DataSize {
			get { return m->DataSize; }
			set { m->DataSize = value; }
		}

		public IntPtr Data {
			get { return m->Data; }
			set { m->Data = value; }
		}
		internal Interop.SpecializationInfo* m {

			get {
				return (Interop.SpecializationInfo*)native.Handle;
			}
		}

		public SpecializationInfo ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.SpecializationInfo));
		}

		internal SpecializationInfo (NativePointer pointer)
		{
			native = pointer;
		}

		override public void Dispose (bool disposing)
		{
			base.Dispose (disposing);
			if (!disposing)
				return;
			refMapEntries.Dispose ();
			refMapEntries = null;
		}
	}

	unsafe public partial class PipelineShaderStageCreateInfo : MarshalledObject
	{
		public UInt32 Flags {
			get { return m->Flags; }
			set { m->Flags = value; }
		}

		public ShaderStageFlags Stage {
			get { return m->Stage; }
			set { m->Stage = value; }
		}

		ShaderModule lModule;
		public ShaderModule Module {
			get { return lModule; }
			set { lModule = value; m->Module = value != null ? (UInt64)value.m : default(UInt64); }
		}

		public string Name {
			get { return Marshal.PtrToStringAnsi (m->Name); }
			set { m->Name = Marshal.StringToHGlobalAnsi (value); }
		}

		SpecializationInfo lSpecializationInfo;
		public SpecializationInfo SpecializationInfo {
			get { return lSpecializationInfo; }
			set { lSpecializationInfo = value; m->SpecializationInfo = value != null ? (IntPtr)value.m : default(IntPtr); }
		}
		internal Interop.PipelineShaderStageCreateInfo* m {

			get {
				return (Interop.PipelineShaderStageCreateInfo*)native.Handle;
			}
		}

		public PipelineShaderStageCreateInfo ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.PipelineShaderStageCreateInfo));
			Initialize ();
		}

		internal PipelineShaderStageCreateInfo (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}


		internal void Initialize ()
		{
			m->SType = StructureType.PipelineShaderStageCreateInfo;
		}

	}

	unsafe public partial class ComputePipelineCreateInfo : MarshalledObject
	{
		public PipelineCreateFlags Flags {
			get { return m->Flags; }
			set { m->Flags = value; }
		}

		PipelineShaderStageCreateInfo lStage;
		public PipelineShaderStageCreateInfo Stage {
			get { return lStage; }
			set { lStage = value; m->Stage = value != null ? *value.m : default(Interop.PipelineShaderStageCreateInfo); }
		}

		PipelineLayout lLayout;
		public PipelineLayout Layout {
			get { return lLayout; }
			set { lLayout = value; m->Layout = value != null ? (UInt64)value.m : default(UInt64); }
		}

		Pipeline lBasePipelineHandle;
		public Pipeline BasePipelineHandle {
			get { return lBasePipelineHandle; }
			set { lBasePipelineHandle = value; m->BasePipelineHandle = value != null ? (UInt64)value.m : default(UInt64); }
		}

		public Int32 BasePipelineIndex {
			get { return m->BasePipelineIndex; }
			set { m->BasePipelineIndex = value; }
		}
		internal Interop.ComputePipelineCreateInfo* m {

			get {
				return (Interop.ComputePipelineCreateInfo*)native.Handle;
			}
		}

		public ComputePipelineCreateInfo ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.ComputePipelineCreateInfo));
			Initialize ();
		}

		internal ComputePipelineCreateInfo (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}


		internal void Initialize ()
		{
			m->SType = StructureType.ComputePipelineCreateInfo;
			lStage = new PipelineShaderStageCreateInfo (new NativePointer (native.Reference, (IntPtr)(&m->Stage)));
		}

	}

	unsafe public partial struct VertexInputBindingDescription
	{
		public UInt32 Binding;
		public UInt32 Stride;
		public VertexInputRate InputRate;
	}

	unsafe public partial struct VertexInputAttributeDescription
	{
		public UInt32 Location;
		public UInt32 Binding;
		public Format Format;
		public UInt32 Offset;
	}

	unsafe public partial class PipelineVertexInputStateCreateInfo : MarshalledObject
	{
		public UInt32 Flags {
			get { return m->Flags; }
			set { m->Flags = value; }
		}

		public UInt32 VertexBindingDescriptionCount {
			get { return m->VertexBindingDescriptionCount; }
			set { m->VertexBindingDescriptionCount = value; }
		}

		NativeReference refVertexBindingDescriptions;
		public VertexInputBindingDescription[] VertexBindingDescriptions {
			get {
				if (m->VertexBindingDescriptionCount == 0)
					return null;
				var values = new VertexInputBindingDescription [m->VertexBindingDescriptionCount];
				unsafe
				{
					VertexInputBindingDescription* ptr = (VertexInputBindingDescription*)m->VertexBindingDescriptions;
					for (int i = 0; i < values.Length; i++) 
						values [i] = ptr [i];
				}
				return values;
			}

			set {
				if (value == null) {
					m->VertexBindingDescriptionCount = 0;
					m->VertexBindingDescriptions = IntPtr.Zero;
					return;
				}
				m->VertexBindingDescriptionCount = (uint)value.Length;
				refVertexBindingDescriptions = new NativeReference ((int)(sizeof(VertexInputBindingDescription)*value.Length));
				m->VertexBindingDescriptions = refVertexBindingDescriptions.Handle;
				unsafe
				{
					VertexInputBindingDescription* ptr = (VertexInputBindingDescription*)m->VertexBindingDescriptions;
					for (int i = 0; i < value.Length; i++)
						ptr [i] = value [i];
				}
			}
		}

		public UInt32 VertexAttributeDescriptionCount {
			get { return m->VertexAttributeDescriptionCount; }
			set { m->VertexAttributeDescriptionCount = value; }
		}

		NativeReference refVertexAttributeDescriptions;
		public VertexInputAttributeDescription[] VertexAttributeDescriptions {
			get {
				if (m->VertexAttributeDescriptionCount == 0)
					return null;
				var values = new VertexInputAttributeDescription [m->VertexAttributeDescriptionCount];
				unsafe
				{
					VertexInputAttributeDescription* ptr = (VertexInputAttributeDescription*)m->VertexAttributeDescriptions;
					for (int i = 0; i < values.Length; i++) 
						values [i] = ptr [i];
				}
				return values;
			}

			set {
				if (value == null) {
					m->VertexAttributeDescriptionCount = 0;
					m->VertexAttributeDescriptions = IntPtr.Zero;
					return;
				}
				m->VertexAttributeDescriptionCount = (uint)value.Length;
				refVertexAttributeDescriptions = new NativeReference ((int)(sizeof(VertexInputAttributeDescription)*value.Length));
				m->VertexAttributeDescriptions = refVertexAttributeDescriptions.Handle;
				unsafe
				{
					VertexInputAttributeDescription* ptr = (VertexInputAttributeDescription*)m->VertexAttributeDescriptions;
					for (int i = 0; i < value.Length; i++)
						ptr [i] = value [i];
				}
			}
		}
		internal Interop.PipelineVertexInputStateCreateInfo* m {

			get {
				return (Interop.PipelineVertexInputStateCreateInfo*)native.Handle;
			}
		}

		public PipelineVertexInputStateCreateInfo ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.PipelineVertexInputStateCreateInfo));
			Initialize ();
		}

		internal PipelineVertexInputStateCreateInfo (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}

		override public void Dispose (bool disposing)
		{
			base.Dispose (disposing);
			if (!disposing)
				return;
			refVertexBindingDescriptions.Dispose ();
			refVertexBindingDescriptions = null;
			refVertexAttributeDescriptions.Dispose ();
			refVertexAttributeDescriptions = null;
		}

		internal void Initialize ()
		{
			m->SType = StructureType.PipelineVertexInputStateCreateInfo;
		}

	}

	unsafe public partial class PipelineInputAssemblyStateCreateInfo : MarshalledObject
	{
		public UInt32 Flags {
			get { return m->Flags; }
			set { m->Flags = value; }
		}

		public PrimitiveTopology Topology {
			get { return m->Topology; }
			set { m->Topology = value; }
		}

		public bool PrimitiveRestartEnable {
			get { return m->PrimitiveRestartEnable; }
			set { m->PrimitiveRestartEnable = value; }
		}
		internal Interop.PipelineInputAssemblyStateCreateInfo* m {

			get {
				return (Interop.PipelineInputAssemblyStateCreateInfo*)native.Handle;
			}
		}

		public PipelineInputAssemblyStateCreateInfo ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.PipelineInputAssemblyStateCreateInfo));
			Initialize ();
		}

		internal PipelineInputAssemblyStateCreateInfo (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}


		internal void Initialize ()
		{
			m->SType = StructureType.PipelineInputAssemblyStateCreateInfo;
		}

	}

	unsafe public partial class PipelineTessellationStateCreateInfo : MarshalledObject
	{
		public UInt32 Flags {
			get { return m->Flags; }
			set { m->Flags = value; }
		}

		public UInt32 PatchControlPoints {
			get { return m->PatchControlPoints; }
			set { m->PatchControlPoints = value; }
		}
		internal Interop.PipelineTessellationStateCreateInfo* m {

			get {
				return (Interop.PipelineTessellationStateCreateInfo*)native.Handle;
			}
		}

		public PipelineTessellationStateCreateInfo ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.PipelineTessellationStateCreateInfo));
			Initialize ();
		}

		internal PipelineTessellationStateCreateInfo (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}


		internal void Initialize ()
		{
			m->SType = StructureType.PipelineTessellationStateCreateInfo;
		}

	}

	unsafe public partial class PipelineViewportStateCreateInfo : MarshalledObject
	{
		public UInt32 Flags {
			get { return m->Flags; }
			set { m->Flags = value; }
		}

		public UInt32 ViewportCount {
			get { return m->ViewportCount; }
			set { m->ViewportCount = value; }
		}

		NativeReference refViewports;
		public Viewport[] Viewports {
			get {
				if (m->ViewportCount == 0)
					return null;
				var values = new Viewport [m->ViewportCount];
				unsafe
				{
					Viewport* ptr = (Viewport*)m->Viewports;
					for (int i = 0; i < values.Length; i++) 
						values [i] = ptr [i];
				}
				return values;
			}

			set {
				if (value == null) {
					m->ViewportCount = 0;
					m->Viewports = IntPtr.Zero;
					return;
				}
				m->ViewportCount = (uint)value.Length;
				refViewports = new NativeReference ((int)(sizeof(Viewport)*value.Length));
				m->Viewports = refViewports.Handle;
				unsafe
				{
					Viewport* ptr = (Viewport*)m->Viewports;
					for (int i = 0; i < value.Length; i++)
						ptr [i] = value [i];
				}
			}
		}

		public UInt32 ScissorCount {
			get { return m->ScissorCount; }
			set { m->ScissorCount = value; }
		}

		NativeReference refScissors;
		public Rect2D[] Scissors {
			get {
				if (m->ScissorCount == 0)
					return null;
				var values = new Rect2D [m->ScissorCount];
				unsafe
				{
					Rect2D* ptr = (Rect2D*)m->Scissors;
					for (int i = 0; i < values.Length; i++) 
						values [i] = ptr [i];
				}
				return values;
			}

			set {
				if (value == null) {
					m->ScissorCount = 0;
					m->Scissors = IntPtr.Zero;
					return;
				}
				m->ScissorCount = (uint)value.Length;
				refScissors = new NativeReference ((int)(sizeof(Rect2D)*value.Length));
				m->Scissors = refScissors.Handle;
				unsafe
				{
					Rect2D* ptr = (Rect2D*)m->Scissors;
					for (int i = 0; i < value.Length; i++)
						ptr [i] = value [i];
				}
			}
		}
		internal Interop.PipelineViewportStateCreateInfo* m {

			get {
				return (Interop.PipelineViewportStateCreateInfo*)native.Handle;
			}
		}

		public PipelineViewportStateCreateInfo ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.PipelineViewportStateCreateInfo));
			Initialize ();
		}

		internal PipelineViewportStateCreateInfo (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}

		override public void Dispose (bool disposing)
		{
			base.Dispose (disposing);
			if (!disposing)
				return;
			refViewports.Dispose ();
			refViewports = null;
			refScissors.Dispose ();
			refScissors = null;
		}

		internal void Initialize ()
		{
			m->SType = StructureType.PipelineViewportStateCreateInfo;
		}

	}

	unsafe public partial class PipelineRasterizationStateCreateInfo : MarshalledObject
	{
		public UInt32 Flags {
			get { return m->Flags; }
			set { m->Flags = value; }
		}

		public bool DepthClampEnable {
			get { return m->DepthClampEnable; }
			set { m->DepthClampEnable = value; }
		}

		public bool RasterizerDiscardEnable {
			get { return m->RasterizerDiscardEnable; }
			set { m->RasterizerDiscardEnable = value; }
		}

		public PolygonMode PolygonMode {
			get { return m->PolygonMode; }
			set { m->PolygonMode = value; }
		}

		public CullModeFlags CullMode {
			get { return m->CullMode; }
			set { m->CullMode = value; }
		}

		public FrontFace FrontFace {
			get { return m->FrontFace; }
			set { m->FrontFace = value; }
		}

		public bool DepthBiasEnable {
			get { return m->DepthBiasEnable; }
			set { m->DepthBiasEnable = value; }
		}

		public float DepthBiasConstantFactor {
			get { return m->DepthBiasConstantFactor; }
			set { m->DepthBiasConstantFactor = value; }
		}

		public float DepthBiasClamp {
			get { return m->DepthBiasClamp; }
			set { m->DepthBiasClamp = value; }
		}

		public float DepthBiasSlopeFactor {
			get { return m->DepthBiasSlopeFactor; }
			set { m->DepthBiasSlopeFactor = value; }
		}

		public float LineWidth {
			get { return m->LineWidth; }
			set { m->LineWidth = value; }
		}
		internal Interop.PipelineRasterizationStateCreateInfo* m {

			get {
				return (Interop.PipelineRasterizationStateCreateInfo*)native.Handle;
			}
		}

		public PipelineRasterizationStateCreateInfo ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.PipelineRasterizationStateCreateInfo));
			Initialize ();
		}

		internal PipelineRasterizationStateCreateInfo (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}


		internal void Initialize ()
		{
			m->SType = StructureType.PipelineRasterizationStateCreateInfo;
		}

	}

	unsafe public partial class PipelineMultisampleStateCreateInfo : MarshalledObject
	{
		public UInt32 Flags {
			get { return m->Flags; }
			set { m->Flags = value; }
		}

		public SampleCountFlags RasterizationSamples {
			get { return m->RasterizationSamples; }
			set { m->RasterizationSamples = value; }
		}

		public bool SampleShadingEnable {
			get { return m->SampleShadingEnable; }
			set { m->SampleShadingEnable = value; }
		}

		public float MinSampleShading {
			get { return m->MinSampleShading; }
			set { m->MinSampleShading = value; }
		}

		NativeReference refSampleMask;
		public UInt32[] SampleMask {
			get {
				if (m->RasterizationSamples == 0)
					return null;
				var values = new UInt32 [((uint)m->RasterizationSamples >> 5)];
				unsafe
				{
					UInt32* ptr = (UInt32*)m->SampleMask;
					for (int i = 0; i < values.Length; i++) 
						values [i] = ptr [i];
				}
				return values;
			}

			set {
				if (value == null) {
					m->RasterizationSamples = 0;
					m->SampleMask = IntPtr.Zero;
					return;
				}
				m->RasterizationSamples = (SampleCountFlags)(value.Length << 5);
				refSampleMask = new NativeReference ((int)(sizeof(UInt32)*value.Length));
				m->SampleMask = refSampleMask.Handle;
				unsafe
				{
					UInt32* ptr = (UInt32*)m->SampleMask;
					for (int i = 0; i < value.Length; i++)
						ptr [i] = value [i];
				}
			}
		}

		public bool AlphaToCoverageEnable {
			get { return m->AlphaToCoverageEnable; }
			set { m->AlphaToCoverageEnable = value; }
		}

		public bool AlphaToOneEnable {
			get { return m->AlphaToOneEnable; }
			set { m->AlphaToOneEnable = value; }
		}
		internal Interop.PipelineMultisampleStateCreateInfo* m {

			get {
				return (Interop.PipelineMultisampleStateCreateInfo*)native.Handle;
			}
		}

		public PipelineMultisampleStateCreateInfo ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.PipelineMultisampleStateCreateInfo));
			Initialize ();
		}

		internal PipelineMultisampleStateCreateInfo (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}

		override public void Dispose (bool disposing)
		{
			base.Dispose (disposing);
			if (!disposing)
				return;
			refSampleMask.Dispose ();
			refSampleMask = null;
		}

		internal void Initialize ()
		{
			m->SType = StructureType.PipelineMultisampleStateCreateInfo;
		}

	}

	unsafe public partial struct PipelineColorBlendAttachmentState
	{
		public Bool32 BlendEnable;
		public BlendFactor SrcColorBlendFactor;
		public BlendFactor DstColorBlendFactor;
		public BlendOp ColorBlendOp;
		public BlendFactor SrcAlphaBlendFactor;
		public BlendFactor DstAlphaBlendFactor;
		public BlendOp AlphaBlendOp;
		public ColorComponentFlags ColorWriteMask;
	}

	unsafe public partial class PipelineColorBlendStateCreateInfo : MarshalledObject
	{
		public UInt32 Flags {
			get { return m->Flags; }
			set { m->Flags = value; }
		}

		public bool LogicOpEnable {
			get { return m->LogicOpEnable; }
			set { m->LogicOpEnable = value; }
		}

		public LogicOp LogicOp {
			get { return m->LogicOp; }
			set { m->LogicOp = value; }
		}

		public UInt32 AttachmentCount {
			get { return m->AttachmentCount; }
			set { m->AttachmentCount = value; }
		}

		NativeReference refAttachments;
		public PipelineColorBlendAttachmentState[] Attachments {
			get {
				if (m->AttachmentCount == 0)
					return null;
				var values = new PipelineColorBlendAttachmentState [m->AttachmentCount];
				unsafe
				{
					PipelineColorBlendAttachmentState* ptr = (PipelineColorBlendAttachmentState*)m->Attachments;
					for (int i = 0; i < values.Length; i++) 
						values [i] = ptr [i];
				}
				return values;
			}

			set {
				if (value == null) {
					m->AttachmentCount = 0;
					m->Attachments = IntPtr.Zero;
					return;
				}
				m->AttachmentCount = (uint)value.Length;
				refAttachments = new NativeReference ((int)(sizeof(PipelineColorBlendAttachmentState)*value.Length));
				m->Attachments = refAttachments.Handle;
				unsafe
				{
					PipelineColorBlendAttachmentState* ptr = (PipelineColorBlendAttachmentState*)m->Attachments;
					for (int i = 0; i < value.Length; i++)
						ptr [i] = value [i];
				}
			}
		}

		public float[] BlendConstants {
			get {
				var arr = new float [4];
				for (int i = 0; i < 4; i++)
					arr [i] = m->BlendConstants [i];
				return arr;
			}

			set {
				if (value.Length > 4)
					throw new Exception ("array too long");
				for (int i = 0; i < value.Length; i++)
					m->BlendConstants [i] = value [i];
				for (int i = value.Length; i < 4; i++)
					m->BlendConstants [i] = 0;
			}
		}
		internal Interop.PipelineColorBlendStateCreateInfo* m {

			get {
				return (Interop.PipelineColorBlendStateCreateInfo*)native.Handle;
			}
		}

		public PipelineColorBlendStateCreateInfo ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.PipelineColorBlendStateCreateInfo));
			Initialize ();
		}

		internal PipelineColorBlendStateCreateInfo (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}

		override public void Dispose (bool disposing)
		{
			base.Dispose (disposing);
			if (!disposing)
				return;
			refAttachments.Dispose ();
			refAttachments = null;
		}

		internal void Initialize ()
		{
			m->SType = StructureType.PipelineColorBlendStateCreateInfo;
		}

	}

	unsafe public partial class PipelineDynamicStateCreateInfo : MarshalledObject
	{
		public UInt32 Flags {
			get { return m->Flags; }
			set { m->Flags = value; }
		}

		public UInt32 DynamicStateCount {
			get { return m->DynamicStateCount; }
			set { m->DynamicStateCount = value; }
		}

		NativeReference refDynamicStates;
		public DynamicState[] DynamicStates {
			get {
				if (m->DynamicStateCount == 0)
					return null;
				var values = new DynamicState [m->DynamicStateCount];
				unsafe
				{
					DynamicState* ptr = (DynamicState*)m->DynamicStates;
					for (int i = 0; i < values.Length; i++) 
						values [i] = ptr [i];
				}
				return values;
			}

			set {
				if (value == null) {
					m->DynamicStateCount = 0;
					m->DynamicStates = IntPtr.Zero;
					return;
				}
				m->DynamicStateCount = (uint)value.Length;
				refDynamicStates = new NativeReference ((int)(sizeof(DynamicState)*value.Length));
				m->DynamicStates = refDynamicStates.Handle;
				unsafe
				{
					DynamicState* ptr = (DynamicState*)m->DynamicStates;
					for (int i = 0; i < value.Length; i++)
						ptr [i] = value [i];
				}
			}
		}
		internal Interop.PipelineDynamicStateCreateInfo* m {

			get {
				return (Interop.PipelineDynamicStateCreateInfo*)native.Handle;
			}
		}

		public PipelineDynamicStateCreateInfo ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.PipelineDynamicStateCreateInfo));
			Initialize ();
		}

		internal PipelineDynamicStateCreateInfo (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}

		override public void Dispose (bool disposing)
		{
			base.Dispose (disposing);
			if (!disposing)
				return;
			refDynamicStates.Dispose ();
			refDynamicStates = null;
		}

		internal void Initialize ()
		{
			m->SType = StructureType.PipelineDynamicStateCreateInfo;
		}

	}

	unsafe public partial struct StencilOpState
	{
		public StencilOp FailOp;
		public StencilOp PassOp;
		public StencilOp DepthFailOp;
		public CompareOp CompareOp;
		public UInt32 CompareMask;
		public UInt32 WriteMask;
		public UInt32 Reference;
	}

	unsafe public partial class PipelineDepthStencilStateCreateInfo : MarshalledObject
	{
		public UInt32 Flags {
			get { return m->Flags; }
			set { m->Flags = value; }
		}

		public bool DepthTestEnable {
			get { return m->DepthTestEnable; }
			set { m->DepthTestEnable = value; }
		}

		public bool DepthWriteEnable {
			get { return m->DepthWriteEnable; }
			set { m->DepthWriteEnable = value; }
		}

		public CompareOp DepthCompareOp {
			get { return m->DepthCompareOp; }
			set { m->DepthCompareOp = value; }
		}

		public bool DepthBoundsTestEnable {
			get { return m->DepthBoundsTestEnable; }
			set { m->DepthBoundsTestEnable = value; }
		}

		public bool StencilTestEnable {
			get { return m->StencilTestEnable; }
			set { m->StencilTestEnable = value; }
		}

		public StencilOpState Front {
			get { return m->Front; }
			set { m->Front = value; }
		}

		public StencilOpState Back {
			get { return m->Back; }
			set { m->Back = value; }
		}

		public float MinDepthBounds {
			get { return m->MinDepthBounds; }
			set { m->MinDepthBounds = value; }
		}

		public float MaxDepthBounds {
			get { return m->MaxDepthBounds; }
			set { m->MaxDepthBounds = value; }
		}
		internal Interop.PipelineDepthStencilStateCreateInfo* m {

			get {
				return (Interop.PipelineDepthStencilStateCreateInfo*)native.Handle;
			}
		}

		public PipelineDepthStencilStateCreateInfo ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.PipelineDepthStencilStateCreateInfo));
			Initialize ();
		}

		internal PipelineDepthStencilStateCreateInfo (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}


		internal void Initialize ()
		{
			m->SType = StructureType.PipelineDepthStencilStateCreateInfo;
		}

	}

	unsafe public partial class GraphicsPipelineCreateInfo : MarshalledObject
	{
		public PipelineCreateFlags Flags {
			get { return m->Flags; }
			set { m->Flags = value; }
		}

		public UInt32 StageCount {
			get { return m->StageCount; }
			set { m->StageCount = value; }
		}

		NativeReference refStages;
		public PipelineShaderStageCreateInfo[] Stages {
			get {
				if (m->StageCount == 0)
					return null;
				var values = new PipelineShaderStageCreateInfo [m->StageCount];
				unsafe
				{
					Interop.PipelineShaderStageCreateInfo* ptr = (Interop.PipelineShaderStageCreateInfo*)m->Stages;
					for (int i = 0; i < values.Length; i++) {
						values [i] = new PipelineShaderStageCreateInfo ();
						*values [i].m = ptr [i];
						if(ptr[i].Module != 0) //TODO: This was a fix so that we could use the shader module again after passing it in a list in the Shader Manager
						{
							values[i].Module = new ShaderModule();
							values[i].Module.m = ptr[i].Module;
						}
					}
				}
				return values;
			}

			set {
				if (value == null) {
					m->StageCount = 0;
					m->Stages = IntPtr.Zero;
					return;
				}
				m->StageCount = (uint)value.Length;
				refStages = new NativeReference ((int)(sizeof(Interop.PipelineShaderStageCreateInfo)*value.Length));
				m->Stages = refStages.Handle;
				unsafe
				{
					Interop.PipelineShaderStageCreateInfo* ptr = (Interop.PipelineShaderStageCreateInfo*)m->Stages;
					for (int i = 0; i < value.Length; i++)
					{
						ptr[i] = *value[i].m;
					}
				}
			}
		}

		PipelineVertexInputStateCreateInfo lVertexInputState;
		public PipelineVertexInputStateCreateInfo VertexInputState {
			get { return lVertexInputState; }
			set { lVertexInputState = value; m->VertexInputState = value != null ? (IntPtr)value.m : default(IntPtr); }
		}

		PipelineInputAssemblyStateCreateInfo lInputAssemblyState;
		public PipelineInputAssemblyStateCreateInfo InputAssemblyState {
			get { return lInputAssemblyState; }
			set { lInputAssemblyState = value; m->InputAssemblyState = value != null ? (IntPtr)value.m : default(IntPtr); }
		}

		PipelineTessellationStateCreateInfo lTessellationState;
		public PipelineTessellationStateCreateInfo TessellationState {
			get { return lTessellationState; }
			set { lTessellationState = value; m->TessellationState = value != null ? (IntPtr)value.m : default(IntPtr); }
		}

		PipelineViewportStateCreateInfo lViewportState;
		public PipelineViewportStateCreateInfo ViewportState {
			get { return lViewportState; }
			set { lViewportState = value; m->ViewportState = value != null ? (IntPtr)value.m : default(IntPtr); }
		}

		PipelineRasterizationStateCreateInfo lRasterizationState;
		public PipelineRasterizationStateCreateInfo RasterizationState {
			get { return lRasterizationState; }
			set { lRasterizationState = value; m->RasterizationState = value != null ? (IntPtr)value.m : default(IntPtr); }
		}

		PipelineMultisampleStateCreateInfo lMultisampleState;
		public PipelineMultisampleStateCreateInfo MultisampleState {
			get { return lMultisampleState; }
			set { lMultisampleState = value; m->MultisampleState = value != null ? (IntPtr)value.m : default(IntPtr); }
		}

		PipelineDepthStencilStateCreateInfo lDepthStencilState;
		public PipelineDepthStencilStateCreateInfo DepthStencilState {
			get { return lDepthStencilState; }
			set { lDepthStencilState = value; m->DepthStencilState = value != null ? (IntPtr)value.m : default(IntPtr); }
		}

		PipelineColorBlendStateCreateInfo lColorBlendState;
		public PipelineColorBlendStateCreateInfo ColorBlendState {
			get { return lColorBlendState; }
			set { lColorBlendState = value; m->ColorBlendState = value != null ? (IntPtr)value.m : default(IntPtr); }
		}

		PipelineDynamicStateCreateInfo lDynamicState;
		public PipelineDynamicStateCreateInfo DynamicState {
			get { return lDynamicState; }
			set { lDynamicState = value; m->DynamicState = value != null ? (IntPtr)value.m : default(IntPtr); }
		}

		PipelineLayout lLayout;
		public PipelineLayout Layout {
			get { return lLayout; }
			set { lLayout = value; m->Layout = value != null ? (UInt64)value.m : default(UInt64); }
		}

		RenderPass lRenderPass;
		public RenderPass RenderPass {
			get { return lRenderPass; }
			set { lRenderPass = value; m->RenderPass = value != null ? (UInt64)value.m : default(UInt64); }
		}

		public UInt32 Subpass {
			get { return m->Subpass; }
			set { m->Subpass = value; }
		}

		Pipeline lBasePipelineHandle;
		public Pipeline BasePipelineHandle {
			get { return lBasePipelineHandle; }
			set { lBasePipelineHandle = value; m->BasePipelineHandle = value != null ? (UInt64)value.m : default(UInt64); }
		}

		public Int32 BasePipelineIndex {
			get { return m->BasePipelineIndex; }
			set { m->BasePipelineIndex = value; }
		}
		internal Interop.GraphicsPipelineCreateInfo* m {

			get {
				return (Interop.GraphicsPipelineCreateInfo*)native.Handle;
			}
		}

		public GraphicsPipelineCreateInfo ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.GraphicsPipelineCreateInfo));
			Initialize ();
		}

		internal GraphicsPipelineCreateInfo (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}

		override public void Dispose (bool disposing)
		{
			if(disposing)
			{
				refStages?.Dispose();
				refStages = null;
				base.Dispose(disposing);
			}
		}

		internal void Initialize ()
		{
			m->SType = StructureType.GraphicsPipelineCreateInfo;
		}

	}

	unsafe public partial class PipelineCacheCreateInfo : MarshalledObject
	{
		public UInt32 Flags {
			get { return m->Flags; }
			set { m->Flags = value; }
		}

		public UIntPtr InitialDataSize {
			get { return m->InitialDataSize; }
			set { m->InitialDataSize = value; }
		}

		public IntPtr InitialData {
			get { return m->InitialData; }
			set { m->InitialData = value; }
		}
		internal Interop.PipelineCacheCreateInfo* m {

			get {
				return (Interop.PipelineCacheCreateInfo*)native.Handle;
			}
		}

		public PipelineCacheCreateInfo ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.PipelineCacheCreateInfo));
			Initialize ();
		}

		internal PipelineCacheCreateInfo (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}


		internal void Initialize ()
		{
			m->SType = StructureType.PipelineCacheCreateInfo;
		}

	}

	unsafe public partial struct PushConstantRange
	{
		public ShaderStageFlags StageFlags;
		public UInt32 Offset;
		public UInt32 Size;
	}

	unsafe public partial class PipelineLayoutCreateInfo : MarshalledObject
	{
		public UInt32 Flags {
			get { return m->Flags; }
			set { m->Flags = value; }
		}

		public UInt32 SetLayoutCount {
			get { return m->SetLayoutCount; }
			set { m->SetLayoutCount = value; }
		}

		NativeReference refSetLayouts;
		public DescriptorSetLayout[] SetLayouts {
			get {
				if (m->SetLayoutCount == 0)
					return null;
				var values = new DescriptorSetLayout [m->SetLayoutCount];
				unsafe
				{
					UInt64* ptr = (UInt64*)m->SetLayouts;
					for (int i = 0; i < values.Length; i++) {
						values [i] = new DescriptorSetLayout ();
						values [i].m = ptr [i];
					}
				}
				return values;
			}

			set {
				if (value == null) {
					m->SetLayoutCount = 0;
					m->SetLayouts = IntPtr.Zero;
					return;
				}
				m->SetLayoutCount = (uint)value.Length;
				refSetLayouts = new NativeReference ((int)(sizeof(UInt64)*value.Length));
				m->SetLayouts = refSetLayouts.Handle;
				unsafe
				{
					UInt64* ptr = (UInt64*)m->SetLayouts;
					for (int i = 0; i < value.Length; i++)
						ptr [i] = value [i].m;
				}
			}
		}

		public UInt32 PushConstantRangeCount {
			get { return m->PushConstantRangeCount; }
			set { m->PushConstantRangeCount = value; }
		}

		NativeReference refPushConstantRanges;
		public PushConstantRange[] PushConstantRanges {
			get {
				if (m->PushConstantRangeCount == 0)
					return null;
				var values = new PushConstantRange [m->PushConstantRangeCount];
				unsafe
				{
					PushConstantRange* ptr = (PushConstantRange*)m->PushConstantRanges;
					for (int i = 0; i < values.Length; i++) 
						values [i] = ptr [i];
				}
				return values;
			}

			set {
				if (value == null) {
					m->PushConstantRangeCount = 0;
					m->PushConstantRanges = IntPtr.Zero;
					return;
				}
				m->PushConstantRangeCount = (uint)value.Length;
				refPushConstantRanges = new NativeReference ((int)(sizeof(PushConstantRange)*value.Length));
				m->PushConstantRanges = refPushConstantRanges.Handle;
				unsafe
				{
					PushConstantRange* ptr = (PushConstantRange*)m->PushConstantRanges;
					for (int i = 0; i < value.Length; i++)
						ptr [i] = value [i];
				}
			}
		}
		internal Interop.PipelineLayoutCreateInfo* m {

			get {
				return (Interop.PipelineLayoutCreateInfo*)native.Handle;
			}
		}

		public PipelineLayoutCreateInfo ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.PipelineLayoutCreateInfo));
			Initialize ();
		}

		internal PipelineLayoutCreateInfo (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}

		override public void Dispose (bool disposing)
		{
			if (!disposing)
				return;
			refSetLayouts?.Dispose();
			refSetLayouts = null;
			refPushConstantRanges?.Dispose();
			refPushConstantRanges = null;
			base.Dispose (disposing);
		}

		internal void Initialize ()
		{
			m->SType = StructureType.PipelineLayoutCreateInfo;
		}

	}

	unsafe public partial class SamplerCreateInfo : MarshalledObject
	{
		public UInt32 Flags {
			get { return m->Flags; }
			set { m->Flags = value; }
		}

		public Filter MagFilter {
			get { return m->MagFilter; }
			set { m->MagFilter = value; }
		}

		public Filter MinFilter {
			get { return m->MinFilter; }
			set { m->MinFilter = value; }
		}

		public SamplerMipmapMode MipmapMode {
			get { return m->MipmapMode; }
			set { m->MipmapMode = value; }
		}

		public SamplerAddressMode AddressModeU {
			get { return m->AddressModeU; }
			set { m->AddressModeU = value; }
		}

		public SamplerAddressMode AddressModeV {
			get { return m->AddressModeV; }
			set { m->AddressModeV = value; }
		}

		public SamplerAddressMode AddressModeW {
			get { return m->AddressModeW; }
			set { m->AddressModeW = value; }
		}

		public float MipLodBias {
			get { return m->MipLodBias; }
			set { m->MipLodBias = value; }
		}

		public bool AnisotropyEnable {
			get { return m->AnisotropyEnable; }
			set { m->AnisotropyEnable = value; }
		}

		public float MaxAnisotropy {
			get { return m->MaxAnisotropy; }
			set { m->MaxAnisotropy = value; }
		}

		public bool CompareEnable {
			get { return m->CompareEnable; }
			set { m->CompareEnable = value; }
		}

		public CompareOp CompareOp {
			get { return m->CompareOp; }
			set { m->CompareOp = value; }
		}

		public float MinLod {
			get { return m->MinLod; }
			set { m->MinLod = value; }
		}

		public float MaxLod {
			get { return m->MaxLod; }
			set { m->MaxLod = value; }
		}

		public BorderColor BorderColor {
			get { return m->BorderColor; }
			set { m->BorderColor = value; }
		}

		public bool UnnormalizedCoordinates {
			get { return m->UnnormalizedCoordinates; }
			set { m->UnnormalizedCoordinates = value; }
		}
		internal Interop.SamplerCreateInfo* m {

			get {
				return (Interop.SamplerCreateInfo*)native.Handle;
			}
		}

		public SamplerCreateInfo ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.SamplerCreateInfo));
			Initialize ();
		}

		internal SamplerCreateInfo (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}


		internal void Initialize ()
		{
			m->SType = StructureType.SamplerCreateInfo;
		}

	}

	unsafe public partial class CommandPoolCreateInfo : MarshalledObject
	{
		public CommandPoolCreateFlags Flags {
			get { return m->Flags; }
			set { m->Flags = value; }
		}

		public UInt32 QueueFamilyIndex {
			get { return m->QueueFamilyIndex; }
			set { m->QueueFamilyIndex = value; }
		}
		internal Interop.CommandPoolCreateInfo* m {

			get {
				return (Interop.CommandPoolCreateInfo*)native.Handle;
			}
		}

		public CommandPoolCreateInfo ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.CommandPoolCreateInfo));
			Initialize ();
		}

		internal CommandPoolCreateInfo (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}


		internal void Initialize ()
		{
			m->SType = StructureType.CommandPoolCreateInfo;
		}

	}

	unsafe public partial class CommandBufferAllocateInfo : MarshalledObject
	{
		CommandPool lCommandPool;
		public CommandPool CommandPool {
			get { return lCommandPool; }
			set { lCommandPool = value; m->CommandPool = value != null ? (UInt64)value.m : default(UInt64); }
		}

		public CommandBufferLevel Level {
			get { return m->Level; }
			set { m->Level = value; }
		}

		public UInt32 CommandBufferCount {
			get { return m->CommandBufferCount; }
			set { m->CommandBufferCount = value; }
		}
		internal Interop.CommandBufferAllocateInfo* m {

			get {
				return (Interop.CommandBufferAllocateInfo*)native.Handle;
			}
		}

		public CommandBufferAllocateInfo ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.CommandBufferAllocateInfo));
			Initialize ();
		}

		internal CommandBufferAllocateInfo (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}


		internal void Initialize ()
		{
			m->SType = StructureType.CommandBufferAllocateInfo;
		}

	}

	unsafe public partial class CommandBufferInheritanceInfo : MarshalledObject
	{
		RenderPass lRenderPass;
		public RenderPass RenderPass {
			get { return lRenderPass; }
			set { lRenderPass = value; m->RenderPass = value != null ? (UInt64)value.m : default(UInt64); }
		}

		public UInt32 Subpass {
			get { return m->Subpass; }
			set { m->Subpass = value; }
		}

		Framebuffer lFramebuffer;
		public Framebuffer Framebuffer {
			get { return lFramebuffer; }
			set { lFramebuffer = value; m->Framebuffer = value != null ? (UInt64)value.m : default(UInt64); }
		}

		public bool OcclusionQueryEnable {
			get { return m->OcclusionQueryEnable; }
			set { m->OcclusionQueryEnable = value; }
		}

		public QueryControlFlags QueryFlags {
			get { return m->QueryFlags; }
			set { m->QueryFlags = value; }
		}

		public QueryPipelineStatisticFlags PipelineStatistics {
			get { return m->PipelineStatistics; }
			set { m->PipelineStatistics = value; }
		}
		internal Interop.CommandBufferInheritanceInfo* m {

			get {
				return (Interop.CommandBufferInheritanceInfo*)native.Handle;
			}
		}

		public CommandBufferInheritanceInfo ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.CommandBufferInheritanceInfo));
			Initialize ();
		}

		internal CommandBufferInheritanceInfo (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}


		internal void Initialize ()
		{
			m->SType = StructureType.CommandBufferInheritanceInfo;
		}

	}

	unsafe public partial class CommandBufferBeginInfo : MarshalledObject
	{
		public CommandBufferUsageFlags Flags {
			get { return m->Flags; }
			set { m->Flags = value; }
		}

		CommandBufferInheritanceInfo lInheritanceInfo;
		public CommandBufferInheritanceInfo InheritanceInfo {
			get { return lInheritanceInfo; }
			set { lInheritanceInfo = value; m->InheritanceInfo = value != null ? (IntPtr)value.m : default(IntPtr); }
		}
		internal Interop.CommandBufferBeginInfo* m {

			get {
				return (Interop.CommandBufferBeginInfo*)native.Handle;
			}
		}

		public CommandBufferBeginInfo ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.CommandBufferBeginInfo));
			Initialize ();
		}

		internal CommandBufferBeginInfo (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}



		internal void Initialize ()
		{
			m->SType = StructureType.CommandBufferBeginInfo;
		}

	}

	unsafe public partial class RenderPassBeginInfo : MarshalledObject
	{
		RenderPass lRenderPass;
		public RenderPass RenderPass {
			get { return lRenderPass; }
			set { lRenderPass = value; m->RenderPass = value != null ? (UInt64)value.m : default(UInt64); }
		}

		Framebuffer lFramebuffer;
		public Framebuffer Framebuffer {
			get { return lFramebuffer; }
			set { lFramebuffer = value; m->Framebuffer = value != null ? (UInt64)value.m : default(UInt64); }
		}

		public Rect2D RenderArea {
			get { return m->RenderArea; }
			set { m->RenderArea = value; }
		}

		public UInt32 ClearValueCount {
			get { return m->ClearValueCount; }
			set { m->ClearValueCount = value; }
		}

		NativeReference refClearValues;
		public ClearValue[] ClearValues {
			get {
				if (m->ClearValueCount == 0)
					return null;
				var values = new ClearValue [m->ClearValueCount];
				unsafe
				{
					Interop.ClearValue* ptr = (Interop.ClearValue*)m->ClearValues;
					for (int i = 0; i < values.Length; i++) {
						values [i] = new ClearValue ();
						*values [i].m = ptr [i];
					}
				}
				return values;
			}

			set {
				if (value == null) {
					m->ClearValueCount = 0;
					m->ClearValues = IntPtr.Zero;
					return;
				}
				m->ClearValueCount = (uint)value.Length;
				refClearValues = new NativeReference ((int)(sizeof(Interop.ClearValue)*value.Length));
				m->ClearValues = refClearValues.Handle;
				unsafe
				{
					Interop.ClearValue* ptr = (Interop.ClearValue*)m->ClearValues;
					for (int i = 0; i < value.Length; i++)
						ptr [i] = *value [i].m;
				}
			}
		}
		internal Interop.RenderPassBeginInfo* m {

			get {
				return (Interop.RenderPassBeginInfo*)native.Handle;
			}
		}

		public RenderPassBeginInfo ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.RenderPassBeginInfo));
			Initialize ();
		}

		internal RenderPassBeginInfo (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}

		override public void Dispose (bool disposing)
		{
			base.Dispose (disposing);
			refClearValues.Dispose ();
			refClearValues = null;
		}

		internal void Initialize ()
		{
			m->SType = StructureType.RenderPassBeginInfo;
		}

	}

	unsafe public partial struct ClearDepthStencilValue
	{
		public float Depth;
		public UInt32 Stencil;
	}

	unsafe public partial class ClearAttachment : MarshalledObject
	{
		public ImageAspectFlags AspectMask {
			get { return m->AspectMask; }
			set { m->AspectMask = value; }
		}

		public UInt32 ColorAttachment {
			get { return m->ColorAttachment; }
			set { m->ColorAttachment = value; }
		}

		ClearValue lClearValue;
		public ClearValue ClearValue {
			get { return lClearValue; }
			set { lClearValue = value; m->ClearValue = value != null ? *value.m : default(Interop.ClearValue); }
		}
		internal Interop.ClearAttachment* m {

			get {
				return (Interop.ClearAttachment*)native.Handle;
			}
		}

		public ClearAttachment ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.ClearAttachment));
			Initialize ();
		}

		internal ClearAttachment (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}


		internal void Initialize ()
		{
			lClearValue = new ClearValue (new NativePointer (native.Reference, (IntPtr)(&m->ClearValue)));
		}

	}

	unsafe public partial struct AttachmentDescription
	{
		public AttachmentDescriptionFlags Flags;
		public Format Format;
		public SampleCountFlags Samples;
		public AttachmentLoadOp LoadOp;
		public AttachmentStoreOp StoreOp;
		public AttachmentLoadOp StencilLoadOp;
		public AttachmentStoreOp StencilStoreOp;
		public ImageLayout InitialLayout;
		public ImageLayout FinalLayout;
	}

	unsafe public partial struct AttachmentReference
	{
		public UInt32 Attachment;
		public ImageLayout Layout;
	}

	unsafe public partial class SubpassDescription : MarshalledObject
	{
		public SubpassDescriptionFlags Flags {
			get { return m->Flags; }
			set { m->Flags = value; }
		}

		public PipelineBindPoint PipelineBindPoint {
			get { return m->PipelineBindPoint; }
			set { m->PipelineBindPoint = value; }
		}

		public UInt32 InputAttachmentCount {
			get { return m->InputAttachmentCount; }
			set { m->InputAttachmentCount = value; }
		}

		NativeReference refInputAttachments;
		public AttachmentReference[] InputAttachments {
			get {
				if (m->InputAttachmentCount == 0)
					return null;
				var values = new AttachmentReference [m->InputAttachmentCount];
				unsafe
				{
					AttachmentReference* ptr = (AttachmentReference*)m->InputAttachments;
					for (int i = 0; i < values.Length; i++) 
						values [i] = ptr [i];
				}
				return values;
			}

			set {
				if (value == null) {
					m->InputAttachmentCount = 0;
					m->InputAttachments = IntPtr.Zero;
					return;
				}
				m->InputAttachmentCount = (uint)value.Length;
				refInputAttachments = new NativeReference ((int)(sizeof(AttachmentReference)*value.Length));
				m->InputAttachments = refInputAttachments.Handle;
				unsafe
				{
					AttachmentReference* ptr = (AttachmentReference*)m->InputAttachments;
					for (int i = 0; i < value.Length; i++)
						ptr [i] = value [i];
				}
			}
		}

		public UInt32 ColorAttachmentCount {
			get { return m->ColorAttachmentCount; }
			set { m->ColorAttachmentCount = value; }
		}

		NativeReference refColorAttachments;
		public AttachmentReference[] ColorAttachments {
			get {
				if (m->ColorAttachmentCount == 0)
					return null;
				var values = new AttachmentReference [m->ColorAttachmentCount];
				unsafe
				{
					AttachmentReference* ptr = (AttachmentReference*)m->ColorAttachments;
					for (int i = 0; i < values.Length; i++) 
						values [i] = ptr [i];
				}
				return values;
			}

			set {
				if (value == null) {
					m->ColorAttachmentCount = 0;
					m->ColorAttachments = IntPtr.Zero;
					return;
				}
				m->ColorAttachmentCount = (uint)value.Length;
				refColorAttachments = new NativeReference ((int)(sizeof(AttachmentReference)*value.Length));
				m->ColorAttachments = refColorAttachments.Handle;
				unsafe
				{
					AttachmentReference* ptr = (AttachmentReference*)m->ColorAttachments;
					for (int i = 0; i < value.Length; i++)
						ptr [i] = value [i];
				}
			}
		}

		NativeReference refResolveAttachments;
		public AttachmentReference[] ResolveAttachments {
			get {
				if (m->ColorAttachmentCount == 0)
					return null;
				var values = new AttachmentReference [m->ColorAttachmentCount];
				unsafe
				{
					AttachmentReference* ptr = (AttachmentReference*)m->ResolveAttachments;
					for (int i = 0; i < values.Length; i++) 
						values [i] = ptr [i];
				}
				return values;
			}

			set {
				if (value == null) {
					m->ColorAttachmentCount = 0;
					m->ResolveAttachments = IntPtr.Zero;
					return;
				}
				m->ColorAttachmentCount = (uint)value.Length;
				refResolveAttachments = new NativeReference ((int)(sizeof(AttachmentReference)*value.Length));
				m->ResolveAttachments = refResolveAttachments.Handle;
				unsafe
				{
					AttachmentReference* ptr = (AttachmentReference*)m->ResolveAttachments;
					for (int i = 0; i < value.Length; i++)
						ptr [i] = value [i];
				}
			}
		}

		public AttachmentReference DepthStencilAttachment {
			get { return (AttachmentReference)Interop.Structure.MarshalPointerToObject (m->DepthStencilAttachment, typeof (AttachmentReference)); }
			set { m->DepthStencilAttachment = Interop.Structure.MarshalObjectToPointer (m->DepthStencilAttachment, value); }
		}

		public UInt32 PreserveAttachmentCount {
			get { return m->PreserveAttachmentCount; }
			set { m->PreserveAttachmentCount = value; }
		}

		NativeReference refPreserveAttachments;
		public UInt32[] PreserveAttachments {
			get {
				if (m->PreserveAttachmentCount == 0)
					return null;
				var values = new UInt32 [m->PreserveAttachmentCount];
				unsafe
				{
					UInt32* ptr = (UInt32*)m->PreserveAttachments;
					for (int i = 0; i < values.Length; i++) 
						values [i] = ptr [i];
				}
				return values;
			}

			set {
				if (value == null) {
					m->PreserveAttachmentCount = 0;
					m->PreserveAttachments = IntPtr.Zero;
					return;
				}
				m->PreserveAttachmentCount = (uint)value.Length;
				refPreserveAttachments = new NativeReference ((int)(sizeof(UInt32)*value.Length));
				m->PreserveAttachments = refPreserveAttachments.Handle;
				unsafe
				{
					UInt32* ptr = (UInt32*)m->PreserveAttachments;
					for (int i = 0; i < value.Length; i++)
						ptr [i] = value [i];
				}
			}
		}
		internal Interop.SubpassDescription* m {

			get {
				return (Interop.SubpassDescription*)native.Handle;
			}
		}

		public SubpassDescription ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.SubpassDescription));
		}

		internal SubpassDescription (NativePointer pointer)
		{
			native = pointer;
		}

		override public void Dispose (bool disposing)
		{
			base.Dispose (disposing);
			if (!disposing)
				return;
			refInputAttachments?.Dispose ();
			refInputAttachments = null;
			refColorAttachments?.Dispose ();
			refColorAttachments = null;
			refResolveAttachments?.Dispose ();
			refResolveAttachments = null;
			refPreserveAttachments?.Dispose ();
			refPreserveAttachments = null;
		}
	}

	unsafe public partial struct SubpassDependency
	{
		public UInt32 SrcSubpass;
		public UInt32 DstSubpass;
		public PipelineStageFlags SrcStageMask;
		public PipelineStageFlags DstStageMask;
		public AccessFlags SrcAccessMask;
		public AccessFlags DstAccessMask;
		public DependencyFlags DependencyFlags;
	}

	unsafe public partial class RenderPassCreateInfo : MarshalledObject
	{
		public UInt32 Flags {
			get { return m->Flags; }
			set { m->Flags = value; }
		}

		public UInt32 AttachmentCount {
			get { return m->AttachmentCount; }
			set { m->AttachmentCount = value; }
		}

		NativeReference refAttachments;
		public AttachmentDescription[] Attachments {
			get {
				if (m->AttachmentCount == 0)
					return null;
				var values = new AttachmentDescription [m->AttachmentCount];
				unsafe
				{
					AttachmentDescription* ptr = (AttachmentDescription*)m->Attachments;
					for (int i = 0; i < values.Length; i++) 
						values [i] = ptr [i];
				}
				return values;
			}

			set {
				if (value == null) {
					m->AttachmentCount = 0;
					m->Attachments = IntPtr.Zero;
					return;
				}
				m->AttachmentCount = (uint)value.Length;
				refAttachments = new NativeReference ((int)(sizeof(AttachmentDescription)*value.Length));
				m->Attachments = refAttachments.Handle;
				unsafe
				{
					AttachmentDescription* ptr = (AttachmentDescription*)m->Attachments;
					for (int i = 0; i < value.Length; i++)
						ptr [i] = value [i];
				}
			}
		}

		public UInt32 SubpassCount {
			get { return m->SubpassCount; }
			set { m->SubpassCount = value; }
		}

		NativeReference refSubpasses;
		public SubpassDescription[] Subpasses {
			get {
				if (m->SubpassCount == 0)
					return null;
				var values = new SubpassDescription [m->SubpassCount];
				unsafe
				{
					Interop.SubpassDescription* ptr = (Interop.SubpassDescription*)m->Subpasses;
					for (int i = 0; i < values.Length; i++) {
						values [i] = new SubpassDescription ();
						*values [i].m = ptr [i];
					}
				}
				return values;
			}

			set {
				if (value == null) {
					m->SubpassCount = 0;
					m->Subpasses = IntPtr.Zero;
					return;
				}
				m->SubpassCount = (uint)value.Length;
				refSubpasses = new NativeReference ((int)(sizeof(Interop.SubpassDescription)*value.Length));
				m->Subpasses = refSubpasses.Handle;
				unsafe
				{
					Interop.SubpassDescription* ptr = (Interop.SubpassDescription*)m->Subpasses;
					for (int i = 0; i < value.Length; i++)
						ptr [i] = *value [i].m;
				}
			}
		}

		public UInt32 DependencyCount {
			get { return m->DependencyCount; }
			set { m->DependencyCount = value; }
		}

		NativeReference refDependencies;
		public SubpassDependency[] Dependencies {
			get {
				if (m->DependencyCount == 0)
					return null;
				var values = new SubpassDependency [m->DependencyCount];
				unsafe
				{
					SubpassDependency* ptr = (SubpassDependency*)m->Dependencies;
					for (int i = 0; i < values.Length; i++) 
						values [i] = ptr [i];
				}
				return values;
			}

			set {
				if (value == null) {
					m->DependencyCount = 0;
					m->Dependencies = IntPtr.Zero;
					return;
				}
				m->DependencyCount = (uint)value.Length;
				refDependencies = new NativeReference ((int)(sizeof(SubpassDependency)*value.Length));
				m->Dependencies = refDependencies.Handle;
				unsafe
				{
					SubpassDependency* ptr = (SubpassDependency*)m->Dependencies;
					for (int i = 0; i < value.Length; i++)
						ptr [i] = value [i];
				}
			}
		}
		internal Interop.RenderPassCreateInfo* m {

			get {
				return (Interop.RenderPassCreateInfo*)native.Handle;
			}
		}

		public RenderPassCreateInfo ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.RenderPassCreateInfo));
			Initialize ();
		}

		internal RenderPassCreateInfo (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}

		override public void Dispose (bool disposing)
		{
			base.Dispose (disposing);
			if (!disposing)
				return;
			refAttachments.Dispose ();
			refAttachments = null;
			refSubpasses.Dispose ();
			refSubpasses = null;
			refDependencies.Dispose ();
			refDependencies = null;
		}

		internal void Initialize ()
		{
			m->SType = StructureType.RenderPassCreateInfo;
		}

	}

	unsafe public partial class EventCreateInfo : MarshalledObject
	{
		public UInt32 Flags {
			get { return m->Flags; }
			set { m->Flags = value; }
		}
		internal Interop.EventCreateInfo* m {

			get {
				return (Interop.EventCreateInfo*)native.Handle;
			}
		}

		public EventCreateInfo ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.EventCreateInfo));
			Initialize ();
		}

		internal EventCreateInfo (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}


		internal void Initialize ()
		{
			m->SType = StructureType.EventCreateInfo;
		}

	}

	unsafe public partial class FenceCreateInfo : MarshalledObject
	{
		public FenceCreateFlags Flags {
			get { return m->Flags; }
			set { m->Flags = value; }
		}
		internal Interop.FenceCreateInfo* m {

			get {
				return (Interop.FenceCreateInfo*)native.Handle;
			}
		}

		public FenceCreateInfo ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.FenceCreateInfo));
			Initialize ();
		}

		internal FenceCreateInfo (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}


		internal void Initialize ()
		{
			m->SType = StructureType.FenceCreateInfo;
		}

	}

	unsafe public partial struct PhysicalDeviceFeatures
	{
		public Bool32 RobustBufferAccess;
		public Bool32 FullDrawIndexUint32;
		public Bool32 ImageCubeArray;
		public Bool32 IndependentBlend;
		public Bool32 GeometryShader;
		public Bool32 TessellationShader;
		public Bool32 SampleRateShading;
		public Bool32 DualSrcBlend;
		public Bool32 LogicOp;
		public Bool32 MultiDrawIndirect;
		public Bool32 DrawIndirectFirstInstance;
		public Bool32 DepthClamp;
		public Bool32 DepthBiasClamp;
		public Bool32 FillModeNonSolid;
		public Bool32 DepthBounds;
		public Bool32 WideLines;
		public Bool32 LargePoints;
		public Bool32 AlphaToOne;
		public Bool32 MultiViewport;
		public Bool32 SamplerAnisotropy;
		public Bool32 TextureCompressionEtc2;
		public Bool32 TextureCompressionAstcLdr;
		public Bool32 TextureCompressionBc;
		public Bool32 OcclusionQueryPrecise;
		public Bool32 PipelineStatisticsQuery;
		public Bool32 VertexPipelineStoresAndAtomics;
		public Bool32 FragmentStoresAndAtomics;
		public Bool32 ShaderTessellationAndGeometryPointSize;
		public Bool32 ShaderImageGatherExtended;
		public Bool32 ShaderStorageImageExtendedFormats;
		public Bool32 ShaderStorageImageMultisample;
		public Bool32 ShaderStorageImageReadWithoutFormat;
		public Bool32 ShaderStorageImageWriteWithoutFormat;
		public Bool32 ShaderUniformBufferArrayDynamicIndexing;
		public Bool32 ShaderSampledImageArrayDynamicIndexing;
		public Bool32 ShaderStorageBufferArrayDynamicIndexing;
		public Bool32 ShaderStorageImageArrayDynamicIndexing;
		public Bool32 ShaderClipDistance;
		public Bool32 ShaderCullDistance;
		public Bool32 ShaderFloat64;
		public Bool32 ShaderInt64;
		public Bool32 ShaderInt16;
		public Bool32 ShaderResourceResidency;
		public Bool32 ShaderResourceMinLod;
		public Bool32 SparseBinding;
		public Bool32 SparseResidencyBuffer;
		public Bool32 SparseResidencyImage2D;
		public Bool32 SparseResidencyImage3D;
		public Bool32 SparseResidency2Samples;
		public Bool32 SparseResidency4Samples;
		public Bool32 SparseResidency8Samples;
		public Bool32 SparseResidency16Samples;
		public Bool32 SparseResidencyAliased;
		public Bool32 VariableMultisampleRate;
		public Bool32 InheritedQueries;
	}

	unsafe public partial struct PhysicalDeviceSparseProperties
	{
		public Bool32 ResidencyStandard2DBlockShape;
		public Bool32 ResidencyStandard2DMultisampleBlockShape;
		public Bool32 ResidencyStandard3DBlockShape;
		public Bool32 ResidencyAlignedMipSize;
		public Bool32 ResidencyNonResidentStrict;
	}

	unsafe public partial class PhysicalDeviceLimits : MarshalledObject
	{
		public UInt32 MaxImageDimension1D {
			get { return m->MaxImageDimension1D; }
			set { m->MaxImageDimension1D = value; }
		}

		public UInt32 MaxImageDimension2D {
			get { return m->MaxImageDimension2D; }
			set { m->MaxImageDimension2D = value; }
		}

		public UInt32 MaxImageDimension3D {
			get { return m->MaxImageDimension3D; }
			set { m->MaxImageDimension3D = value; }
		}

		public UInt32 MaxImageDimensionCube {
			get { return m->MaxImageDimensionCube; }
			set { m->MaxImageDimensionCube = value; }
		}

		public UInt32 MaxImageArrayLayers {
			get { return m->MaxImageArrayLayers; }
			set { m->MaxImageArrayLayers = value; }
		}

		public UInt32 MaxTexelBufferElements {
			get { return m->MaxTexelBufferElements; }
			set { m->MaxTexelBufferElements = value; }
		}

		public UInt32 MaxUniformBufferRange {
			get { return m->MaxUniformBufferRange; }
			set { m->MaxUniformBufferRange = value; }
		}

		public UInt32 MaxStorageBufferRange {
			get { return m->MaxStorageBufferRange; }
			set { m->MaxStorageBufferRange = value; }
		}

		public UInt32 MaxPushConstantsSize {
			get { return m->MaxPushConstantsSize; }
			set { m->MaxPushConstantsSize = value; }
		}

		public UInt32 MaxMemoryAllocationCount {
			get { return m->MaxMemoryAllocationCount; }
			set { m->MaxMemoryAllocationCount = value; }
		}

		public UInt32 MaxSamplerAllocationCount {
			get { return m->MaxSamplerAllocationCount; }
			set { m->MaxSamplerAllocationCount = value; }
		}

		public DeviceSize BufferImageGranularity {
			get { return m->BufferImageGranularity; }
			set { m->BufferImageGranularity = value; }
		}

		public DeviceSize SparseAddressSpaceSize {
			get { return m->SparseAddressSpaceSize; }
			set { m->SparseAddressSpaceSize = value; }
		}

		public UInt32 MaxBoundDescriptorSets {
			get { return m->MaxBoundDescriptorSets; }
			set { m->MaxBoundDescriptorSets = value; }
		}

		public UInt32 MaxPerStageDescriptorSamplers {
			get { return m->MaxPerStageDescriptorSamplers; }
			set { m->MaxPerStageDescriptorSamplers = value; }
		}

		public UInt32 MaxPerStageDescriptorUniformBuffers {
			get { return m->MaxPerStageDescriptorUniformBuffers; }
			set { m->MaxPerStageDescriptorUniformBuffers = value; }
		}

		public UInt32 MaxPerStageDescriptorStorageBuffers {
			get { return m->MaxPerStageDescriptorStorageBuffers; }
			set { m->MaxPerStageDescriptorStorageBuffers = value; }
		}

		public UInt32 MaxPerStageDescriptorSampledImages {
			get { return m->MaxPerStageDescriptorSampledImages; }
			set { m->MaxPerStageDescriptorSampledImages = value; }
		}

		public UInt32 MaxPerStageDescriptorStorageImages {
			get { return m->MaxPerStageDescriptorStorageImages; }
			set { m->MaxPerStageDescriptorStorageImages = value; }
		}

		public UInt32 MaxPerStageDescriptorInputAttachments {
			get { return m->MaxPerStageDescriptorInputAttachments; }
			set { m->MaxPerStageDescriptorInputAttachments = value; }
		}

		public UInt32 MaxPerStageResources {
			get { return m->MaxPerStageResources; }
			set { m->MaxPerStageResources = value; }
		}

		public UInt32 MaxDescriptorSetSamplers {
			get { return m->MaxDescriptorSetSamplers; }
			set { m->MaxDescriptorSetSamplers = value; }
		}

		public UInt32 MaxDescriptorSetUniformBuffers {
			get { return m->MaxDescriptorSetUniformBuffers; }
			set { m->MaxDescriptorSetUniformBuffers = value; }
		}

		public UInt32 MaxDescriptorSetUniformBuffersDynamic {
			get { return m->MaxDescriptorSetUniformBuffersDynamic; }
			set { m->MaxDescriptorSetUniformBuffersDynamic = value; }
		}

		public UInt32 MaxDescriptorSetStorageBuffers {
			get { return m->MaxDescriptorSetStorageBuffers; }
			set { m->MaxDescriptorSetStorageBuffers = value; }
		}

		public UInt32 MaxDescriptorSetStorageBuffersDynamic {
			get { return m->MaxDescriptorSetStorageBuffersDynamic; }
			set { m->MaxDescriptorSetStorageBuffersDynamic = value; }
		}

		public UInt32 MaxDescriptorSetSampledImages {
			get { return m->MaxDescriptorSetSampledImages; }
			set { m->MaxDescriptorSetSampledImages = value; }
		}

		public UInt32 MaxDescriptorSetStorageImages {
			get { return m->MaxDescriptorSetStorageImages; }
			set { m->MaxDescriptorSetStorageImages = value; }
		}

		public UInt32 MaxDescriptorSetInputAttachments {
			get { return m->MaxDescriptorSetInputAttachments; }
			set { m->MaxDescriptorSetInputAttachments = value; }
		}

		public UInt32 MaxVertexInputAttributes {
			get { return m->MaxVertexInputAttributes; }
			set { m->MaxVertexInputAttributes = value; }
		}

		public UInt32 MaxVertexInputBindings {
			get { return m->MaxVertexInputBindings; }
			set { m->MaxVertexInputBindings = value; }
		}

		public UInt32 MaxVertexInputAttributeOffset {
			get { return m->MaxVertexInputAttributeOffset; }
			set { m->MaxVertexInputAttributeOffset = value; }
		}

		public UInt32 MaxVertexInputBindingStride {
			get { return m->MaxVertexInputBindingStride; }
			set { m->MaxVertexInputBindingStride = value; }
		}

		public UInt32 MaxVertexOutputComponents {
			get { return m->MaxVertexOutputComponents; }
			set { m->MaxVertexOutputComponents = value; }
		}

		public UInt32 MaxTessellationGenerationLevel {
			get { return m->MaxTessellationGenerationLevel; }
			set { m->MaxTessellationGenerationLevel = value; }
		}

		public UInt32 MaxTessellationPatchSize {
			get { return m->MaxTessellationPatchSize; }
			set { m->MaxTessellationPatchSize = value; }
		}

		public UInt32 MaxTessellationControlPerVertexInputComponents {
			get { return m->MaxTessellationControlPerVertexInputComponents; }
			set { m->MaxTessellationControlPerVertexInputComponents = value; }
		}

		public UInt32 MaxTessellationControlPerVertexOutputComponents {
			get { return m->MaxTessellationControlPerVertexOutputComponents; }
			set { m->MaxTessellationControlPerVertexOutputComponents = value; }
		}

		public UInt32 MaxTessellationControlPerPatchOutputComponents {
			get { return m->MaxTessellationControlPerPatchOutputComponents; }
			set { m->MaxTessellationControlPerPatchOutputComponents = value; }
		}

		public UInt32 MaxTessellationControlTotalOutputComponents {
			get { return m->MaxTessellationControlTotalOutputComponents; }
			set { m->MaxTessellationControlTotalOutputComponents = value; }
		}

		public UInt32 MaxTessellationEvaluationInputComponents {
			get { return m->MaxTessellationEvaluationInputComponents; }
			set { m->MaxTessellationEvaluationInputComponents = value; }
		}

		public UInt32 MaxTessellationEvaluationOutputComponents {
			get { return m->MaxTessellationEvaluationOutputComponents; }
			set { m->MaxTessellationEvaluationOutputComponents = value; }
		}

		public UInt32 MaxGeometryShaderInvocations {
			get { return m->MaxGeometryShaderInvocations; }
			set { m->MaxGeometryShaderInvocations = value; }
		}

		public UInt32 MaxGeometryInputComponents {
			get { return m->MaxGeometryInputComponents; }
			set { m->MaxGeometryInputComponents = value; }
		}

		public UInt32 MaxGeometryOutputComponents {
			get { return m->MaxGeometryOutputComponents; }
			set { m->MaxGeometryOutputComponents = value; }
		}

		public UInt32 MaxGeometryOutputVertices {
			get { return m->MaxGeometryOutputVertices; }
			set { m->MaxGeometryOutputVertices = value; }
		}

		public UInt32 MaxGeometryTotalOutputComponents {
			get { return m->MaxGeometryTotalOutputComponents; }
			set { m->MaxGeometryTotalOutputComponents = value; }
		}

		public UInt32 MaxFragmentInputComponents {
			get { return m->MaxFragmentInputComponents; }
			set { m->MaxFragmentInputComponents = value; }
		}

		public UInt32 MaxFragmentOutputAttachments {
			get { return m->MaxFragmentOutputAttachments; }
			set { m->MaxFragmentOutputAttachments = value; }
		}

		public UInt32 MaxFragmentDualSrcAttachments {
			get { return m->MaxFragmentDualSrcAttachments; }
			set { m->MaxFragmentDualSrcAttachments = value; }
		}

		public UInt32 MaxFragmentCombinedOutputResources {
			get { return m->MaxFragmentCombinedOutputResources; }
			set { m->MaxFragmentCombinedOutputResources = value; }
		}

		public UInt32 MaxComputeSharedMemorySize {
			get { return m->MaxComputeSharedMemorySize; }
			set { m->MaxComputeSharedMemorySize = value; }
		}

		public UInt32[] MaxComputeWorkGroupCount {
			get {
				var arr = new UInt32 [3];
				for (int i = 0; i < 3; i++)
					arr [i] = m->MaxComputeWorkGroupCount [i];
				return arr;
			}

			set {
				if (value.Length > 3)
					throw new Exception ("array too long");
				for (int i = 0; i < value.Length; i++)
					m->MaxComputeWorkGroupCount [i] = value [i];
				for (int i = value.Length; i < 3; i++)
					m->MaxComputeWorkGroupCount [i] = 0;
			}
		}

		public UInt32 MaxComputeWorkGroupInvocations {
			get { return m->MaxComputeWorkGroupInvocations; }
			set { m->MaxComputeWorkGroupInvocations = value; }
		}

		public UInt32[] MaxComputeWorkGroupSize {
			get {
				var arr = new UInt32 [3];
				for (int i = 0; i < 3; i++)
					arr [i] = m->MaxComputeWorkGroupSize [i];
				return arr;
			}

			set {
				if (value.Length > 3)
					throw new Exception ("array too long");
				for (int i = 0; i < value.Length; i++)
					m->MaxComputeWorkGroupSize [i] = value [i];
				for (int i = value.Length; i < 3; i++)
					m->MaxComputeWorkGroupSize [i] = 0;
			}
		}

		public UInt32 SubPixelPrecisionBits {
			get { return m->SubPixelPrecisionBits; }
			set { m->SubPixelPrecisionBits = value; }
		}

		public UInt32 SubTexelPrecisionBits {
			get { return m->SubTexelPrecisionBits; }
			set { m->SubTexelPrecisionBits = value; }
		}

		public UInt32 MipmapPrecisionBits {
			get { return m->MipmapPrecisionBits; }
			set { m->MipmapPrecisionBits = value; }
		}

		public UInt32 MaxDrawIndexedIndexValue {
			get { return m->MaxDrawIndexedIndexValue; }
			set { m->MaxDrawIndexedIndexValue = value; }
		}

		public UInt32 MaxDrawIndirectCount {
			get { return m->MaxDrawIndirectCount; }
			set { m->MaxDrawIndirectCount = value; }
		}

		public float MaxSamplerLodBias {
			get { return m->MaxSamplerLodBias; }
			set { m->MaxSamplerLodBias = value; }
		}

		public float MaxSamplerAnisotropy {
			get { return m->MaxSamplerAnisotropy; }
			set { m->MaxSamplerAnisotropy = value; }
		}

		public UInt32 MaxViewports {
			get { return m->MaxViewports; }
			set { m->MaxViewports = value; }
		}

		public UInt32[] MaxViewportDimensions {
			get {
				var arr = new UInt32 [2];
				for (int i = 0; i < 2; i++)
					arr [i] = m->MaxViewportDimensions [i];
				return arr;
			}

			set {
				if (value.Length > 2)
					throw new Exception ("array too long");
				for (int i = 0; i < value.Length; i++)
					m->MaxViewportDimensions [i] = value [i];
				for (int i = value.Length; i < 2; i++)
					m->MaxViewportDimensions [i] = 0;
			}
		}

		public float[] ViewportBoundsRange {
			get {
				var arr = new float [2];
				for (int i = 0; i < 2; i++)
					arr [i] = m->ViewportBoundsRange [i];
				return arr;
			}

			set {
				if (value.Length > 2)
					throw new Exception ("array too long");
				for (int i = 0; i < value.Length; i++)
					m->ViewportBoundsRange [i] = value [i];
				for (int i = value.Length; i < 2; i++)
					m->ViewportBoundsRange [i] = 0;
			}
		}

		public UInt32 ViewportSubPixelBits {
			get { return m->ViewportSubPixelBits; }
			set { m->ViewportSubPixelBits = value; }
		}

		public UIntPtr MinMemoryMapAlignment {
			get { return m->MinMemoryMapAlignment; }
			set { m->MinMemoryMapAlignment = value; }
		}

		public DeviceSize MinTexelBufferOffsetAlignment {
			get { return m->MinTexelBufferOffsetAlignment; }
			set { m->MinTexelBufferOffsetAlignment = value; }
		}

		public DeviceSize MinUniformBufferOffsetAlignment {
			get { return m->MinUniformBufferOffsetAlignment; }
			set { m->MinUniformBufferOffsetAlignment = value; }
		}

		public DeviceSize MinStorageBufferOffsetAlignment {
			get { return m->MinStorageBufferOffsetAlignment; }
			set { m->MinStorageBufferOffsetAlignment = value; }
		}

		public Int32 MinTexelOffset {
			get { return m->MinTexelOffset; }
			set { m->MinTexelOffset = value; }
		}

		public UInt32 MaxTexelOffset {
			get { return m->MaxTexelOffset; }
			set { m->MaxTexelOffset = value; }
		}

		public Int32 MinTexelGatherOffset {
			get { return m->MinTexelGatherOffset; }
			set { m->MinTexelGatherOffset = value; }
		}

		public UInt32 MaxTexelGatherOffset {
			get { return m->MaxTexelGatherOffset; }
			set { m->MaxTexelGatherOffset = value; }
		}

		public float MinInterpolationOffset {
			get { return m->MinInterpolationOffset; }
			set { m->MinInterpolationOffset = value; }
		}

		public float MaxInterpolationOffset {
			get { return m->MaxInterpolationOffset; }
			set { m->MaxInterpolationOffset = value; }
		}

		public UInt32 SubPixelInterpolationOffsetBits {
			get { return m->SubPixelInterpolationOffsetBits; }
			set { m->SubPixelInterpolationOffsetBits = value; }
		}

		public UInt32 MaxFramebufferWidth {
			get { return m->MaxFramebufferWidth; }
			set { m->MaxFramebufferWidth = value; }
		}

		public UInt32 MaxFramebufferHeight {
			get { return m->MaxFramebufferHeight; }
			set { m->MaxFramebufferHeight = value; }
		}

		public UInt32 MaxFramebufferLayers {
			get { return m->MaxFramebufferLayers; }
			set { m->MaxFramebufferLayers = value; }
		}

		public SampleCountFlags FramebufferColorSampleCounts {
			get { return m->FramebufferColorSampleCounts; }
			set { m->FramebufferColorSampleCounts = value; }
		}

		public SampleCountFlags FramebufferDepthSampleCounts {
			get { return m->FramebufferDepthSampleCounts; }
			set { m->FramebufferDepthSampleCounts = value; }
		}

		public SampleCountFlags FramebufferStencilSampleCounts {
			get { return m->FramebufferStencilSampleCounts; }
			set { m->FramebufferStencilSampleCounts = value; }
		}

		public SampleCountFlags FramebufferNoAttachmentsSampleCounts {
			get { return m->FramebufferNoAttachmentsSampleCounts; }
			set { m->FramebufferNoAttachmentsSampleCounts = value; }
		}

		public UInt32 MaxColorAttachments {
			get { return m->MaxColorAttachments; }
			set { m->MaxColorAttachments = value; }
		}

		public SampleCountFlags SampledImageColorSampleCounts {
			get { return m->SampledImageColorSampleCounts; }
			set { m->SampledImageColorSampleCounts = value; }
		}

		public SampleCountFlags SampledImageIntegerSampleCounts {
			get { return m->SampledImageIntegerSampleCounts; }
			set { m->SampledImageIntegerSampleCounts = value; }
		}

		public SampleCountFlags SampledImageDepthSampleCounts {
			get { return m->SampledImageDepthSampleCounts; }
			set { m->SampledImageDepthSampleCounts = value; }
		}

		public SampleCountFlags SampledImageStencilSampleCounts {
			get { return m->SampledImageStencilSampleCounts; }
			set { m->SampledImageStencilSampleCounts = value; }
		}

		public SampleCountFlags StorageImageSampleCounts {
			get { return m->StorageImageSampleCounts; }
			set { m->StorageImageSampleCounts = value; }
		}

		public UInt32 MaxSampleMaskWords {
			get { return m->MaxSampleMaskWords; }
			set { m->MaxSampleMaskWords = value; }
		}

		public bool TimestampComputeAndGraphics {
			get { return m->TimestampComputeAndGraphics; }
			set { m->TimestampComputeAndGraphics = value; }
		}

		public float TimestampPeriod {
			get { return m->TimestampPeriod; }
			set { m->TimestampPeriod = value; }
		}

		public UInt32 MaxClipDistances {
			get { return m->MaxClipDistances; }
			set { m->MaxClipDistances = value; }
		}

		public UInt32 MaxCullDistances {
			get { return m->MaxCullDistances; }
			set { m->MaxCullDistances = value; }
		}

		public UInt32 MaxCombinedClipAndCullDistances {
			get { return m->MaxCombinedClipAndCullDistances; }
			set { m->MaxCombinedClipAndCullDistances = value; }
		}

		public UInt32 DiscreteQueuePriorities {
			get { return m->DiscreteQueuePriorities; }
			set { m->DiscreteQueuePriorities = value; }
		}

		public float[] PointSizeRange {
			get {
				var arr = new float [2];
				for (int i = 0; i < 2; i++)
					arr [i] = m->PointSizeRange [i];
				return arr;
			}

			set {
				if (value.Length > 2)
					throw new Exception ("array too long");
				for (int i = 0; i < value.Length; i++)
					m->PointSizeRange [i] = value [i];
				for (int i = value.Length; i < 2; i++)
					m->PointSizeRange [i] = 0;
			}
		}

		public float[] LineWidthRange {
			get {
				var arr = new float [2];
				for (int i = 0; i < 2; i++)
					arr [i] = m->LineWidthRange [i];
				return arr;
			}

			set {
				if (value.Length > 2)
					throw new Exception ("array too long");
				for (int i = 0; i < value.Length; i++)
					m->LineWidthRange [i] = value [i];
				for (int i = value.Length; i < 2; i++)
					m->LineWidthRange [i] = 0;
			}
		}

		public float PointSizeGranularity {
			get { return m->PointSizeGranularity; }
			set { m->PointSizeGranularity = value; }
		}

		public float LineWidthGranularity {
			get { return m->LineWidthGranularity; }
			set { m->LineWidthGranularity = value; }
		}

		public bool StrictLines {
			get { return m->StrictLines; }
			set { m->StrictLines = value; }
		}

		public bool StandardSampleLocations {
			get { return m->StandardSampleLocations; }
			set { m->StandardSampleLocations = value; }
		}

		public DeviceSize OptimalBufferCopyOffsetAlignment {
			get { return m->OptimalBufferCopyOffsetAlignment; }
			set { m->OptimalBufferCopyOffsetAlignment = value; }
		}

		public DeviceSize OptimalBufferCopyRowPitchAlignment {
			get { return m->OptimalBufferCopyRowPitchAlignment; }
			set { m->OptimalBufferCopyRowPitchAlignment = value; }
		}

		public DeviceSize NonCoherentAtomSize {
			get { return m->NonCoherentAtomSize; }
			set { m->NonCoherentAtomSize = value; }
		}
		internal Interop.PhysicalDeviceLimits* m {

			get {
				return (Interop.PhysicalDeviceLimits*)native.Handle;
			}
		}

		public PhysicalDeviceLimits ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.PhysicalDeviceLimits));
		}

		internal PhysicalDeviceLimits (NativePointer pointer)
		{
			native = pointer;
		}

	}

	unsafe public partial class SemaphoreCreateInfo : MarshalledObject
	{
		public UInt32 Flags {
			get { return m->Flags; }
			set { m->Flags = value; }
		}
		internal Interop.SemaphoreCreateInfo* m {

			get {
				return (Interop.SemaphoreCreateInfo*)native.Handle;
			}
		}

		public SemaphoreCreateInfo ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.SemaphoreCreateInfo));
			Initialize ();
		}

		internal SemaphoreCreateInfo (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}


		internal void Initialize ()
		{
			m->SType = StructureType.SemaphoreCreateInfo;
		}

	}

	unsafe public partial class QueryPoolCreateInfo : MarshalledObject
	{
		public UInt32 Flags {
			get { return m->Flags; }
			set { m->Flags = value; }
		}

		public QueryType QueryType {
			get { return m->QueryType; }
			set { m->QueryType = value; }
		}

		public UInt32 QueryCount {
			get { return m->QueryCount; }
			set { m->QueryCount = value; }
		}

		public QueryPipelineStatisticFlags PipelineStatistics {
			get { return m->PipelineStatistics; }
			set { m->PipelineStatistics = value; }
		}
		internal Interop.QueryPoolCreateInfo* m {

			get {
				return (Interop.QueryPoolCreateInfo*)native.Handle;
			}
		}

		public QueryPoolCreateInfo ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.QueryPoolCreateInfo));
			Initialize ();
		}

		internal QueryPoolCreateInfo (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}


		internal void Initialize ()
		{
			m->SType = StructureType.QueryPoolCreateInfo;
		}

	}

	unsafe public partial class FramebufferCreateInfo : MarshalledObject
	{
		public UInt32 Flags {
			get { return m->Flags; }
			set { m->Flags = value; }
		}

		RenderPass lRenderPass;
		public RenderPass RenderPass {
			get { return lRenderPass; }
			set { lRenderPass = value; m->RenderPass = value != null ? (UInt64)value.m : default(UInt64); }
		}

		public UInt32 AttachmentCount {
			get { return m->AttachmentCount; }
			set { m->AttachmentCount = value; }
		}

		NativeReference refAttachments;
		public ImageView[] Attachments {
			get {
				if (m->AttachmentCount == 0)
					return null;
				var values = new ImageView [m->AttachmentCount];
				unsafe
				{
					UInt64* ptr = (UInt64*)m->Attachments;
					for (int i = 0; i < values.Length; i++) {
						values [i] = new ImageView ();
						values [i].m = ptr [i];
					}
				}
				return values;
			}

			set {
				if (value == null) {
					m->AttachmentCount = 0;
					m->Attachments = IntPtr.Zero;
					return;
				}
				m->AttachmentCount = (uint)value.Length;
				refAttachments = new NativeReference ((int)(sizeof(UInt64)*value.Length));
				m->Attachments = refAttachments.Handle;
				unsafe
				{
					UInt64* ptr = (UInt64*)m->Attachments;
					for (int i = 0; i < value.Length; i++)
						ptr [i] = value [i].m;
				}
			}
		}

		public UInt32 Width {
			get { return m->Width; }
			set { m->Width = value; }
		}

		public UInt32 Height {
			get { return m->Height; }
			set { m->Height = value; }
		}

		public UInt32 Layers {
			get { return m->Layers; }
			set { m->Layers = value; }
		}
		internal Interop.FramebufferCreateInfo* m {

			get {
				return (Interop.FramebufferCreateInfo*)native.Handle;
			}
		}

		public FramebufferCreateInfo ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.FramebufferCreateInfo));
			Initialize ();
		}

		internal FramebufferCreateInfo (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}

		override public void Dispose (bool disposing)
		{
			base.Dispose (disposing);
			if (!disposing)
				return;
			refAttachments.Dispose ();
			refAttachments = null;
		}

		internal void Initialize ()
		{
			m->SType = StructureType.FramebufferCreateInfo;
		}

	}

	unsafe public partial struct DrawIndirectCommand
	{
		public UInt32 VertexCount;
		public UInt32 InstanceCount;
		public UInt32 FirstVertex;
		public UInt32 FirstInstance;
	}

	unsafe public partial struct DrawIndexedIndirectCommand
	{
		public UInt32 IndexCount;
		public UInt32 InstanceCount;
		public UInt32 FirstIndex;
		public Int32 VertexOffset;
		public UInt32 FirstInstance;
	}

	unsafe public partial struct DispatchIndirectCommand
	{
		public UInt32 X;
		public UInt32 Y;
		public UInt32 Z;
	}

	unsafe public partial class SubmitInfo : MarshalledObject
	{
		public UInt32 WaitSemaphoreCount {
			get { return m->WaitSemaphoreCount; }
			set { m->WaitSemaphoreCount = value; }
		}

		NativeReference refWaitSemaphores;
		public Semaphore[] WaitSemaphores {
			get {
				if (m->WaitSemaphoreCount == 0)
					return null;
				var values = new Semaphore [m->WaitSemaphoreCount];
				unsafe
				{
					UInt64* ptr = (UInt64*)m->WaitSemaphores;
					for (int i = 0; i < values.Length; i++) {
						values [i] = new Semaphore ();
						values [i].m = ptr [i];
					}
				}
				return values;
			}

			set {
				if (value == null) {
					m->WaitSemaphoreCount = 0;
					m->WaitSemaphores = IntPtr.Zero;
					return;
				}
				m->WaitSemaphoreCount = (uint)value.Length;
				refWaitSemaphores = new NativeReference ((int)(sizeof(UInt64)*value.Length));
				m->WaitSemaphores = refWaitSemaphores.Handle;
				unsafe
				{
					UInt64* ptr = (UInt64*)m->WaitSemaphores;
					for (int i = 0; i < value.Length; i++)
						ptr [i] = value [i].m;
				}
			}
		}

		NativeReference refWaitDstStageMask;
		public PipelineStageFlags[] WaitDstStageMask {
			get {
				if (m->WaitSemaphoreCount == 0)
					return null;
				var values = new PipelineStageFlags [m->WaitSemaphoreCount];
				unsafe
				{
					PipelineStageFlags* ptr = (PipelineStageFlags*)m->WaitDstStageMask;
					for (int i = 0; i < values.Length; i++) 
						values [i] = ptr [i];
				}
				return values;
			}

			set {
				if (value == null) {
					m->WaitSemaphoreCount = 0;
					m->WaitDstStageMask = IntPtr.Zero;
					return;
				}
				m->WaitSemaphoreCount = (uint)value.Length;
				refWaitDstStageMask = new NativeReference ((int)(sizeof(PipelineStageFlags)*value.Length));
				m->WaitDstStageMask = refWaitDstStageMask.Handle;
				unsafe
				{
					PipelineStageFlags* ptr = (PipelineStageFlags*)m->WaitDstStageMask;
					for (int i = 0; i < value.Length; i++)
						ptr [i] = value [i];
				}
			}
		}

		public UInt32 CommandBufferCount {
			get { return m->CommandBufferCount; }
			set { m->CommandBufferCount = value; }
		}

		NativeReference refCommandBuffers;
		public CommandBuffer[] CommandBuffers {
			get {
				if (m->CommandBufferCount == 0)
					return null;
				var values = new CommandBuffer [m->CommandBufferCount];
				unsafe
				{
					IntPtr* ptr = (IntPtr*)m->CommandBuffers;
					for (int i = 0; i < values.Length; i++) {
						values [i] = new CommandBuffer ();
						values [i].m = ptr [i];
					}
				}
				return values;
			}

			set {
				if (value == null) {
					m->CommandBufferCount = 0;
					m->CommandBuffers = IntPtr.Zero;
					return;
				}
				m->CommandBufferCount = (uint)value.Length;
				refCommandBuffers = new NativeReference ((int)(sizeof(IntPtr)*value.Length));
				m->CommandBuffers = refCommandBuffers.Handle;
				unsafe
				{
					IntPtr* ptr = (IntPtr*)m->CommandBuffers;
					for (int i = 0; i < value.Length; i++)
						ptr [i] = value [i].m;
				}
			}
		}

		public UInt32 SignalSemaphoreCount {
			get { return m->SignalSemaphoreCount; }
			set { m->SignalSemaphoreCount = value; }
		}

		NativeReference refSignalSemaphores;
		public Semaphore[] SignalSemaphores {
			get {
				if (m->SignalSemaphoreCount == 0)
					return null;
				var values = new Semaphore [m->SignalSemaphoreCount];
				unsafe
				{
					UInt64* ptr = (UInt64*)m->SignalSemaphores;
					for (int i = 0; i < values.Length; i++) {
						values [i] = new Semaphore ();
						values [i].m = ptr [i];
					}
				}
				return values;
			}

			set {
				if (value == null) {
					m->SignalSemaphoreCount = 0;
					m->SignalSemaphores = IntPtr.Zero;
					return;
				}
				m->SignalSemaphoreCount = (uint)value.Length;
				refSignalSemaphores = new NativeReference ((int)(sizeof(UInt64)*value.Length));
				m->SignalSemaphores = refSignalSemaphores.Handle;
				unsafe
				{
					UInt64* ptr = (UInt64*)m->SignalSemaphores;
					for (int i = 0; i < value.Length; i++)
						ptr [i] = value [i].m;
				}
			}
		}
		internal Interop.SubmitInfo* m {

			get {
				return (Interop.SubmitInfo*)native.Handle;
			}
		}

		public SubmitInfo ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.SubmitInfo));
			Initialize ();
		}

		internal SubmitInfo (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}

		override public void Dispose (bool disposing)
		{
			if (!disposing)
				return;
				refWaitSemaphores?.Dispose();
				refWaitSemaphores = null;
				refWaitDstStageMask?.Dispose();
				refWaitDstStageMask = null;
				refCommandBuffers?.Dispose();
				refCommandBuffers = null;
				refSignalSemaphores?.Dispose();
				refSignalSemaphores = null;

			base.Dispose(disposing);
		}

		internal void Initialize ()
		{
			m->SType = StructureType.SubmitInfo;
		}

	}

	unsafe public partial class DisplayPropertiesKHR : MarshalledObject
	{
		DisplayKHR lDisplay;
		public DisplayKHR Display {
			get { return lDisplay; }
			set { lDisplay = value; m->Display = value != null ? (UInt64)value.m : default(UInt64); }
		}

		public string DisplayName {
			get { return Marshal.PtrToStringAnsi (m->DisplayName); }
			set { m->DisplayName = Marshal.StringToHGlobalAnsi (value); }
		}

		public Extent2D PhysicalDimensions {
			get { return m->PhysicalDimensions; }
			set { m->PhysicalDimensions = value; }
		}

		public Extent2D PhysicalResolution {
			get { return m->PhysicalResolution; }
			set { m->PhysicalResolution = value; }
		}

		public SurfaceTransformFlagsKHR SupportedTransforms {
			get { return m->SupportedTransforms; }
			set { m->SupportedTransforms = value; }
		}

		public bool PlaneReorderPossible {
			get { return m->PlaneReorderPossible; }
			set { m->PlaneReorderPossible = value; }
		}

		public bool PersistentContent {
			get { return m->PersistentContent; }
			set { m->PersistentContent = value; }
		}
		internal Interop.DisplayPropertiesKHR* m {

			get {
				return (Interop.DisplayPropertiesKHR*)native.Handle;
			}
		}

		public DisplayPropertiesKHR ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.DisplayPropertiesKHR));
			Initialize ();
		}

		internal DisplayPropertiesKHR (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}


		internal void Initialize ()
		{
		}

	}

	unsafe public partial class DisplayPlanePropertiesKHR : MarshalledObject
	{
		DisplayKHR lCurrentDisplay;
		public DisplayKHR CurrentDisplay {
			get { return lCurrentDisplay; }
			set { lCurrentDisplay = value; m->CurrentDisplay = value != null ? (UInt64)value.m : default(UInt64); }
		}

		public UInt32 CurrentStackIndex {
			get { return m->CurrentStackIndex; }
			set { m->CurrentStackIndex = value; }
		}
		internal Interop.DisplayPlanePropertiesKHR* m {

			get {
				return (Interop.DisplayPlanePropertiesKHR*)native.Handle;
			}
		}

		public DisplayPlanePropertiesKHR ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.DisplayPlanePropertiesKHR));
			Initialize ();
		}

		internal DisplayPlanePropertiesKHR (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}


		internal void Initialize ()
		{
		}

	}

	unsafe public partial struct DisplayModeParametersKHR
	{
		public Extent2D VisibleRegion;
		public UInt32 RefreshRate;
	}

	unsafe public partial class DisplayModePropertiesKHR : MarshalledObject
	{
		DisplayModeKHR lDisplayMode;
		public DisplayModeKHR DisplayMode {
			get { return lDisplayMode; }
			set { lDisplayMode = value; m->DisplayMode = value != null ? (UInt64)value.m : default(UInt64); }
		}

		public DisplayModeParametersKHR Parameters {
			get { return m->Parameters; }
			set { m->Parameters = value; }
		}
		internal Interop.DisplayModePropertiesKHR* m {

			get {
				return (Interop.DisplayModePropertiesKHR*)native.Handle;
			}
		}

		public DisplayModePropertiesKHR ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.DisplayModePropertiesKHR));
			Initialize ();
		}

		internal DisplayModePropertiesKHR (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}


		internal void Initialize ()
		{
		}

	}

	unsafe public partial class DisplayModeCreateInfoKHR : MarshalledObject
	{
		public UInt32 Flags {
			get { return m->Flags; }
			set { m->Flags = value; }
		}

		public DisplayModeParametersKHR Parameters {
			get { return m->Parameters; }
			set { m->Parameters = value; }
		}
		internal Interop.DisplayModeCreateInfoKHR* m {

			get {
				return (Interop.DisplayModeCreateInfoKHR*)native.Handle;
			}
		}

		public DisplayModeCreateInfoKHR ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.DisplayModeCreateInfoKHR));
			Initialize ();
		}

		internal DisplayModeCreateInfoKHR (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}


		internal void Initialize ()
		{
			m->SType = StructureType.DisplayModeCreateInfoKHR;
		}

	}

	unsafe public partial struct DisplayPlaneCapabilitiesKHR
	{
		public DisplayPlaneAlphaFlagsKHR SupportedAlpha;
		public Offset2D MinSrcPosition;
		public Offset2D MaxSrcPosition;
		public Extent2D MinSrcExtent;
		public Extent2D MaxSrcExtent;
		public Offset2D MinDstPosition;
		public Offset2D MaxDstPosition;
		public Extent2D MinDstExtent;
		public Extent2D MaxDstExtent;
	}

	unsafe public partial class DisplaySurfaceCreateInfoKHR : MarshalledObject
	{
		public UInt32 Flags {
			get { return m->Flags; }
			set { m->Flags = value; }
		}

		DisplayModeKHR lDisplayMode;
		public DisplayModeKHR DisplayMode {
			get { return lDisplayMode; }
			set { lDisplayMode = value; m->DisplayMode = value != null ? (UInt64)value.m : default(UInt64); }
		}

		public UInt32 PlaneIndex {
			get { return m->PlaneIndex; }
			set { m->PlaneIndex = value; }
		}

		public UInt32 PlaneStackIndex {
			get { return m->PlaneStackIndex; }
			set { m->PlaneStackIndex = value; }
		}

		public SurfaceTransformFlagsKHR Transform {
			get { return m->Transform; }
			set { m->Transform = value; }
		}

		public float GlobalAlpha {
			get { return m->GlobalAlpha; }
			set { m->GlobalAlpha = value; }
		}

		public DisplayPlaneAlphaFlagsKHR AlphaMode {
			get { return m->AlphaMode; }
			set { m->AlphaMode = value; }
		}

		public Extent2D ImageExtent {
			get { return m->ImageExtent; }
			set { m->ImageExtent = value; }
		}
		internal Interop.DisplaySurfaceCreateInfoKHR* m {

			get {
				return (Interop.DisplaySurfaceCreateInfoKHR*)native.Handle;
			}
		}

		public DisplaySurfaceCreateInfoKHR ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.DisplaySurfaceCreateInfoKHR));
			Initialize ();
		}

		internal DisplaySurfaceCreateInfoKHR (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}


		internal void Initialize ()
		{
			m->SType = StructureType.DisplaySurfaceCreateInfoKHR;
		}

	}

	unsafe public partial class DisplayPresentInfoKHR : MarshalledObject
	{
		public Rect2D SrcRect {
			get { return m->SrcRect; }
			set { m->SrcRect = value; }
		}

		public Rect2D DstRect {
			get { return m->DstRect; }
			set { m->DstRect = value; }
		}

		public bool Persistent {
			get { return m->Persistent; }
			set { m->Persistent = value; }
		}
		internal Interop.DisplayPresentInfoKHR* m {

			get {
				return (Interop.DisplayPresentInfoKHR*)native.Handle;
			}
		}

		public DisplayPresentInfoKHR ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.DisplayPresentInfoKHR));
			Initialize ();
		}

		internal DisplayPresentInfoKHR (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}


		internal void Initialize ()
		{
			m->SType = StructureType.DisplayPresentInfoKHR;
		}

	}

	unsafe public partial struct SurfaceCapabilitiesKHR
	{
		public UInt32 MinImageCount;
		public UInt32 MaxImageCount;
		public Extent2D CurrentExtent;
		public Extent2D MinImageExtent;
		public Extent2D MaxImageExtent;
		public UInt32 MaxImageArrayLayers;
		public SurfaceTransformFlagsKHR SupportedTransforms;
		public SurfaceTransformFlagsKHR CurrentTransform;
		public CompositeAlphaFlagsKHR SupportedCompositeAlpha;
		public ImageUsageFlags SupportedUsageFlags;
	}

	unsafe public partial class ViSurfaceCreateInfoNn : MarshalledObject
	{
		public UInt32 Flags {
			get { return m->Flags; }
			set { m->Flags = value; }
		}

		public IntPtr Window {
			get { return m->Window; }
			set { m->Window = value; }
		}
		internal Interop.ViSurfaceCreateInfoNn* m {

			get {
				return (Interop.ViSurfaceCreateInfoNn*)native.Handle;
			}
		}

		public ViSurfaceCreateInfoNn ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.ViSurfaceCreateInfoNn));
			Initialize ();
		}

		internal ViSurfaceCreateInfoNn (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}


		internal void Initialize ()
		{
			m->SType = StructureType.ViSurfaceCreateInfoNn;
		}

	}

	unsafe public partial struct SurfaceFormatKHR
	{
		public Format Format;
		public ColorSpaceKHR ColorSpace;
	}

	unsafe public partial class SwapchainCreateInfoKHR : MarshalledObject
	{
		public SwapchainCreateFlagsKHR Flags {
			get { return m->Flags; }
			set { m->Flags = value; }
		}

		SurfaceKHR lSurface;
		public SurfaceKHR Surface {
			get { return lSurface; }
			set { lSurface = value; m->Surface = value != null ? (UInt64)value.m : default(UInt64); }
		}

		public UInt32 MinImageCount {
			get { return m->MinImageCount; }
			set { m->MinImageCount = value; }
		}

		public Format ImageFormat {
			get { return m->ImageFormat; }
			set { m->ImageFormat = value; }
		}

		public ColorSpaceKHR ImageColorSpace {
			get { return m->ImageColorSpace; }
			set { m->ImageColorSpace = value; }
		}

		public Extent2D ImageExtent {
			get { return m->ImageExtent; }
			set { m->ImageExtent = value; }
		}

		public UInt32 ImageArrayLayers {
			get { return m->ImageArrayLayers; }
			set { m->ImageArrayLayers = value; }
		}

		public ImageUsageFlags ImageUsage {
			get { return m->ImageUsage; }
			set { m->ImageUsage = value; }
		}

		public SharingMode ImageSharingMode {
			get { return m->ImageSharingMode; }
			set { m->ImageSharingMode = value; }
		}

		public UInt32 QueueFamilyIndexCount {
			get { return m->QueueFamilyIndexCount; }
			set { m->QueueFamilyIndexCount = value; }
		}

		NativeReference refQueueFamilyIndices;
		public UInt32[] QueueFamilyIndices {
			get {
				if (m->QueueFamilyIndexCount == 0)
					return null;
				var values = new UInt32 [m->QueueFamilyIndexCount];
				unsafe
				{
					UInt32* ptr = (UInt32*)m->QueueFamilyIndices;
					for (int i = 0; i < values.Length; i++) 
						values [i] = ptr [i];
				}
				return values;
			}

			set {
				if (value == null) {
					m->QueueFamilyIndexCount = 0;
					m->QueueFamilyIndices = IntPtr.Zero;
					return;
				}
				m->QueueFamilyIndexCount = (uint)value.Length;
				refQueueFamilyIndices = new NativeReference ((int)(sizeof(UInt32)*value.Length));
				m->QueueFamilyIndices = refQueueFamilyIndices.Handle;
				unsafe
				{
					UInt32* ptr = (UInt32*)m->QueueFamilyIndices;
					for (int i = 0; i < value.Length; i++)
						ptr [i] = value [i];
				}
			}
		}

		public SurfaceTransformFlagsKHR PreTransform {
			get { return m->PreTransform; }
			set { m->PreTransform = value; }
		}

		public CompositeAlphaFlagsKHR CompositeAlpha {
			get { return m->CompositeAlpha; }
			set { m->CompositeAlpha = value; }
		}

		public PresentModeKHR PresentMode {
			get { return m->PresentMode; }
			set { m->PresentMode = value; }
		}

		public bool Clipped {
			get { return m->Clipped; }
			set { m->Clipped = value; }
		}

		SwapchainKHR lOldSwapchain;
		public SwapchainKHR OldSwapchain {
			get { return lOldSwapchain; }
			set { lOldSwapchain = value; m->OldSwapchain = value != null ? (UInt64)value.m : default(UInt64); }
		}
		internal Interop.SwapchainCreateInfoKHR* m {

			get {
				return (Interop.SwapchainCreateInfoKHR*)native.Handle;
			}
		}

		public SwapchainCreateInfoKHR ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.SwapchainCreateInfoKHR));
			Initialize ();
		}

		internal SwapchainCreateInfoKHR (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}

		override public void Dispose (bool disposing)
		{
			base.Dispose (disposing);
			if (!disposing)
				return;
			refQueueFamilyIndices.Dispose ();
			refQueueFamilyIndices = null;
		}

		internal void Initialize ()
		{
			m->SType = StructureType.SwapchainCreateInfoKHR;
		}

	}

	unsafe public partial class PresentInfoKHR : MarshalledObject
	{
		public UInt32 WaitSemaphoreCount {
			get { return m->WaitSemaphoreCount; }
			set { m->WaitSemaphoreCount = value; }
		}

		NativeReference refWaitSemaphores;
		public Semaphore[] WaitSemaphores {
			get {
				if (m->WaitSemaphoreCount == 0)
					return null;
				var values = new Semaphore [m->WaitSemaphoreCount];
				unsafe
				{
					UInt64* ptr = (UInt64*)m->WaitSemaphores;
					for (int i = 0; i < values.Length; i++) {
						values [i] = new Semaphore ();
						values [i].m = ptr [i];
					}
				}
				return values;
			}

			set {
				if (value == null) {
					m->WaitSemaphoreCount = 0;
					m->WaitSemaphores = IntPtr.Zero;
					return;
				}
				m->WaitSemaphoreCount = (uint)value.Length;
				refWaitSemaphores = new NativeReference ((int)(sizeof(UInt64)*value.Length));
				m->WaitSemaphores = refWaitSemaphores.Handle;
				unsafe
				{
					UInt64* ptr = (UInt64*)m->WaitSemaphores;
					for (int i = 0; i < value.Length; i++)
						ptr [i] = value [i].m;
				}
			}
		}

		public UInt32 SwapchainCount {
			get { return m->SwapchainCount; }
			set { m->SwapchainCount = value; }
		}

		NativeReference refSwapchains;
		public SwapchainKHR[] Swapchains {
			get {
				if (m->SwapchainCount == 0)
					return null;
				var values = new SwapchainKHR [m->SwapchainCount];
				unsafe
				{
					UInt64* ptr = (UInt64*)m->Swapchains;
					for (int i = 0; i < values.Length; i++) {
						values [i] = new SwapchainKHR ();
						values [i].m = ptr [i];
					}
				}
				return values;
			}

			set {
				if (value == null) {
					m->SwapchainCount = 0;
					m->Swapchains = IntPtr.Zero;
					return;
				}
				m->SwapchainCount = (uint)value.Length;
				refSwapchains = new NativeReference ((int)(sizeof(UInt64)*value.Length));
				m->Swapchains = refSwapchains.Handle;
				unsafe
				{
					UInt64* ptr = (UInt64*)m->Swapchains;
					for (int i = 0; i < value.Length; i++)
						ptr [i] = value [i].m;
				}
			}
		}

		NativeReference refImageIndices;
		public UInt32[] ImageIndices {
			get {
				if (m->SwapchainCount == 0)
					return null;
				var values = new UInt32 [m->SwapchainCount];
				unsafe
				{
					UInt32* ptr = (UInt32*)m->ImageIndices;
					for (int i = 0; i < values.Length; i++) 
						values [i] = ptr [i];
				}
				return values;
			}

			set {
				if (value == null) {
					m->SwapchainCount = 0;
					m->ImageIndices = IntPtr.Zero;
					return;
				}
				m->SwapchainCount = (uint)value.Length;
				refImageIndices = new NativeReference ((int)(sizeof(UInt32)*value.Length));
				m->ImageIndices = refImageIndices.Handle;
				unsafe
				{
					UInt32* ptr = (UInt32*)m->ImageIndices;
					for (int i = 0; i < value.Length; i++)
						ptr [i] = value [i];
				}
			}
		}

		NativeReference refResults;
		public Result[] Results {
			get {
				if (m->SwapchainCount == 0)
					return null;
				var values = new Result [m->SwapchainCount];
				unsafe
				{
					Result* ptr = (Result*)m->Results;
					for (int i = 0; i < values.Length; i++) 
						values [i] = ptr [i];
				}
				return values;
			}

			set {
				if (value == null) {
					m->SwapchainCount = 0;
					m->Results = IntPtr.Zero;
					return;
				}
				m->SwapchainCount = (uint)value.Length;
				refResults = new NativeReference ((int)(sizeof(Result)*value.Length));
				m->Results = refResults.Handle;
				unsafe
				{
					Result* ptr = (Result*)m->Results;
					for (int i = 0; i < value.Length; i++)
						ptr [i] = value [i];
				}
			}
		}
		internal Interop.PresentInfoKHR* m {

			get {
				return (Interop.PresentInfoKHR*)native.Handle;
			}
		}

		public PresentInfoKHR ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.PresentInfoKHR));
			Initialize ();
		}

		internal PresentInfoKHR (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}

		override public void Dispose (bool disposing)
		{
			if (!disposing)
				return;
				base.Dispose(disposing);
				refWaitSemaphores.Dispose();
				refWaitSemaphores = null;
				refSwapchains.Dispose();
				refSwapchains = null;
				refImageIndices.Dispose();
				refImageIndices = null;
				refResults.Dispose();
				refResults = null;
		}

		internal void Initialize ()
		{
			m->SType = StructureType.PresentInfoKHR;
		}

	}



	unsafe public partial class DebugReportCallbackCreateInfo : MarshalledObject
	{
		public DebugReportFlagsExt Flags {
			get { return m->Flags; }
			set { m->Flags = value; }
		}

		public IntPtr PfnCallback {
			get { return m->PfnCallback; }
			set { m->PfnCallback = value; }
		}

		public IntPtr UserData {
			get { return m->UserData; }
			set { m->UserData = value; }
		}
		internal Interop.DebugReportCallbackCreateInfoExt* m {

			get {
				return (Interop.DebugReportCallbackCreateInfoExt*)native.Handle;
			}
		}

		public DebugReportCallbackCreateInfo ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.DebugReportCallbackCreateInfoExt));
			Initialize ();
		}

		internal DebugReportCallbackCreateInfo (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}


		internal void Initialize ()
		{
			m->SType = StructureType.DebugReportCallbackCreateInfoExt;
		}

	}





	unsafe public partial class ValidationFlagsExt : MarshalledObject
	{
		public UInt32 DisabledValidationCheckCount {
			get { return m->DisabledValidationCheckCount; }
			set { m->DisabledValidationCheckCount = value; }
		}

		NativeReference refDisabledValidationChecks;
		public ValidationCheckExt[] DisabledValidationChecks {
			get {
				if (m->DisabledValidationCheckCount == 0)
					return null;
				var values = new ValidationCheckExt [m->DisabledValidationCheckCount];
				unsafe
				{
					ValidationCheckExt* ptr = (ValidationCheckExt*)m->DisabledValidationChecks;
					for (int i = 0; i < values.Length; i++) 
						values [i] = ptr [i];
				}
				return values;
			}

			set {
				if (value == null) {
					m->DisabledValidationCheckCount = 0;
					m->DisabledValidationChecks = IntPtr.Zero;
					return;
				}
				m->DisabledValidationCheckCount = (uint)value.Length;
				refDisabledValidationChecks = new NativeReference ((int)(sizeof(ValidationCheckExt)*value.Length));
				m->DisabledValidationChecks = refDisabledValidationChecks.Handle;
				unsafe
				{
					ValidationCheckExt* ptr = (ValidationCheckExt*)m->DisabledValidationChecks;
					for (int i = 0; i < value.Length; i++)
						ptr [i] = value [i];
				}
			}
		}
		internal Interop.ValidationFlagsExt* m {

			get {
				return (Interop.ValidationFlagsExt*)native.Handle;
			}
		}

		public ValidationFlagsExt ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.ValidationFlagsExt));
			Initialize ();
		}

		internal ValidationFlagsExt (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}

		override public void Dispose (bool disposing)
		{
			base.Dispose (disposing);
			if (!disposing)
				return;
			refDisabledValidationChecks.Dispose ();
			refDisabledValidationChecks = null;
		}

		internal void Initialize ()
		{
			m->SType = StructureType.ValidationFlagsExt;
		}

	}

	unsafe public partial class PipelineRasterizationStateRasterizationOrderAmd : MarshalledObject
	{
		public RasterizationOrderAmd RasterizationOrder {
			get { return m->RasterizationOrder; }
			set { m->RasterizationOrder = value; }
		}
		internal Interop.PipelineRasterizationStateRasterizationOrderAmd* m {

			get {
				return (Interop.PipelineRasterizationStateRasterizationOrderAmd*)native.Handle;
			}
		}

		public PipelineRasterizationStateRasterizationOrderAmd ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.PipelineRasterizationStateRasterizationOrderAmd));
			Initialize ();
		}

		internal PipelineRasterizationStateRasterizationOrderAmd (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}


		internal void Initialize ()
		{
			m->SType = StructureType.PipelineRasterizationStateRasterizationOrderAmd;
		}

	}

	unsafe public partial class DebugMarkerObjectNameInfoExt : MarshalledObject
	{
		public DebugReportObjectTypeExt ObjectType {
			get { return m->ObjectType; }
			set { m->ObjectType = value; }
		}

		public UInt64 Object {
			get { return m->Object; }
			set { m->Object = value; }
		}

		public string ObjectName {
			get { return Marshal.PtrToStringAnsi (m->ObjectName); }
			set { m->ObjectName = Marshal.StringToHGlobalAnsi (value); }
		}
		internal Interop.DebugMarkerObjectNameInfoExt* m {

			get {
				return (Interop.DebugMarkerObjectNameInfoExt*)native.Handle;
			}
		}

		public DebugMarkerObjectNameInfoExt ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.DebugMarkerObjectNameInfoExt));
			Initialize ();
		}

		internal DebugMarkerObjectNameInfoExt (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}


		internal void Initialize ()
		{
			m->SType = StructureType.DebugMarkerObjectNameInfoExt;
		}

	}

	unsafe public partial class DebugMarkerObjectTagInfoExt : MarshalledObject
	{
		public DebugReportObjectTypeExt ObjectType {
			get { return m->ObjectType; }
			set { m->ObjectType = value; }
		}

		public UInt64 Object {
			get { return m->Object; }
			set { m->Object = value; }
		}

		public UInt64 TagName {
			get { return m->TagName; }
			set { m->TagName = value; }
		}

		public UIntPtr TagSize {
			get { return m->TagSize; }
			set { m->TagSize = value; }
		}

		public IntPtr Tag {
			get { return m->Tag; }
			set { m->Tag = value; }
		}
		internal Interop.DebugMarkerObjectTagInfoExt* m {

			get {
				return (Interop.DebugMarkerObjectTagInfoExt*)native.Handle;
			}
		}

		public DebugMarkerObjectTagInfoExt ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.DebugMarkerObjectTagInfoExt));
			Initialize ();
		}

		internal DebugMarkerObjectTagInfoExt (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}


		internal void Initialize ()
		{
			m->SType = StructureType.DebugMarkerObjectTagInfoExt;
		}

	}

	unsafe public partial class DebugMarkerMarkerInfoExt : MarshalledObject
	{
		public string MarkerName {
			get { return Marshal.PtrToStringAnsi (m->MarkerName); }
			set { m->MarkerName = Marshal.StringToHGlobalAnsi (value); }
		}

		public float[] Color {
			get {
				var arr = new float [4];
				for (int i = 0; i < 4; i++)
					arr [i] = m->Color [i];
				return arr;
			}

			set {
				if (value.Length > 4)
					throw new Exception ("array too long");
				for (int i = 0; i < value.Length; i++)
					m->Color [i] = value [i];
				for (int i = value.Length; i < 4; i++)
					m->Color [i] = 0;
			}
		}
		internal Interop.DebugMarkerMarkerInfoExt* m {

			get {
				return (Interop.DebugMarkerMarkerInfoExt*)native.Handle;
			}
		}

		public DebugMarkerMarkerInfoExt ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.DebugMarkerMarkerInfoExt));
			Initialize ();
		}

		internal DebugMarkerMarkerInfoExt (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}


		internal void Initialize ()
		{
			m->SType = StructureType.DebugMarkerMarkerInfoExt;
		}

	}

	unsafe public partial class DedicatedAllocationImageCreateInfoNv : MarshalledObject
	{
		public bool DedicatedAllocation {
			get { return m->DedicatedAllocation; }
			set { m->DedicatedAllocation = value; }
		}
		internal Interop.DedicatedAllocationImageCreateInfoNv* m {

			get {
				return (Interop.DedicatedAllocationImageCreateInfoNv*)native.Handle;
			}
		}

		public DedicatedAllocationImageCreateInfoNv ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.DedicatedAllocationImageCreateInfoNv));
			Initialize ();
		}

		internal DedicatedAllocationImageCreateInfoNv (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}


		internal void Initialize ()
		{
			m->SType = StructureType.DedicatedAllocationImageCreateInfoNv;
		}

	}

	unsafe public partial class DedicatedAllocationBufferCreateInfoNv : MarshalledObject
	{
		public bool DedicatedAllocation {
			get { return m->DedicatedAllocation; }
			set { m->DedicatedAllocation = value; }
		}
		internal Interop.DedicatedAllocationBufferCreateInfoNv* m {

			get {
				return (Interop.DedicatedAllocationBufferCreateInfoNv*)native.Handle;
			}
		}

		public DedicatedAllocationBufferCreateInfoNv ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.DedicatedAllocationBufferCreateInfoNv));
			Initialize ();
		}

		internal DedicatedAllocationBufferCreateInfoNv (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}


		internal void Initialize ()
		{
			m->SType = StructureType.DedicatedAllocationBufferCreateInfoNv;
		}

	}

	unsafe public partial class DedicatedAllocationMemoryAllocateInfoNv : MarshalledObject
	{
		Image lImage;
		public Image Image {
			get { return lImage; }
			set { lImage = value; m->Image = value != null ? (UInt64)value.m : default(UInt64); }
		}

		VulkanBuffer lBuffer;
		public VulkanBuffer Buffer {
			get { return lBuffer; }
			set { lBuffer = value; m->Buffer = value != null ? (UInt64)value.m : default(UInt64); }
		}
		internal Interop.DedicatedAllocationMemoryAllocateInfoNv* m {

			get {
				return (Interop.DedicatedAllocationMemoryAllocateInfoNv*)native.Handle;
			}
		}

		public DedicatedAllocationMemoryAllocateInfoNv ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.DedicatedAllocationMemoryAllocateInfoNv));
			Initialize ();
		}

		internal DedicatedAllocationMemoryAllocateInfoNv (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}


		internal void Initialize ()
		{
			m->SType = StructureType.DedicatedAllocationMemoryAllocateInfoNv;
		}

	}

	unsafe public partial struct ExternalImageFormatPropertiesNv
	{
		public ImageFormatProperties ImageFormatProperties;
		public ExternalMemoryFeatureFlagsNv ExternalMemoryFeatures;
		public ExternalMemoryHandleTypeFlagsNv ExportFromImportedHandleTypes;
		public ExternalMemoryHandleTypeFlagsNv CompatibleHandleTypes;
	}

	unsafe public partial class ExternalMemoryImageCreateInfoNv : MarshalledObject
	{
		public ExternalMemoryHandleTypeFlagsNv HandleTypes {
			get { return m->HandleTypes; }
			set { m->HandleTypes = value; }
		}
		internal Interop.ExternalMemoryImageCreateInfoNv* m {

			get {
				return (Interop.ExternalMemoryImageCreateInfoNv*)native.Handle;
			}
		}

		public ExternalMemoryImageCreateInfoNv ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.ExternalMemoryImageCreateInfoNv));
			Initialize ();
		}

		internal ExternalMemoryImageCreateInfoNv (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}


		internal void Initialize ()
		{
			m->SType = StructureType.ExternalMemoryImageCreateInfoNv;
		}

	}

	unsafe public partial class ExportMemoryAllocateInfoNv : MarshalledObject
	{
		public ExternalMemoryHandleTypeFlagsNv HandleTypes {
			get { return m->HandleTypes; }
			set { m->HandleTypes = value; }
		}
		internal Interop.ExportMemoryAllocateInfoNv* m {

			get {
				return (Interop.ExportMemoryAllocateInfoNv*)native.Handle;
			}
		}

		public ExportMemoryAllocateInfoNv ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.ExportMemoryAllocateInfoNv));
			Initialize ();
		}

		internal ExportMemoryAllocateInfoNv (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}


		internal void Initialize ()
		{
			m->SType = StructureType.ExportMemoryAllocateInfoNv;
		}

	}

	unsafe public partial class DeviceGeneratedCommandsFeaturesNvx : MarshalledObject
	{
		public bool ComputeBindingPointSupport {
			get { return m->ComputeBindingPointSupport; }
			set { m->ComputeBindingPointSupport = value; }
		}
		internal Interop.DeviceGeneratedCommandsFeaturesNvx* m {

			get {
				return (Interop.DeviceGeneratedCommandsFeaturesNvx*)native.Handle;
			}
		}

		public DeviceGeneratedCommandsFeaturesNvx ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.DeviceGeneratedCommandsFeaturesNvx));
			Initialize ();
		}

		internal DeviceGeneratedCommandsFeaturesNvx (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}


		internal void Initialize ()
		{
			m->SType = StructureType.DeviceGeneratedCommandsFeaturesNvx;
		}

	}

	unsafe public partial class DeviceGeneratedCommandsLimitsNvx : MarshalledObject
	{
		public UInt32 MaxIndirectCommandsLayoutTokenCount {
			get { return m->MaxIndirectCommandsLayoutTokenCount; }
			set { m->MaxIndirectCommandsLayoutTokenCount = value; }
		}

		public UInt32 MaxObjectEntryCounts {
			get { return m->MaxObjectEntryCounts; }
			set { m->MaxObjectEntryCounts = value; }
		}

		public UInt32 MinSequenceCountBufferOffsetAlignment {
			get { return m->MinSequenceCountBufferOffsetAlignment; }
			set { m->MinSequenceCountBufferOffsetAlignment = value; }
		}

		public UInt32 MinSequenceIndexBufferOffsetAlignment {
			get { return m->MinSequenceIndexBufferOffsetAlignment; }
			set { m->MinSequenceIndexBufferOffsetAlignment = value; }
		}

		public UInt32 MinCommandsTokenBufferOffsetAlignment {
			get { return m->MinCommandsTokenBufferOffsetAlignment; }
			set { m->MinCommandsTokenBufferOffsetAlignment = value; }
		}
		internal Interop.DeviceGeneratedCommandsLimitsNvx* m {

			get {
				return (Interop.DeviceGeneratedCommandsLimitsNvx*)native.Handle;
			}
		}

		public DeviceGeneratedCommandsLimitsNvx ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.DeviceGeneratedCommandsLimitsNvx));
			Initialize ();
		}

		internal DeviceGeneratedCommandsLimitsNvx (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}


		internal void Initialize ()
		{
			m->SType = StructureType.DeviceGeneratedCommandsLimitsNvx;
		}

	}

	unsafe public partial class IndirectCommandsTokenNvx : MarshalledObject
	{
		public IndirectCommandsTokenTypeNvx TokenType {
			get { return m->TokenType; }
			set { m->TokenType = value; }
		}

		VulkanBuffer lBuffer;
		public VulkanBuffer Buffer {
			get { return lBuffer; }
			set { lBuffer = value; m->Buffer = value != null ? (UInt64)value.m : default(UInt64); }
		}

		public DeviceSize Offset {
			get { return m->Offset; }
			set { m->Offset = value; }
		}
		internal Interop.IndirectCommandsTokenNvx* m {

			get {
				return (Interop.IndirectCommandsTokenNvx*)native.Handle;
			}
		}

		public IndirectCommandsTokenNvx ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.IndirectCommandsTokenNvx));
			Initialize ();
		}

		internal IndirectCommandsTokenNvx (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}


		internal void Initialize ()
		{
		}

	}

	unsafe public partial struct IndirectCommandsLayoutTokenNvx
	{
		public IndirectCommandsTokenTypeNvx TokenType;
		public UInt32 BindingUnit;
		public UInt32 DynamicCount;
		public UInt32 Divisor;
	}

	unsafe public partial class IndirectCommandsLayoutCreateInfoNvx : MarshalledObject
	{
		public PipelineBindPoint PipelineBindPoint {
			get { return m->PipelineBindPoint; }
			set { m->PipelineBindPoint = value; }
		}

		public IndirectCommandsLayoutUsageFlagsNvx Flags {
			get { return m->Flags; }
			set { m->Flags = value; }
		}

		public UInt32 TokenCount {
			get { return m->TokenCount; }
			set { m->TokenCount = value; }
		}

		NativeReference refTokens;
		public IndirectCommandsLayoutTokenNvx[] Tokens {
			get {
				if (m->TokenCount == 0)
					return null;
				var values = new IndirectCommandsLayoutTokenNvx [m->TokenCount];
				unsafe
				{
					IndirectCommandsLayoutTokenNvx* ptr = (IndirectCommandsLayoutTokenNvx*)m->Tokens;
					for (int i = 0; i < values.Length; i++) 
						values [i] = ptr [i];
				}
				return values;
			}

			set {
				if (value == null) {
					m->TokenCount = 0;
					m->Tokens = IntPtr.Zero;
					return;
				}
				m->TokenCount = (uint)value.Length;
				refTokens = new NativeReference ((int)(sizeof(IndirectCommandsLayoutTokenNvx)*value.Length));
				m->Tokens = refTokens.Handle;
				unsafe
				{
					IndirectCommandsLayoutTokenNvx* ptr = (IndirectCommandsLayoutTokenNvx*)m->Tokens;
					for (int i = 0; i < value.Length; i++)
						ptr [i] = value [i];
				}
			}
		}
		internal Interop.IndirectCommandsLayoutCreateInfoNvx* m {

			get {
				return (Interop.IndirectCommandsLayoutCreateInfoNvx*)native.Handle;
			}
		}

		public IndirectCommandsLayoutCreateInfoNvx ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.IndirectCommandsLayoutCreateInfoNvx));
			Initialize ();
		}

		internal IndirectCommandsLayoutCreateInfoNvx (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}

		override public void Dispose (bool disposing)
		{
			base.Dispose (disposing);
			if (!disposing)
				return;
			refTokens.Dispose ();
			refTokens = null;
		}

		internal void Initialize ()
		{
			m->SType = StructureType.IndirectCommandsLayoutCreateInfoNvx;
		}

	}

	unsafe public partial class CmdProcessCommandsInfoNvx : MarshalledObject
	{
		ObjectTableNvx lObjectTable;
		public ObjectTableNvx ObjectTable {
			get { return lObjectTable; }
			set { lObjectTable = value; m->ObjectTable = value != null ? (UInt64)value.m : default(UInt64); }
		}

		IndirectCommandsLayoutNvx lIndirectCommandsLayout;
		public IndirectCommandsLayoutNvx IndirectCommandsLayout {
			get { return lIndirectCommandsLayout; }
			set { lIndirectCommandsLayout = value; m->IndirectCommandsLayout = value != null ? (UInt64)value.m : default(UInt64); }
		}

		public UInt32 IndirectCommandsTokenCount {
			get { return m->IndirectCommandsTokenCount; }
			set { m->IndirectCommandsTokenCount = value; }
		}

		NativeReference refIndirectCommandsTokens;
		public IndirectCommandsTokenNvx[] IndirectCommandsTokens {
			get {
				if (m->IndirectCommandsTokenCount == 0)
					return null;
				var values = new IndirectCommandsTokenNvx [m->IndirectCommandsTokenCount];
				unsafe
				{
					Interop.IndirectCommandsTokenNvx* ptr = (Interop.IndirectCommandsTokenNvx*)m->IndirectCommandsTokens;
					for (int i = 0; i < values.Length; i++) {
						values [i] = new IndirectCommandsTokenNvx ();
						*values [i].m = ptr [i];
					}
				}
				return values;
			}

			set {
				if (value == null) {
					m->IndirectCommandsTokenCount = 0;
					m->IndirectCommandsTokens = IntPtr.Zero;
					return;
				}
				m->IndirectCommandsTokenCount = (uint)value.Length;
				refIndirectCommandsTokens = new NativeReference ((int)(sizeof(Interop.IndirectCommandsTokenNvx)*value.Length));
				m->IndirectCommandsTokens = refIndirectCommandsTokens.Handle;
				unsafe
				{
					Interop.IndirectCommandsTokenNvx* ptr = (Interop.IndirectCommandsTokenNvx*)m->IndirectCommandsTokens;
					for (int i = 0; i < value.Length; i++)
						ptr [i] = *value [i].m;
				}
			}
		}

		public UInt32 MaxSequencesCount {
			get { return m->MaxSequencesCount; }
			set { m->MaxSequencesCount = value; }
		}

		CommandBuffer lTargetCommandBuffer;
		public CommandBuffer TargetCommandBuffer {
			get { return lTargetCommandBuffer; }
			set { lTargetCommandBuffer = value; m->TargetCommandBuffer = value != null ? (IntPtr)value.m : default(IntPtr); }
		}

		VulkanBuffer lSequencesCountBuffer;
		public VulkanBuffer SequencesCountBuffer {
			get { return lSequencesCountBuffer; }
			set { lSequencesCountBuffer = value; m->SequencesCountBuffer = value != null ? (UInt64)value.m : default(UInt64); }
		}

		public DeviceSize SequencesCountOffset {
			get { return m->SequencesCountOffset; }
			set { m->SequencesCountOffset = value; }
		}

		VulkanBuffer lSequencesIndexBuffer;
		public VulkanBuffer SequencesIndexBuffer {
			get { return lSequencesIndexBuffer; }
			set { lSequencesIndexBuffer = value; m->SequencesIndexBuffer = value != null ? (UInt64)value.m : default(UInt64); }
		}

		public DeviceSize SequencesIndexOffset {
			get { return m->SequencesIndexOffset; }
			set { m->SequencesIndexOffset = value; }
		}
		internal Interop.CmdProcessCommandsInfoNvx* m {

			get {
				return (Interop.CmdProcessCommandsInfoNvx*)native.Handle;
			}
		}

		public CmdProcessCommandsInfoNvx ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.CmdProcessCommandsInfoNvx));
			Initialize ();
		}

		internal CmdProcessCommandsInfoNvx (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}

		override public void Dispose (bool disposing)
		{
			base.Dispose (disposing);
			if (!disposing)
				return;
			refIndirectCommandsTokens.Dispose ();
			refIndirectCommandsTokens = null;
		}

		internal void Initialize ()
		{
			m->SType = StructureType.CmdProcessCommandsInfoNvx;
		}

	}

	unsafe public partial class CmdReserveSpaceForCommandsInfoNvx : MarshalledObject
	{
		ObjectTableNvx lObjectTable;
		public ObjectTableNvx ObjectTable {
			get { return lObjectTable; }
			set { lObjectTable = value; m->ObjectTable = value != null ? (UInt64)value.m : default(UInt64); }
		}

		IndirectCommandsLayoutNvx lIndirectCommandsLayout;
		public IndirectCommandsLayoutNvx IndirectCommandsLayout {
			get { return lIndirectCommandsLayout; }
			set { lIndirectCommandsLayout = value; m->IndirectCommandsLayout = value != null ? (UInt64)value.m : default(UInt64); }
		}

		public UInt32 MaxSequencesCount {
			get { return m->MaxSequencesCount; }
			set { m->MaxSequencesCount = value; }
		}
		internal Interop.CmdReserveSpaceForCommandsInfoNvx* m {

			get {
				return (Interop.CmdReserveSpaceForCommandsInfoNvx*)native.Handle;
			}
		}

		public CmdReserveSpaceForCommandsInfoNvx ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.CmdReserveSpaceForCommandsInfoNvx));
			Initialize ();
		}

		internal CmdReserveSpaceForCommandsInfoNvx (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}


		internal void Initialize ()
		{
			m->SType = StructureType.CmdReserveSpaceForCommandsInfoNvx;
		}

	}

	unsafe public partial class ObjectTableCreateInfoNvx : MarshalledObject
	{
		public UInt32 ObjectCount {
			get { return m->ObjectCount; }
			set { m->ObjectCount = value; }
		}

		NativeReference refObjectEntryTypes;
		public ObjectEntryTypeNvx[] ObjectEntryTypes {
			get {
				if (m->ObjectCount == 0)
					return null;
				var values = new ObjectEntryTypeNvx [m->ObjectCount];
				unsafe
				{
					ObjectEntryTypeNvx* ptr = (ObjectEntryTypeNvx*)m->ObjectEntryTypes;
					for (int i = 0; i < values.Length; i++) 
						values [i] = ptr [i];
				}
				return values;
			}

			set {
				if (value == null) {
					m->ObjectCount = 0;
					m->ObjectEntryTypes = IntPtr.Zero;
					return;
				}
				m->ObjectCount = (uint)value.Length;
				refObjectEntryTypes = new NativeReference ((int)(sizeof(ObjectEntryTypeNvx)*value.Length));
				m->ObjectEntryTypes = refObjectEntryTypes.Handle;
				unsafe
				{
					ObjectEntryTypeNvx* ptr = (ObjectEntryTypeNvx*)m->ObjectEntryTypes;
					for (int i = 0; i < value.Length; i++)
						ptr [i] = value [i];
				}
			}
		}

		NativeReference refObjectEntryCounts;
		public UInt32[] ObjectEntryCounts {
			get {
				if (m->ObjectCount == 0)
					return null;
				var values = new UInt32 [m->ObjectCount];
				unsafe
				{
					UInt32* ptr = (UInt32*)m->ObjectEntryCounts;
					for (int i = 0; i < values.Length; i++) 
						values [i] = ptr [i];
				}
				return values;
			}

			set {
				if (value == null) {
					m->ObjectCount = 0;
					m->ObjectEntryCounts = IntPtr.Zero;
					return;
				}
				m->ObjectCount = (uint)value.Length;
				refObjectEntryCounts = new NativeReference ((int)(sizeof(UInt32)*value.Length));
				m->ObjectEntryCounts = refObjectEntryCounts.Handle;
				unsafe
				{
					UInt32* ptr = (UInt32*)m->ObjectEntryCounts;
					for (int i = 0; i < value.Length; i++)
						ptr [i] = value [i];
				}
			}
		}

		NativeReference refObjectEntryUsageFlags;
		public ObjectEntryUsageFlagsNvx[] ObjectEntryUsageFlags {
			get {
				if (m->ObjectCount == 0)
					return null;
				var values = new ObjectEntryUsageFlagsNvx [m->ObjectCount];
				unsafe
				{
					ObjectEntryUsageFlagsNvx* ptr = (ObjectEntryUsageFlagsNvx*)m->ObjectEntryUsageFlags;
					for (int i = 0; i < values.Length; i++) 
						values [i] = ptr [i];
				}
				return values;
			}

			set {
				if (value == null) {
					m->ObjectCount = 0;
					m->ObjectEntryUsageFlags = IntPtr.Zero;
					return;
				}
				m->ObjectCount = (uint)value.Length;
				refObjectEntryUsageFlags = new NativeReference ((int)(sizeof(ObjectEntryUsageFlagsNvx)*value.Length));
				m->ObjectEntryUsageFlags = refObjectEntryUsageFlags.Handle;
				unsafe
				{
					ObjectEntryUsageFlagsNvx* ptr = (ObjectEntryUsageFlagsNvx*)m->ObjectEntryUsageFlags;
					for (int i = 0; i < value.Length; i++)
						ptr [i] = value [i];
				}
			}
		}

		public UInt32 MaxUniformBuffersPerDescriptor {
			get { return m->MaxUniformBuffersPerDescriptor; }
			set { m->MaxUniformBuffersPerDescriptor = value; }
		}

		public UInt32 MaxStorageBuffersPerDescriptor {
			get { return m->MaxStorageBuffersPerDescriptor; }
			set { m->MaxStorageBuffersPerDescriptor = value; }
		}

		public UInt32 MaxStorageImagesPerDescriptor {
			get { return m->MaxStorageImagesPerDescriptor; }
			set { m->MaxStorageImagesPerDescriptor = value; }
		}

		public UInt32 MaxSampledImagesPerDescriptor {
			get { return m->MaxSampledImagesPerDescriptor; }
			set { m->MaxSampledImagesPerDescriptor = value; }
		}

		public UInt32 MaxPipelineLayouts {
			get { return m->MaxPipelineLayouts; }
			set { m->MaxPipelineLayouts = value; }
		}
		internal Interop.ObjectTableCreateInfoNvx* m {

			get {
				return (Interop.ObjectTableCreateInfoNvx*)native.Handle;
			}
		}

		public ObjectTableCreateInfoNvx ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.ObjectTableCreateInfoNvx));
			Initialize ();
		}

		internal ObjectTableCreateInfoNvx (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}

		override public void Dispose (bool disposing)
		{
			base.Dispose (disposing);
			if (!disposing)
				return;
			refObjectEntryTypes.Dispose ();
			refObjectEntryTypes = null;
			refObjectEntryCounts.Dispose ();
			refObjectEntryCounts = null;
			refObjectEntryUsageFlags.Dispose ();
			refObjectEntryUsageFlags = null;
		}

		internal void Initialize ()
		{
			m->SType = StructureType.ObjectTableCreateInfoNvx;
		}

	}

	unsafe public partial struct ObjectTableEntryNvx
	{
		public ObjectEntryTypeNvx Type;
		public ObjectEntryUsageFlagsNvx Flags;
	}

	unsafe public partial class ObjectTablePipelineEntryNvx : MarshalledObject
	{
		public ObjectEntryTypeNvx Type {
			get { return m->Type; }
			set { m->Type = value; }
		}

		public ObjectEntryUsageFlagsNvx Flags {
			get { return m->Flags; }
			set { m->Flags = value; }
		}

		Pipeline lPipeline;
		public Pipeline Pipeline {
			get { return lPipeline; }
			set { lPipeline = value; m->Pipeline = value != null ? (UInt64)value.m : default(UInt64); }
		}
		internal Interop.ObjectTablePipelineEntryNvx* m {

			get {
				return (Interop.ObjectTablePipelineEntryNvx*)native.Handle;
			}
		}

		public ObjectTablePipelineEntryNvx ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.ObjectTablePipelineEntryNvx));
			Initialize ();
		}

		internal ObjectTablePipelineEntryNvx (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}


		internal void Initialize ()
		{
		}

	}

	unsafe public partial class ObjectTableDescriptorSetEntryNvx : MarshalledObject
	{
		public ObjectEntryTypeNvx Type {
			get { return m->Type; }
			set { m->Type = value; }
		}

		public ObjectEntryUsageFlagsNvx Flags {
			get { return m->Flags; }
			set { m->Flags = value; }
		}

		PipelineLayout lPipelineLayout;
		public PipelineLayout PipelineLayout {
			get { return lPipelineLayout; }
			set { lPipelineLayout = value; m->PipelineLayout = value != null ? (UInt64)value.m : default(UInt64); }
		}

		DescriptorSet lDescriptorSet;
		public DescriptorSet DescriptorSet {
			get { return lDescriptorSet; }
			set { lDescriptorSet = value; m->DescriptorSet = value != null ? (UInt64)value.m : default(UInt64); }
		}
		internal Interop.ObjectTableDescriptorSetEntryNvx* m {

			get {
				return (Interop.ObjectTableDescriptorSetEntryNvx*)native.Handle;
			}
		}

		public ObjectTableDescriptorSetEntryNvx ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.ObjectTableDescriptorSetEntryNvx));
			Initialize ();
		}

		internal ObjectTableDescriptorSetEntryNvx (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}


		internal void Initialize ()
		{
		}

	}

	unsafe public partial class ObjectTableVertexBufferEntryNvx : MarshalledObject
	{
		public ObjectEntryTypeNvx Type {
			get { return m->Type; }
			set { m->Type = value; }
		}

		public ObjectEntryUsageFlagsNvx Flags {
			get { return m->Flags; }
			set { m->Flags = value; }
		}

		VulkanBuffer lBuffer;
		public VulkanBuffer Buffer {
			get { return lBuffer; }
			set { lBuffer = value; m->Buffer = value != null ? (UInt64)value.m : default(UInt64); }
		}
		internal Interop.ObjectTableVertexBufferEntryNvx* m {

			get {
				return (Interop.ObjectTableVertexBufferEntryNvx*)native.Handle;
			}
		}

		public ObjectTableVertexBufferEntryNvx ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.ObjectTableVertexBufferEntryNvx));
			Initialize ();
		}

		internal ObjectTableVertexBufferEntryNvx (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}


		internal void Initialize ()
		{
		}

	}

	unsafe public partial class ObjectTableIndexBufferEntryNvx : MarshalledObject
	{
		public ObjectEntryTypeNvx Type {
			get { return m->Type; }
			set { m->Type = value; }
		}

		public ObjectEntryUsageFlagsNvx Flags {
			get { return m->Flags; }
			set { m->Flags = value; }
		}

		VulkanBuffer lBuffer;
		public VulkanBuffer Buffer {
			get { return lBuffer; }
			set { lBuffer = value; m->Buffer = value != null ? (UInt64)value.m : default(UInt64); }
		}

		public IndexType IndexType {
			get { return m->IndexType; }
			set { m->IndexType = value; }
		}
		internal Interop.ObjectTableIndexBufferEntryNvx* m {

			get {
				return (Interop.ObjectTableIndexBufferEntryNvx*)native.Handle;
			}
		}

		public ObjectTableIndexBufferEntryNvx ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.ObjectTableIndexBufferEntryNvx));
			Initialize ();
		}

		internal ObjectTableIndexBufferEntryNvx (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}


		internal void Initialize ()
		{
		}

	}

	unsafe public partial class ObjectTablePushConstantEntryNvx : MarshalledObject
	{
		public ObjectEntryTypeNvx Type {
			get { return m->Type; }
			set { m->Type = value; }
		}

		public ObjectEntryUsageFlagsNvx Flags {
			get { return m->Flags; }
			set { m->Flags = value; }
		}

		PipelineLayout lPipelineLayout;
		public PipelineLayout PipelineLayout {
			get { return lPipelineLayout; }
			set { lPipelineLayout = value; m->PipelineLayout = value != null ? (UInt64)value.m : default(UInt64); }
		}

		public ShaderStageFlags StageFlags {
			get { return m->StageFlags; }
			set { m->StageFlags = value; }
		}
		internal Interop.ObjectTablePushConstantEntryNvx* m {

			get {
				return (Interop.ObjectTablePushConstantEntryNvx*)native.Handle;
			}
		}

		public ObjectTablePushConstantEntryNvx ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.ObjectTablePushConstantEntryNvx));
			Initialize ();
		}

		internal ObjectTablePushConstantEntryNvx (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}


		internal void Initialize ()
		{
		}

	}

	unsafe public partial class PhysicalDeviceFeatures2KHR : MarshalledObject
	{
		public PhysicalDeviceFeatures Features {
			get { return m->Features; }
			set { m->Features = value; }
		}
		internal Interop.PhysicalDeviceFeatures2KHR* m {

			get {
				return (Interop.PhysicalDeviceFeatures2KHR*)native.Handle;
			}
		}

		public PhysicalDeviceFeatures2KHR ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.PhysicalDeviceFeatures2KHR));
			Initialize ();
		}

		internal PhysicalDeviceFeatures2KHR (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}


		internal void Initialize ()
		{
			m->SType = StructureType.PhysicalDeviceFeatures2KHR;
		}

	}

	unsafe public partial class PhysicalDeviceProperties2KHR : MarshalledObject
	{
		PhysicalDeviceProperties lProperties;
		public PhysicalDeviceProperties Properties {
			get { return lProperties; }
			set { lProperties = value; m->Properties = value != null ? *value.m : default(Interop.PhysicalDeviceProperties); }
		}
		internal Interop.PhysicalDeviceProperties2KHR* m {

			get {
				return (Interop.PhysicalDeviceProperties2KHR*)native.Handle;
			}
		}

		public PhysicalDeviceProperties2KHR ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.PhysicalDeviceProperties2KHR));
			Initialize ();
		}

		internal PhysicalDeviceProperties2KHR (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}


		internal void Initialize ()
		{
			m->SType = StructureType.PhysicalDeviceProperties2KHR;
			lProperties = new PhysicalDeviceProperties (new NativePointer (native.Reference, (IntPtr)(&m->Properties)));
		}

	}

	unsafe public partial class FormatProperties2KHR : MarshalledObject
	{
		public FormatProperties FormatProperties {
			get { return m->FormatProperties; }
			set { m->FormatProperties = value; }
		}
		internal Interop.FormatProperties2KHR* m {

			get {
				return (Interop.FormatProperties2KHR*)native.Handle;
			}
		}

		public FormatProperties2KHR ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.FormatProperties2KHR));
			Initialize ();
		}

		internal FormatProperties2KHR (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}


		internal void Initialize ()
		{
			m->SType = StructureType.FormatProperties2KHR;
		}

	}

	unsafe public partial class ImageFormatProperties2KHR : MarshalledObject
	{
		public ImageFormatProperties ImageFormatProperties {
			get { return m->ImageFormatProperties; }
			set { m->ImageFormatProperties = value; }
		}
		internal Interop.ImageFormatProperties2KHR* m {

			get {
				return (Interop.ImageFormatProperties2KHR*)native.Handle;
			}
		}

		public ImageFormatProperties2KHR ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.ImageFormatProperties2KHR));
			Initialize ();
		}

		internal ImageFormatProperties2KHR (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}


		internal void Initialize ()
		{
			m->SType = StructureType.ImageFormatProperties2KHR;
		}

	}

	unsafe public partial class PhysicalDeviceImageFormatInfo2KHR : MarshalledObject
	{
		public Format Format {
			get { return m->Format; }
			set { m->Format = value; }
		}

		public ImageType Type {
			get { return m->Type; }
			set { m->Type = value; }
		}

		public ImageTiling Tiling {
			get { return m->Tiling; }
			set { m->Tiling = value; }
		}

		public ImageUsageFlags Usage {
			get { return m->Usage; }
			set { m->Usage = value; }
		}

		public ImageCreateFlags Flags {
			get { return m->Flags; }
			set { m->Flags = value; }
		}
		internal Interop.PhysicalDeviceImageFormatInfo2KHR* m {

			get {
				return (Interop.PhysicalDeviceImageFormatInfo2KHR*)native.Handle;
			}
		}

		public PhysicalDeviceImageFormatInfo2KHR ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.PhysicalDeviceImageFormatInfo2KHR));
			Initialize ();
		}

		internal PhysicalDeviceImageFormatInfo2KHR (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}


		internal void Initialize ()
		{
			m->SType = StructureType.PhysicalDeviceImageFormatInfo2KHR;
		}

	}

	unsafe public partial class QueueFamilyProperties2KHR : MarshalledObject
	{
		public QueueFamilyProperties QueueFamilyProperties {
			get { return m->QueueFamilyProperties; }
			set { m->QueueFamilyProperties = value; }
		}
		internal Interop.QueueFamilyProperties2KHR* m {

			get {
				return (Interop.QueueFamilyProperties2KHR*)native.Handle;
			}
		}

		public QueueFamilyProperties2KHR ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.QueueFamilyProperties2KHR));
			Initialize ();
		}

		internal QueueFamilyProperties2KHR (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}


		internal void Initialize ()
		{
			m->SType = StructureType.QueueFamilyProperties2KHR;
		}

	}

	unsafe public partial class PhysicalDeviceMemoryProperties2KHR : MarshalledObject
	{
		PhysicalDeviceMemoryProperties lMemoryProperties;
		public PhysicalDeviceMemoryProperties MemoryProperties {
			get { return lMemoryProperties; }
			set { lMemoryProperties = value; m->MemoryProperties = value != null ? *value.m : default(Interop.PhysicalDeviceMemoryProperties); }
		}
		internal Interop.PhysicalDeviceMemoryProperties2KHR* m {

			get {
				return (Interop.PhysicalDeviceMemoryProperties2KHR*)native.Handle;
			}
		}

		public PhysicalDeviceMemoryProperties2KHR ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.PhysicalDeviceMemoryProperties2KHR));
			Initialize ();
		}

		internal PhysicalDeviceMemoryProperties2KHR (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}


		internal void Initialize ()
		{
			m->SType = StructureType.PhysicalDeviceMemoryProperties2KHR;
			lMemoryProperties = new PhysicalDeviceMemoryProperties (new NativePointer (native.Reference, (IntPtr)(&m->MemoryProperties)));
		}

	}

	unsafe public partial class SparseImageFormatProperties2KHR : MarshalledObject
	{
		public SparseImageFormatProperties Properties {
			get { return m->Properties; }
			set { m->Properties = value; }
		}
		internal Interop.SparseImageFormatProperties2KHR* m {

			get {
				return (Interop.SparseImageFormatProperties2KHR*)native.Handle;
			}
		}

		public SparseImageFormatProperties2KHR ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.SparseImageFormatProperties2KHR));
			Initialize ();
		}

		internal SparseImageFormatProperties2KHR (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}


		internal void Initialize ()
		{
			m->SType = StructureType.SparseImageFormatProperties2KHR;
		}

	}

	unsafe public partial class PhysicalDeviceSparseImageFormatInfo2KHR : MarshalledObject
	{
		public Format Format {
			get { return m->Format; }
			set { m->Format = value; }
		}

		public ImageType Type {
			get { return m->Type; }
			set { m->Type = value; }
		}

		public SampleCountFlags Samples {
			get { return m->Samples; }
			set { m->Samples = value; }
		}

		public ImageUsageFlags Usage {
			get { return m->Usage; }
			set { m->Usage = value; }
		}

		public ImageTiling Tiling {
			get { return m->Tiling; }
			set { m->Tiling = value; }
		}
		internal Interop.PhysicalDeviceSparseImageFormatInfo2KHR* m {

			get {
				return (Interop.PhysicalDeviceSparseImageFormatInfo2KHR*)native.Handle;
			}
		}

		public PhysicalDeviceSparseImageFormatInfo2KHR ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.PhysicalDeviceSparseImageFormatInfo2KHR));
			Initialize ();
		}

		internal PhysicalDeviceSparseImageFormatInfo2KHR (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}


		internal void Initialize ()
		{
			m->SType = StructureType.PhysicalDeviceSparseImageFormatInfo2KHR;
		}

	}

	unsafe public partial class PhysicalDevicePushDescriptorPropertiesKHR : MarshalledObject
	{
		public UInt32 MaxPushDescriptors {
			get { return m->MaxPushDescriptors; }
			set { m->MaxPushDescriptors = value; }
		}
		internal Interop.PhysicalDevicePushDescriptorPropertiesKHR* m {

			get {
				return (Interop.PhysicalDevicePushDescriptorPropertiesKHR*)native.Handle;
			}
		}

		public PhysicalDevicePushDescriptorPropertiesKHR ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.PhysicalDevicePushDescriptorPropertiesKHR));
			Initialize ();
		}

		internal PhysicalDevicePushDescriptorPropertiesKHR (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}


		internal void Initialize ()
		{
			m->SType = StructureType.PhysicalDevicePushDescriptorPropertiesKHR;
		}

	}

	unsafe public partial class PresentRegionsKHR : MarshalledObject
	{
		public UInt32 SwapchainCount {
			get { return m->SwapchainCount; }
			set { m->SwapchainCount = value; }
		}

		NativeReference refRegions;
		public PresentRegionKHR[] Regions {
			get {
				if (m->SwapchainCount == 0)
					return null;
				var values = new PresentRegionKHR [m->SwapchainCount];
				unsafe
				{
					Interop.PresentRegionKHR* ptr = (Interop.PresentRegionKHR*)m->Regions;
					for (int i = 0; i < values.Length; i++) {
						values [i] = new PresentRegionKHR ();
						*values [i].m = ptr [i];
					}
				}
				return values;
			}

			set {
				if (value == null) {
					m->SwapchainCount = 0;
					m->Regions = IntPtr.Zero;
					return;
				}
				m->SwapchainCount = (uint)value.Length;
				refRegions = new NativeReference ((int)(sizeof(Interop.PresentRegionKHR)*value.Length));
				m->Regions = refRegions.Handle;
				unsafe
				{
					Interop.PresentRegionKHR* ptr = (Interop.PresentRegionKHR*)m->Regions;
					for (int i = 0; i < value.Length; i++)
						ptr [i] = *value [i].m;
				}
			}
		}
		internal Interop.PresentRegionsKHR* m {

			get {
				return (Interop.PresentRegionsKHR*)native.Handle;
			}
		}

		public PresentRegionsKHR ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.PresentRegionsKHR));
			Initialize ();
		}

		internal PresentRegionsKHR (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}

		override public void Dispose (bool disposing)
		{
			base.Dispose (disposing);
			if (!disposing)
				return;
			refRegions.Dispose ();
			refRegions = null;
		}

		internal void Initialize ()
		{
			m->SType = StructureType.PresentRegionsKHR;
		}

	}

	unsafe public partial class PresentRegionKHR : MarshalledObject
	{
		public UInt32 RectangleCount {
			get { return m->RectangleCount; }
			set { m->RectangleCount = value; }
		}

		NativeReference refRectangles;
		public RectLayerKHR[] Rectangles {
			get {
				if (m->RectangleCount == 0)
					return null;
				var values = new RectLayerKHR [m->RectangleCount];
				unsafe
				{
					RectLayerKHR* ptr = (RectLayerKHR*)m->Rectangles;
					for (int i = 0; i < values.Length; i++) 
						values [i] = ptr [i];
				}
				return values;
			}

			set {
				if (value == null) {
					m->RectangleCount = 0;
					m->Rectangles = IntPtr.Zero;
					return;
				}
				m->RectangleCount = (uint)value.Length;
				refRectangles = new NativeReference ((int)(sizeof(RectLayerKHR)*value.Length));
				m->Rectangles = refRectangles.Handle;
				unsafe
				{
					RectLayerKHR* ptr = (RectLayerKHR*)m->Rectangles;
					for (int i = 0; i < value.Length; i++)
						ptr [i] = value [i];
				}
			}
		}
		internal Interop.PresentRegionKHR* m {

			get {
				return (Interop.PresentRegionKHR*)native.Handle;
			}
		}

		public PresentRegionKHR ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.PresentRegionKHR));
		}

		internal PresentRegionKHR (NativePointer pointer)
		{
			native = pointer;
		}

		override public void Dispose (bool disposing)
		{
			base.Dispose (disposing);
			if (!disposing)
				return;
			refRectangles.Dispose ();
			refRectangles = null;
		}
	}

	unsafe public partial struct RectLayerKHR
	{
		public Offset2D Offset;
		public Extent2D Extent;
		public UInt32 Layer;
	}

	unsafe public partial class PhysicalDeviceVariablePointerFeaturesKHR : MarshalledObject
	{
		public bool VariablePointersStorageBuffer {
			get { return m->VariablePointersStorageBuffer; }
			set { m->VariablePointersStorageBuffer = value; }
		}

		public bool VariablePointers {
			get { return m->VariablePointers; }
			set { m->VariablePointers = value; }
		}
		internal Interop.PhysicalDeviceVariablePointerFeaturesKHR* m {

			get {
				return (Interop.PhysicalDeviceVariablePointerFeaturesKHR*)native.Handle;
			}
		}

		public PhysicalDeviceVariablePointerFeaturesKHR ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.PhysicalDeviceVariablePointerFeaturesKHR));
			Initialize ();
		}

		internal PhysicalDeviceVariablePointerFeaturesKHR (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}


		internal void Initialize ()
		{
			m->SType = StructureType.PhysicalDeviceVariablePointerFeaturesKHR;
		}

	}

	unsafe public partial struct ExternalMemoryPropertiesKHR
	{
		public ExternalMemoryFeatureFlagsKHR ExternalMemoryFeatures;
		public ExternalMemoryHandleTypeFlagsKHR ExportFromImportedHandleTypes;
		public ExternalMemoryHandleTypeFlagsKHR CompatibleHandleTypes;
	}

	unsafe public partial class PhysicalDeviceExternalImageFormatInfoKHR : MarshalledObject
	{
		public ExternalMemoryHandleTypeFlagsKHR HandleType {
			get { return m->HandleType; }
			set { m->HandleType = value; }
		}
		internal Interop.PhysicalDeviceExternalImageFormatInfoKHR* m {

			get {
				return (Interop.PhysicalDeviceExternalImageFormatInfoKHR*)native.Handle;
			}
		}

		public PhysicalDeviceExternalImageFormatInfoKHR ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.PhysicalDeviceExternalImageFormatInfoKHR));
			Initialize ();
		}

		internal PhysicalDeviceExternalImageFormatInfoKHR (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}


		internal void Initialize ()
		{
			m->SType = StructureType.PhysicalDeviceExternalImageFormatInfoKHR;
		}

	}

	unsafe public partial class ExternalImageFormatPropertiesKHR : MarshalledObject
	{
		public ExternalMemoryPropertiesKHR ExternalMemoryProperties {
			get { return m->ExternalMemoryProperties; }
			set { m->ExternalMemoryProperties = value; }
		}
		internal Interop.ExternalImageFormatPropertiesKHR* m {

			get {
				return (Interop.ExternalImageFormatPropertiesKHR*)native.Handle;
			}
		}

		public ExternalImageFormatPropertiesKHR ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.ExternalImageFormatPropertiesKHR));
			Initialize ();
		}

		internal ExternalImageFormatPropertiesKHR (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}


		internal void Initialize ()
		{
			m->SType = StructureType.ExternalImageFormatPropertiesKHR;
		}

	}

	unsafe public partial class PhysicalDeviceExternalBufferInfoKHR : MarshalledObject
	{
		public BufferCreateFlags Flags {
			get { return m->Flags; }
			set { m->Flags = value; }
		}

		public BufferUsageFlags Usage {
			get { return m->Usage; }
			set { m->Usage = value; }
		}

		public ExternalMemoryHandleTypeFlagsKHR HandleType {
			get { return m->HandleType; }
			set { m->HandleType = value; }
		}
		internal Interop.PhysicalDeviceExternalBufferInfoKHR* m {

			get {
				return (Interop.PhysicalDeviceExternalBufferInfoKHR*)native.Handle;
			}
		}

		public PhysicalDeviceExternalBufferInfoKHR ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.PhysicalDeviceExternalBufferInfoKHR));
			Initialize ();
		}

		internal PhysicalDeviceExternalBufferInfoKHR (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}


		internal void Initialize ()
		{
			m->SType = StructureType.PhysicalDeviceExternalBufferInfoKHR;
		}

	}

	unsafe public partial class ExternalBufferPropertiesKHR : MarshalledObject
	{
		public ExternalMemoryPropertiesKHR ExternalMemoryProperties {
			get { return m->ExternalMemoryProperties; }
			set { m->ExternalMemoryProperties = value; }
		}
		internal Interop.ExternalBufferPropertiesKHR* m {

			get {
				return (Interop.ExternalBufferPropertiesKHR*)native.Handle;
			}
		}

		public ExternalBufferPropertiesKHR ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.ExternalBufferPropertiesKHR));
			Initialize ();
		}

		internal ExternalBufferPropertiesKHR (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}


		internal void Initialize ()
		{
			m->SType = StructureType.ExternalBufferPropertiesKHR;
		}

	}

	unsafe public partial class PhysicalDeviceIDPropertiesKHR : MarshalledObject
	{
		public byte[] DeviceUuid {
			get {
				var arr = new byte [16];
				for (int i = 0; i < 16; i++)
					arr [i] = m->DeviceUuid [i];
				return arr;
			}

			set {
				if (value.Length > 16)
					throw new Exception ("array too long");
				for (int i = 0; i < value.Length; i++)
					m->DeviceUuid [i] = value [i];
				for (int i = value.Length; i < 16; i++)
					m->DeviceUuid [i] = 0;
			}
		}

		public byte[] DriverUuid {
			get {
				var arr = new byte [16];
				for (int i = 0; i < 16; i++)
					arr [i] = m->DriverUuid [i];
				return arr;
			}

			set {
				if (value.Length > 16)
					throw new Exception ("array too long");
				for (int i = 0; i < value.Length; i++)
					m->DriverUuid [i] = value [i];
				for (int i = value.Length; i < 16; i++)
					m->DriverUuid [i] = 0;
			}
		}

		public byte[] DeviceLuid {
			get {
				var arr = new byte [8];
				for (int i = 0; i < 8; i++)
					arr [i] = m->DeviceLuid [i];
				return arr;
			}

			set {
				if (value.Length > 8)
					throw new Exception ("array too long");
				for (int i = 0; i < value.Length; i++)
					m->DeviceLuid [i] = value [i];
				for (int i = value.Length; i < 8; i++)
					m->DeviceLuid [i] = 0;
			}
		}

		public UInt32 DeviceNodeMask {
			get { return m->DeviceNodeMask; }
			set { m->DeviceNodeMask = value; }
		}

		public bool DeviceLuidvalid {
			get { return m->DeviceLuidvalid; }
			set { m->DeviceLuidvalid = value; }
		}
		internal Interop.PhysicalDeviceIDPropertiesKHR* m {

			get {
				return (Interop.PhysicalDeviceIDPropertiesKHR*)native.Handle;
			}
		}

		public PhysicalDeviceIDPropertiesKHR ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.PhysicalDeviceIDPropertiesKHR));
			Initialize ();
		}

		internal PhysicalDeviceIDPropertiesKHR (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}


		internal void Initialize ()
		{
			m->SType = StructureType.PhysicalDeviceIDPropertiesKHR;
		}

	}

	unsafe public partial class ExternalMemoryImageCreateInfoKHR : MarshalledObject
	{
		public ExternalMemoryHandleTypeFlagsKHR HandleTypes {
			get { return m->HandleTypes; }
			set { m->HandleTypes = value; }
		}
		internal Interop.ExternalMemoryImageCreateInfoKHR* m {

			get {
				return (Interop.ExternalMemoryImageCreateInfoKHR*)native.Handle;
			}
		}

		public ExternalMemoryImageCreateInfoKHR ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.ExternalMemoryImageCreateInfoKHR));
			Initialize ();
		}

		internal ExternalMemoryImageCreateInfoKHR (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}


		internal void Initialize ()
		{
			m->SType = StructureType.ExternalMemoryImageCreateInfoKHR;
		}

	}

	unsafe public partial class ExternalMemoryBufferCreateInfoKHR : MarshalledObject
	{
		public ExternalMemoryHandleTypeFlagsKHR HandleTypes {
			get { return m->HandleTypes; }
			set { m->HandleTypes = value; }
		}
		internal Interop.ExternalMemoryBufferCreateInfoKHR* m {

			get {
				return (Interop.ExternalMemoryBufferCreateInfoKHR*)native.Handle;
			}
		}

		public ExternalMemoryBufferCreateInfoKHR ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.ExternalMemoryBufferCreateInfoKHR));
			Initialize ();
		}

		internal ExternalMemoryBufferCreateInfoKHR (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}


		internal void Initialize ()
		{
			m->SType = StructureType.ExternalMemoryBufferCreateInfoKHR;
		}

	}

	unsafe public partial class ExportMemoryAllocateInfoKHR : MarshalledObject
	{
		public ExternalMemoryHandleTypeFlagsKHR HandleTypes {
			get { return m->HandleTypes; }
			set { m->HandleTypes = value; }
		}
		internal Interop.ExportMemoryAllocateInfoKHR* m {

			get {
				return (Interop.ExportMemoryAllocateInfoKHR*)native.Handle;
			}
		}

		public ExportMemoryAllocateInfoKHR ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.ExportMemoryAllocateInfoKHR));
			Initialize ();
		}

		internal ExportMemoryAllocateInfoKHR (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}


		internal void Initialize ()
		{
			m->SType = StructureType.ExportMemoryAllocateInfoKHR;
		}

	}

	unsafe public partial class MemoryWin32HandlePropertiesKHR : MarshalledObject
	{
		public UInt32 MemoryTypeBits {
			get { return m->MemoryTypeBits; }
			set { m->MemoryTypeBits = value; }
		}
		internal Interop.MemoryWin32HandlePropertiesKHR* m {

			get {
				return (Interop.MemoryWin32HandlePropertiesKHR*)native.Handle;
			}
		}

		public MemoryWin32HandlePropertiesKHR ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.MemoryWin32HandlePropertiesKHR));
			Initialize ();
		}

		internal MemoryWin32HandlePropertiesKHR (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}


		internal void Initialize ()
		{
			m->SType = StructureType.MemoryWin32HandlePropertiesKHR;
		}

	}

	unsafe public partial class MemoryGetWin32HandleInfoKHR : MarshalledObject
	{
		DeviceMemory lMemory;
		public DeviceMemory Memory {
			get { return lMemory; }
			set { lMemory = value; m->Memory = value != null ? (UInt64)value.m : default(UInt64); }
		}

		public ExternalMemoryHandleTypeFlagsKHR HandleType {
			get { return m->HandleType; }
			set { m->HandleType = value; }
		}
		internal Interop.MemoryGetWin32HandleInfoKHR* m {

			get {
				return (Interop.MemoryGetWin32HandleInfoKHR*)native.Handle;
			}
		}

		public MemoryGetWin32HandleInfoKHR ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.MemoryGetWin32HandleInfoKHR));
			Initialize ();
		}

		internal MemoryGetWin32HandleInfoKHR (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}


		internal void Initialize ()
		{
			m->SType = StructureType.MemoryGetWin32HandleInfoKHR;
		}

	}

	unsafe public partial class ImportMemoryFdInfoKHR : MarshalledObject
	{
		public ExternalMemoryHandleTypeFlagsKHR HandleType {
			get { return m->HandleType; }
			set { m->HandleType = value; }
		}

		public int Fd {
			get { return m->Fd; }
			set { m->Fd = value; }
		}
		internal Interop.ImportMemoryFdInfoKHR* m {

			get {
				return (Interop.ImportMemoryFdInfoKHR*)native.Handle;
			}
		}

		public ImportMemoryFdInfoKHR ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.ImportMemoryFdInfoKHR));
			Initialize ();
		}

		internal ImportMemoryFdInfoKHR (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}


		internal void Initialize ()
		{
			m->SType = StructureType.ImportMemoryFdInfoKHR;
		}

	}

	unsafe public partial class MemoryFdPropertiesKHR : MarshalledObject
	{
		public UInt32 MemoryTypeBits {
			get { return m->MemoryTypeBits; }
			set { m->MemoryTypeBits = value; }
		}
		internal Interop.MemoryFdPropertiesKHR* m {

			get {
				return (Interop.MemoryFdPropertiesKHR*)native.Handle;
			}
		}

		public MemoryFdPropertiesKHR ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.MemoryFdPropertiesKHR));
			Initialize ();
		}

		internal MemoryFdPropertiesKHR (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}


		internal void Initialize ()
		{
			m->SType = StructureType.MemoryFdPropertiesKHR;
		}

	}

	unsafe public partial class MemoryGetFdInfoKHR : MarshalledObject
	{
		DeviceMemory lMemory;
		public DeviceMemory Memory {
			get { return lMemory; }
			set { lMemory = value; m->Memory = value != null ? (UInt64)value.m : default(UInt64); }
		}

		public ExternalMemoryHandleTypeFlagsKHR HandleType {
			get { return m->HandleType; }
			set { m->HandleType = value; }
		}
		internal Interop.MemoryGetFdInfoKHR* m {

			get {
				return (Interop.MemoryGetFdInfoKHR*)native.Handle;
			}
		}

		public MemoryGetFdInfoKHR ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.MemoryGetFdInfoKHR));
			Initialize ();
		}

		internal MemoryGetFdInfoKHR (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}


		internal void Initialize ()
		{
			m->SType = StructureType.MemoryGetFdInfoKHR;
		}

	}

	unsafe public partial class Win32KeyedMutexAcquireReleaseInfoKHR : MarshalledObject
	{
		public UInt32 AcquireCount {
			get { return m->AcquireCount; }
			set { m->AcquireCount = value; }
		}

		NativeReference refAcquireSyncs;
		public DeviceMemory[] AcquireSyncs {
			get {
				if (m->AcquireCount == 0)
					return null;
				var values = new DeviceMemory [m->AcquireCount];
				unsafe
				{
					UInt64* ptr = (UInt64*)m->AcquireSyncs;
					for (int i = 0; i < values.Length; i++) {
						values [i] = new DeviceMemory ();
						values [i].m = ptr [i];
					}
				}
				return values;
			}

			set {
				if (value == null) {
					m->AcquireCount = 0;
					m->AcquireSyncs = IntPtr.Zero;
					return;
				}
				m->AcquireCount = (uint)value.Length;
				refAcquireSyncs = new NativeReference ((int)(sizeof(UInt64)*value.Length));
				m->AcquireSyncs = refAcquireSyncs.Handle;
				unsafe
				{
					UInt64* ptr = (UInt64*)m->AcquireSyncs;
					for (int i = 0; i < value.Length; i++)
						ptr [i] = value [i].m;
				}
			}
		}

		NativeReference refAcquireKeys;
		public UInt64[] AcquireKeys {
			get {
				if (m->AcquireCount == 0)
					return null;
				var values = new UInt64 [m->AcquireCount];
				unsafe
				{
					UInt64* ptr = (UInt64*)m->AcquireKeys;
					for (int i = 0; i < values.Length; i++) 
						values [i] = ptr [i];
				}
				return values;
			}

			set {
				if (value == null) {
					m->AcquireCount = 0;
					m->AcquireKeys = IntPtr.Zero;
					return;
				}
				m->AcquireCount = (uint)value.Length;
				refAcquireKeys = new NativeReference ((int)(sizeof(UInt64)*value.Length));
				m->AcquireKeys = refAcquireKeys.Handle;
				unsafe
				{
					UInt64* ptr = (UInt64*)m->AcquireKeys;
					for (int i = 0; i < value.Length; i++)
						ptr [i] = value [i];
				}
			}
		}

		NativeReference refAcquireTimeouts;
		public UInt32[] AcquireTimeouts {
			get {
				if (m->AcquireCount == 0)
					return null;
				var values = new UInt32 [m->AcquireCount];
				unsafe
				{
					UInt32* ptr = (UInt32*)m->AcquireTimeouts;
					for (int i = 0; i < values.Length; i++) 
						values [i] = ptr [i];
				}
				return values;
			}

			set {
				if (value == null) {
					m->AcquireCount = 0;
					m->AcquireTimeouts = IntPtr.Zero;
					return;
				}
				m->AcquireCount = (uint)value.Length;
				refAcquireTimeouts = new NativeReference ((int)(sizeof(UInt32)*value.Length));
				m->AcquireTimeouts = refAcquireTimeouts.Handle;
				unsafe
				{
					UInt32* ptr = (UInt32*)m->AcquireTimeouts;
					for (int i = 0; i < value.Length; i++)
						ptr [i] = value [i];
				}
			}
		}

		public UInt32 ReleaseCount {
			get { return m->ReleaseCount; }
			set { m->ReleaseCount = value; }
		}

		NativeReference refReleaseSyncs;
		public DeviceMemory[] ReleaseSyncs {
			get {
				if (m->ReleaseCount == 0)
					return null;
				var values = new DeviceMemory [m->ReleaseCount];
				unsafe
				{
					UInt64* ptr = (UInt64*)m->ReleaseSyncs;
					for (int i = 0; i < values.Length; i++) {
						values [i] = new DeviceMemory ();
						values [i].m = ptr [i];
					}
				}
				return values;
			}

			set {
				if (value == null) {
					m->ReleaseCount = 0;
					m->ReleaseSyncs = IntPtr.Zero;
					return;
				}
				m->ReleaseCount = (uint)value.Length;
				refReleaseSyncs = new NativeReference ((int)(sizeof(UInt64)*value.Length));
				m->ReleaseSyncs = refReleaseSyncs.Handle;
				unsafe
				{
					UInt64* ptr = (UInt64*)m->ReleaseSyncs;
					for (int i = 0; i < value.Length; i++)
						ptr [i] = value [i].m;
				}
			}
		}

		NativeReference refReleaseKeys;
		public UInt64[] ReleaseKeys {
			get {
				if (m->ReleaseCount == 0)
					return null;
				var values = new UInt64 [m->ReleaseCount];
				unsafe
				{
					UInt64* ptr = (UInt64*)m->ReleaseKeys;
					for (int i = 0; i < values.Length; i++) 
						values [i] = ptr [i];
				}
				return values;
			}

			set {
				if (value == null) {
					m->ReleaseCount = 0;
					m->ReleaseKeys = IntPtr.Zero;
					return;
				}
				m->ReleaseCount = (uint)value.Length;
				refReleaseKeys = new NativeReference ((int)(sizeof(UInt64)*value.Length));
				m->ReleaseKeys = refReleaseKeys.Handle;
				unsafe
				{
					UInt64* ptr = (UInt64*)m->ReleaseKeys;
					for (int i = 0; i < value.Length; i++)
						ptr [i] = value [i];
				}
			}
		}
		internal Interop.Win32KeyedMutexAcquireReleaseInfoKHR* m {

			get {
				return (Interop.Win32KeyedMutexAcquireReleaseInfoKHR*)native.Handle;
			}
		}

		public Win32KeyedMutexAcquireReleaseInfoKHR ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.Win32KeyedMutexAcquireReleaseInfoKHR));
			Initialize ();
		}

		internal Win32KeyedMutexAcquireReleaseInfoKHR (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}

		override public void Dispose (bool disposing)
		{
			base.Dispose (disposing);
			if (!disposing)
				return;
			refAcquireSyncs.Dispose ();
			refAcquireSyncs = null;
			refAcquireKeys.Dispose ();
			refAcquireKeys = null;
			refAcquireTimeouts.Dispose ();
			refAcquireTimeouts = null;
			refReleaseSyncs.Dispose ();
			refReleaseSyncs = null;
			refReleaseKeys.Dispose ();
			refReleaseKeys = null;
		}

		internal void Initialize ()
		{
			m->SType = StructureType.Win32KeyedMutexAcquireReleaseInfoKHR;
		}

	}

	unsafe public partial class PhysicalDeviceExternalSemaphoreInfoKHR : MarshalledObject
	{
		public ExternalSemaphoreHandleTypeFlagsKHR HandleType {
			get { return m->HandleType; }
			set { m->HandleType = value; }
		}
		internal Interop.PhysicalDeviceExternalSemaphoreInfoKHR* m {

			get {
				return (Interop.PhysicalDeviceExternalSemaphoreInfoKHR*)native.Handle;
			}
		}

		public PhysicalDeviceExternalSemaphoreInfoKHR ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.PhysicalDeviceExternalSemaphoreInfoKHR));
			Initialize ();
		}

		internal PhysicalDeviceExternalSemaphoreInfoKHR (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}


		internal void Initialize ()
		{
			m->SType = StructureType.PhysicalDeviceExternalSemaphoreInfoKHR;
		}

	}

	unsafe public partial class ExternalSemaphorePropertiesKHR : MarshalledObject
	{
		public ExternalSemaphoreHandleTypeFlagsKHR ExportFromImportedHandleTypes {
			get { return m->ExportFromImportedHandleTypes; }
			set { m->ExportFromImportedHandleTypes = value; }
		}

		public ExternalSemaphoreHandleTypeFlagsKHR CompatibleHandleTypes {
			get { return m->CompatibleHandleTypes; }
			set { m->CompatibleHandleTypes = value; }
		}

		public ExternalSemaphoreFeatureFlagsKHR ExternalSemaphoreFeatures {
			get { return m->ExternalSemaphoreFeatures; }
			set { m->ExternalSemaphoreFeatures = value; }
		}
		internal Interop.ExternalSemaphorePropertiesKHR* m {

			get {
				return (Interop.ExternalSemaphorePropertiesKHR*)native.Handle;
			}
		}

		public ExternalSemaphorePropertiesKHR ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.ExternalSemaphorePropertiesKHR));
			Initialize ();
		}

		internal ExternalSemaphorePropertiesKHR (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}


		internal void Initialize ()
		{
			m->SType = StructureType.ExternalSemaphorePropertiesKHR;
		}

	}

	unsafe public partial class ExportSemaphoreCreateInfoKHR : MarshalledObject
	{
		public ExternalSemaphoreHandleTypeFlagsKHR HandleTypes {
			get { return m->HandleTypes; }
			set { m->HandleTypes = value; }
		}
		internal Interop.ExportSemaphoreCreateInfoKHR* m {

			get {
				return (Interop.ExportSemaphoreCreateInfoKHR*)native.Handle;
			}
		}

		public ExportSemaphoreCreateInfoKHR ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.ExportSemaphoreCreateInfoKHR));
			Initialize ();
		}

		internal ExportSemaphoreCreateInfoKHR (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}


		internal void Initialize ()
		{
			m->SType = StructureType.ExportSemaphoreCreateInfoKHR;
		}

	}

	unsafe public partial class D3D12FenceSubmitInfoKHR : MarshalledObject
	{
		public UInt32 WaitSemaphoreValuesCount {
			get { return m->WaitSemaphoreValuesCount; }
			set { m->WaitSemaphoreValuesCount = value; }
		}

		NativeReference refWaitSemaphoreValues;
		public UInt64[] WaitSemaphoreValues {
			get {
				if (m->WaitSemaphoreValuesCount == 0)
					return null;
				var values = new UInt64 [m->WaitSemaphoreValuesCount];
				unsafe
				{
					UInt64* ptr = (UInt64*)m->WaitSemaphoreValues;
					for (int i = 0; i < values.Length; i++) 
						values [i] = ptr [i];
				}
				return values;
			}

			set {
				if (value == null) {
					m->WaitSemaphoreValuesCount = 0;
					m->WaitSemaphoreValues = IntPtr.Zero;
					return;
				}
				m->WaitSemaphoreValuesCount = (uint)value.Length;
				refWaitSemaphoreValues = new NativeReference ((int)(sizeof(UInt64)*value.Length));
				m->WaitSemaphoreValues = refWaitSemaphoreValues.Handle;
				unsafe
				{
					UInt64* ptr = (UInt64*)m->WaitSemaphoreValues;
					for (int i = 0; i < value.Length; i++)
						ptr [i] = value [i];
				}
			}
		}

		public UInt32 SignalSemaphoreValuesCount {
			get { return m->SignalSemaphoreValuesCount; }
			set { m->SignalSemaphoreValuesCount = value; }
		}

		NativeReference refSignalSemaphoreValues;
		public UInt64[] SignalSemaphoreValues {
			get {
				if (m->SignalSemaphoreValuesCount == 0)
					return null;
				var values = new UInt64 [m->SignalSemaphoreValuesCount];
				unsafe
				{
					UInt64* ptr = (UInt64*)m->SignalSemaphoreValues;
					for (int i = 0; i < values.Length; i++) 
						values [i] = ptr [i];
				}
				return values;
			}

			set {
				if (value == null) {
					m->SignalSemaphoreValuesCount = 0;
					m->SignalSemaphoreValues = IntPtr.Zero;
					return;
				}
				m->SignalSemaphoreValuesCount = (uint)value.Length;
				refSignalSemaphoreValues = new NativeReference ((int)(sizeof(UInt64)*value.Length));
				m->SignalSemaphoreValues = refSignalSemaphoreValues.Handle;
				unsafe
				{
					UInt64* ptr = (UInt64*)m->SignalSemaphoreValues;
					for (int i = 0; i < value.Length; i++)
						ptr [i] = value [i];
				}
			}
		}
		internal Interop.D3D12FenceSubmitInfoKHR* m {

			get {
				return (Interop.D3D12FenceSubmitInfoKHR*)native.Handle;
			}
		}

		public D3D12FenceSubmitInfoKHR ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.D3D12FenceSubmitInfoKHR));
			Initialize ();
		}

		internal D3D12FenceSubmitInfoKHR (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}

		override public void Dispose (bool disposing)
		{
			base.Dispose (disposing);
			if (!disposing)
				return;
			refWaitSemaphoreValues.Dispose ();
			refWaitSemaphoreValues = null;
			refSignalSemaphoreValues.Dispose ();
			refSignalSemaphoreValues = null;
		}

		internal void Initialize ()
		{
			m->SType = StructureType.D3D12FenceSubmitInfoKHR;
		}

	}

	unsafe public partial class SemaphoreGetWin32HandleInfoKHR : MarshalledObject
	{
		Semaphore lSemaphore;
		public Semaphore Semaphore {
			get { return lSemaphore; }
			set { lSemaphore = value; m->Semaphore = value != null ? (UInt64)value.m : default(UInt64); }
		}

		public ExternalSemaphoreHandleTypeFlagsKHR HandleType {
			get { return m->HandleType; }
			set { m->HandleType = value; }
		}
		internal Interop.SemaphoreGetWin32HandleInfoKHR* m {

			get {
				return (Interop.SemaphoreGetWin32HandleInfoKHR*)native.Handle;
			}
		}

		public SemaphoreGetWin32HandleInfoKHR ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.SemaphoreGetWin32HandleInfoKHR));
			Initialize ();
		}

		internal SemaphoreGetWin32HandleInfoKHR (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}


		internal void Initialize ()
		{
			m->SType = StructureType.SemaphoreGetWin32HandleInfoKHR;
		}

	}

	unsafe public partial class ImportSemaphoreFdInfoKHR : MarshalledObject
	{
		Semaphore lSemaphore;
		public Semaphore Semaphore {
			get { return lSemaphore; }
			set { lSemaphore = value; m->Semaphore = value != null ? (UInt64)value.m : default(UInt64); }
		}

		public SemaphoreImportFlagsKHR Flags {
			get { return m->Flags; }
			set { m->Flags = value; }
		}

		public ExternalSemaphoreHandleTypeFlagsKHR HandleType {
			get { return m->HandleType; }
			set { m->HandleType = value; }
		}

		public int Fd {
			get { return m->Fd; }
			set { m->Fd = value; }
		}
		internal Interop.ImportSemaphoreFdInfoKHR* m {

			get {
				return (Interop.ImportSemaphoreFdInfoKHR*)native.Handle;
			}
		}

		public ImportSemaphoreFdInfoKHR ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.ImportSemaphoreFdInfoKHR));
			Initialize ();
		}

		internal ImportSemaphoreFdInfoKHR (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}


		internal void Initialize ()
		{
			m->SType = StructureType.ImportSemaphoreFdInfoKHR;
		}

	}

	unsafe public partial class SemaphoreGetFdInfoKHR : MarshalledObject
	{
		Semaphore lSemaphore;
		public Semaphore Semaphore {
			get { return lSemaphore; }
			set { lSemaphore = value; m->Semaphore = value != null ? (UInt64)value.m : default(UInt64); }
		}

		public ExternalSemaphoreHandleTypeFlagsKHR HandleType {
			get { return m->HandleType; }
			set { m->HandleType = value; }
		}
		internal Interop.SemaphoreGetFdInfoKHR* m {

			get {
				return (Interop.SemaphoreGetFdInfoKHR*)native.Handle;
			}
		}

		public SemaphoreGetFdInfoKHR ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.SemaphoreGetFdInfoKHR));
			Initialize ();
		}

		internal SemaphoreGetFdInfoKHR (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}


		internal void Initialize ()
		{
			m->SType = StructureType.SemaphoreGetFdInfoKHR;
		}

	}

	unsafe public partial class PhysicalDeviceExternalFenceInfoKHR : MarshalledObject
	{
		public ExternalFenceHandleTypeFlagsKHR HandleType {
			get { return m->HandleType; }
			set { m->HandleType = value; }
		}
		internal Interop.PhysicalDeviceExternalFenceInfoKHR* m {

			get {
				return (Interop.PhysicalDeviceExternalFenceInfoKHR*)native.Handle;
			}
		}

		public PhysicalDeviceExternalFenceInfoKHR ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.PhysicalDeviceExternalFenceInfoKHR));
			Initialize ();
		}

		internal PhysicalDeviceExternalFenceInfoKHR (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}


		internal void Initialize ()
		{
			m->SType = StructureType.PhysicalDeviceExternalFenceInfoKHR;
		}

	}

	unsafe public partial class ExternalFencePropertiesKHR : MarshalledObject
	{
		public ExternalFenceHandleTypeFlagsKHR ExportFromImportedHandleTypes {
			get { return m->ExportFromImportedHandleTypes; }
			set { m->ExportFromImportedHandleTypes = value; }
		}

		public ExternalFenceHandleTypeFlagsKHR CompatibleHandleTypes {
			get { return m->CompatibleHandleTypes; }
			set { m->CompatibleHandleTypes = value; }
		}

		public ExternalFenceFeatureFlagsKHR ExternalFenceFeatures {
			get { return m->ExternalFenceFeatures; }
			set { m->ExternalFenceFeatures = value; }
		}
		internal Interop.ExternalFencePropertiesKHR* m {

			get {
				return (Interop.ExternalFencePropertiesKHR*)native.Handle;
			}
		}

		public ExternalFencePropertiesKHR ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.ExternalFencePropertiesKHR));
			Initialize ();
		}

		internal ExternalFencePropertiesKHR (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}


		internal void Initialize ()
		{
			m->SType = StructureType.ExternalFencePropertiesKHR;
		}

	}

	unsafe public partial class ExportFenceCreateInfoKHR : MarshalledObject
	{
		public ExternalFenceHandleTypeFlagsKHR HandleTypes {
			get { return m->HandleTypes; }
			set { m->HandleTypes = value; }
		}
		internal Interop.ExportFenceCreateInfoKHR* m {

			get {
				return (Interop.ExportFenceCreateInfoKHR*)native.Handle;
			}
		}

		public ExportFenceCreateInfoKHR ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.ExportFenceCreateInfoKHR));
			Initialize ();
		}

		internal ExportFenceCreateInfoKHR (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}


		internal void Initialize ()
		{
			m->SType = StructureType.ExportFenceCreateInfoKHR;
		}

	}

	unsafe public partial class FenceGetWin32HandleInfoKHR : MarshalledObject
	{
		Fence lFence;
		public Fence Fence {
			get { return lFence; }
			set { lFence = value; m->Fence = value != null ? (UInt64)value.m : default(UInt64); }
		}

		public ExternalFenceHandleTypeFlagsKHR HandleType {
			get { return m->HandleType; }
			set { m->HandleType = value; }
		}
		internal Interop.FenceGetWin32HandleInfoKHR* m {

			get {
				return (Interop.FenceGetWin32HandleInfoKHR*)native.Handle;
			}
		}

		public FenceGetWin32HandleInfoKHR ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.FenceGetWin32HandleInfoKHR));
			Initialize ();
		}

		internal FenceGetWin32HandleInfoKHR (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}


		internal void Initialize ()
		{
			m->SType = StructureType.FenceGetWin32HandleInfoKHR;
		}

	}

	unsafe public partial class ImportFenceFdInfoKHR : MarshalledObject
	{
		Fence lFence;
		public Fence Fence {
			get { return lFence; }
			set { lFence = value; m->Fence = value != null ? (UInt64)value.m : default(UInt64); }
		}

		public FenceImportFlagsKHR Flags {
			get { return m->Flags; }
			set { m->Flags = value; }
		}

		public ExternalFenceHandleTypeFlagsKHR HandleType {
			get { return m->HandleType; }
			set { m->HandleType = value; }
		}

		public int Fd {
			get { return m->Fd; }
			set { m->Fd = value; }
		}
		internal Interop.ImportFenceFdInfoKHR* m {

			get {
				return (Interop.ImportFenceFdInfoKHR*)native.Handle;
			}
		}

		public ImportFenceFdInfoKHR ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.ImportFenceFdInfoKHR));
			Initialize ();
		}

		internal ImportFenceFdInfoKHR (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}


		internal void Initialize ()
		{
			m->SType = StructureType.ImportFenceFdInfoKHR;
		}

	}

	unsafe public partial class FenceGetFdInfoKHR : MarshalledObject
	{
		Fence lFence;
		public Fence Fence {
			get { return lFence; }
			set { lFence = value; m->Fence = value != null ? (UInt64)value.m : default(UInt64); }
		}

		public ExternalFenceHandleTypeFlagsKHR HandleType {
			get { return m->HandleType; }
			set { m->HandleType = value; }
		}
		internal Interop.FenceGetFdInfoKHR* m {

			get {
				return (Interop.FenceGetFdInfoKHR*)native.Handle;
			}
		}

		public FenceGetFdInfoKHR ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.FenceGetFdInfoKHR));
			Initialize ();
		}

		internal FenceGetFdInfoKHR (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}


		internal void Initialize ()
		{
			m->SType = StructureType.FenceGetFdInfoKHR;
		}

	}

	unsafe public partial class PhysicalDeviceMultiviewFeaturesKhx : MarshalledObject
	{
		public bool Multiview {
			get { return m->Multiview; }
			set { m->Multiview = value; }
		}

		public bool MultiviewGeometryShader {
			get { return m->MultiviewGeometryShader; }
			set { m->MultiviewGeometryShader = value; }
		}

		public bool MultiviewTessellationShader {
			get { return m->MultiviewTessellationShader; }
			set { m->MultiviewTessellationShader = value; }
		}
		internal Interop.PhysicalDeviceMultiviewFeaturesKhx* m {

			get {
				return (Interop.PhysicalDeviceMultiviewFeaturesKhx*)native.Handle;
			}
		}

		public PhysicalDeviceMultiviewFeaturesKhx ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.PhysicalDeviceMultiviewFeaturesKhx));
			Initialize ();
		}

		internal PhysicalDeviceMultiviewFeaturesKhx (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}


		internal void Initialize ()
		{
			m->SType = StructureType.PhysicalDeviceMultiviewFeaturesKhx;
		}

	}

	unsafe public partial class PhysicalDeviceMultiviewPropertiesKhx : MarshalledObject
	{
		public UInt32 MaxMultiviewViewCount {
			get { return m->MaxMultiviewViewCount; }
			set { m->MaxMultiviewViewCount = value; }
		}

		public UInt32 MaxMultiviewInstanceIndex {
			get { return m->MaxMultiviewInstanceIndex; }
			set { m->MaxMultiviewInstanceIndex = value; }
		}
		internal Interop.PhysicalDeviceMultiviewPropertiesKhx* m {

			get {
				return (Interop.PhysicalDeviceMultiviewPropertiesKhx*)native.Handle;
			}
		}

		public PhysicalDeviceMultiviewPropertiesKhx ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.PhysicalDeviceMultiviewPropertiesKhx));
			Initialize ();
		}

		internal PhysicalDeviceMultiviewPropertiesKhx (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}


		internal void Initialize ()
		{
			m->SType = StructureType.PhysicalDeviceMultiviewPropertiesKhx;
		}

	}

	unsafe public partial class RenderPassMultiviewCreateInfoKhx : MarshalledObject
	{
		public UInt32 SubpassCount {
			get { return m->SubpassCount; }
			set { m->SubpassCount = value; }
		}

		NativeReference refViewMasks;
		public UInt32[] ViewMasks {
			get {
				if (m->SubpassCount == 0)
					return null;
				var values = new UInt32 [m->SubpassCount];
				unsafe
				{
					UInt32* ptr = (UInt32*)m->ViewMasks;
					for (int i = 0; i < values.Length; i++) 
						values [i] = ptr [i];
				}
				return values;
			}

			set {
				if (value == null) {
					m->SubpassCount = 0;
					m->ViewMasks = IntPtr.Zero;
					return;
				}
				m->SubpassCount = (uint)value.Length;
				refViewMasks = new NativeReference ((int)(sizeof(UInt32)*value.Length));
				m->ViewMasks = refViewMasks.Handle;
				unsafe
				{
					UInt32* ptr = (UInt32*)m->ViewMasks;
					for (int i = 0; i < value.Length; i++)
						ptr [i] = value [i];
				}
			}
		}

		public UInt32 DependencyCount {
			get { return m->DependencyCount; }
			set { m->DependencyCount = value; }
		}

		NativeReference refViewOffsets;
		public Int32[] ViewOffsets {
			get {
				if (m->DependencyCount == 0)
					return null;
				var values = new Int32 [m->DependencyCount];
				unsafe
				{
					Int32* ptr = (Int32*)m->ViewOffsets;
					for (int i = 0; i < values.Length; i++) 
						values [i] = ptr [i];
				}
				return values;
			}

			set {
				if (value == null) {
					m->DependencyCount = 0;
					m->ViewOffsets = IntPtr.Zero;
					return;
				}
				m->DependencyCount = (uint)value.Length;
				refViewOffsets = new NativeReference ((int)(sizeof(Int32)*value.Length));
				m->ViewOffsets = refViewOffsets.Handle;
				unsafe
				{
					Int32* ptr = (Int32*)m->ViewOffsets;
					for (int i = 0; i < value.Length; i++)
						ptr [i] = value [i];
				}
			}
		}

		public UInt32 CorrelationMaskCount {
			get { return m->CorrelationMaskCount; }
			set { m->CorrelationMaskCount = value; }
		}

		NativeReference refCorrelationMasks;
		public UInt32[] CorrelationMasks {
			get {
				if (m->CorrelationMaskCount == 0)
					return null;
				var values = new UInt32 [m->CorrelationMaskCount];
				unsafe
				{
					UInt32* ptr = (UInt32*)m->CorrelationMasks;
					for (int i = 0; i < values.Length; i++) 
						values [i] = ptr [i];
				}
				return values;
			}

			set {
				if (value == null) {
					m->CorrelationMaskCount = 0;
					m->CorrelationMasks = IntPtr.Zero;
					return;
				}
				m->CorrelationMaskCount = (uint)value.Length;
				refCorrelationMasks = new NativeReference ((int)(sizeof(UInt32)*value.Length));
				m->CorrelationMasks = refCorrelationMasks.Handle;
				unsafe
				{
					UInt32* ptr = (UInt32*)m->CorrelationMasks;
					for (int i = 0; i < value.Length; i++)
						ptr [i] = value [i];
				}
			}
		}
		internal Interop.RenderPassMultiviewCreateInfoKhx* m {

			get {
				return (Interop.RenderPassMultiviewCreateInfoKhx*)native.Handle;
			}
		}

		public RenderPassMultiviewCreateInfoKhx ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.RenderPassMultiviewCreateInfoKhx));
			Initialize ();
		}

		internal RenderPassMultiviewCreateInfoKhx (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}

		override public void Dispose (bool disposing)
		{
			base.Dispose (disposing);
			if (!disposing)
				return;
			refViewMasks.Dispose ();
			refViewMasks = null;
			refViewOffsets.Dispose ();
			refViewOffsets = null;
			refCorrelationMasks.Dispose ();
			refCorrelationMasks = null;
		}

		internal void Initialize ()
		{
			m->SType = StructureType.RenderPassMultiviewCreateInfoKhx;
		}

	}

	unsafe public partial class SurfaceCapabilities2Ext : MarshalledObject
	{
		public UInt32 MinImageCount {
			get { return m->MinImageCount; }
			set { m->MinImageCount = value; }
		}

		public UInt32 MaxImageCount {
			get { return m->MaxImageCount; }
			set { m->MaxImageCount = value; }
		}

		public Extent2D CurrentExtent {
			get { return m->CurrentExtent; }
			set { m->CurrentExtent = value; }
		}

		public Extent2D MinImageExtent {
			get { return m->MinImageExtent; }
			set { m->MinImageExtent = value; }
		}

		public Extent2D MaxImageExtent {
			get { return m->MaxImageExtent; }
			set { m->MaxImageExtent = value; }
		}

		public UInt32 MaxImageArrayLayers {
			get { return m->MaxImageArrayLayers; }
			set { m->MaxImageArrayLayers = value; }
		}

		public SurfaceTransformFlagsKHR SupportedTransforms {
			get { return m->SupportedTransforms; }
			set { m->SupportedTransforms = value; }
		}

		public SurfaceTransformFlagsKHR CurrentTransform {
			get { return m->CurrentTransform; }
			set { m->CurrentTransform = value; }
		}

		public CompositeAlphaFlagsKHR SupportedCompositeAlpha {
			get { return m->SupportedCompositeAlpha; }
			set { m->SupportedCompositeAlpha = value; }
		}

		public ImageUsageFlags SupportedUsageFlags {
			get { return m->SupportedUsageFlags; }
			set { m->SupportedUsageFlags = value; }
		}

		public SurfaceCounterFlagsExt SupportedSurfaceCounters {
			get { return m->SupportedSurfaceCounters; }
			set { m->SupportedSurfaceCounters = value; }
		}
		internal Interop.SurfaceCapabilities2Ext* m {

			get {
				return (Interop.SurfaceCapabilities2Ext*)native.Handle;
			}
		}

		public SurfaceCapabilities2Ext ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.SurfaceCapabilities2Ext));
			Initialize ();
		}

		internal SurfaceCapabilities2Ext (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}


		internal void Initialize ()
		{
			m->SType = StructureType.SurfaceCapabilities2Ext;
		}

	}

	unsafe public partial class DisplayPowerInfoExt : MarshalledObject
	{
		public DisplayPowerStateExt PowerState {
			get { return m->PowerState; }
			set { m->PowerState = value; }
		}
		internal Interop.DisplayPowerInfoExt* m {

			get {
				return (Interop.DisplayPowerInfoExt*)native.Handle;
			}
		}

		public DisplayPowerInfoExt ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.DisplayPowerInfoExt));
			Initialize ();
		}

		internal DisplayPowerInfoExt (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}


		internal void Initialize ()
		{
			m->SType = StructureType.DisplayPowerInfoExt;
		}

	}

	unsafe public partial class DeviceEventInfoExt : MarshalledObject
	{
		public DeviceEventTypeExt DeviceEvent {
			get { return m->DeviceEvent; }
			set { m->DeviceEvent = value; }
		}
		internal Interop.DeviceEventInfoExt* m {

			get {
				return (Interop.DeviceEventInfoExt*)native.Handle;
			}
		}

		public DeviceEventInfoExt ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.DeviceEventInfoExt));
			Initialize ();
		}

		internal DeviceEventInfoExt (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}


		internal void Initialize ()
		{
			m->SType = StructureType.DeviceEventInfoExt;
		}

	}

	unsafe public partial class DisplayEventInfoExt : MarshalledObject
	{
		public DisplayEventTypeExt DisplayEvent {
			get { return m->DisplayEvent; }
			set { m->DisplayEvent = value; }
		}
		internal Interop.DisplayEventInfoExt* m {

			get {
				return (Interop.DisplayEventInfoExt*)native.Handle;
			}
		}

		public DisplayEventInfoExt ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.DisplayEventInfoExt));
			Initialize ();
		}

		internal DisplayEventInfoExt (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}


		internal void Initialize ()
		{
			m->SType = StructureType.DisplayEventInfoExt;
		}

	}

	unsafe public partial class SwapchainCounterCreateInfoExt : MarshalledObject
	{
		public SurfaceCounterFlagsExt SurfaceCounters {
			get { return m->SurfaceCounters; }
			set { m->SurfaceCounters = value; }
		}
		internal Interop.SwapchainCounterCreateInfoExt* m {

			get {
				return (Interop.SwapchainCounterCreateInfoExt*)native.Handle;
			}
		}

		public SwapchainCounterCreateInfoExt ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.SwapchainCounterCreateInfoExt));
			Initialize ();
		}

		internal SwapchainCounterCreateInfoExt (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}


		internal void Initialize ()
		{
			m->SType = StructureType.SwapchainCounterCreateInfoExt;
		}

	}

	unsafe public partial class MemoryAllocateFlagsInfoKhx : MarshalledObject
	{
		public MemoryAllocateFlagsKhx Flags {
			get { return m->Flags; }
			set { m->Flags = value; }
		}

		public UInt32 DeviceMask {
			get { return m->DeviceMask; }
			set { m->DeviceMask = value; }
		}
		internal Interop.MemoryAllocateFlagsInfoKhx* m {

			get {
				return (Interop.MemoryAllocateFlagsInfoKhx*)native.Handle;
			}
		}

		public MemoryAllocateFlagsInfoKhx ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.MemoryAllocateFlagsInfoKhx));
			Initialize ();
		}

		internal MemoryAllocateFlagsInfoKhx (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}


		internal void Initialize ()
		{
			m->SType = StructureType.MemoryAllocateFlagsInfoKhx;
		}

	}

	unsafe public partial class BindBufferMemoryInfoKHR : MarshalledObject
	{
		VulkanBuffer lBuffer;
		public VulkanBuffer Buffer {
			get { return lBuffer; }
			set { lBuffer = value; m->Buffer = value != null ? (UInt64)value.m : default(UInt64); }
		}

		DeviceMemory lMemory;
		public DeviceMemory Memory {
			get { return lMemory; }
			set { lMemory = value; m->Memory = value != null ? (UInt64)value.m : default(UInt64); }
		}

		public DeviceSize MemoryOffset {
			get { return m->MemoryOffset; }
			set { m->MemoryOffset = value; }
		}
		internal Interop.BindBufferMemoryInfoKHR* m {

			get {
				return (Interop.BindBufferMemoryInfoKHR*)native.Handle;
			}
		}

		public BindBufferMemoryInfoKHR ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.BindBufferMemoryInfoKHR));
			Initialize ();
		}

		internal BindBufferMemoryInfoKHR (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}


		internal void Initialize ()
		{
			m->SType = StructureType.BindBufferMemoryInfoKHR;
		}

	}

	unsafe public partial class BindBufferMemoryDeviceGroupInfoKhx : MarshalledObject
	{
		public UInt32 DeviceIndexCount {
			get { return m->DeviceIndexCount; }
			set { m->DeviceIndexCount = value; }
		}

		NativeReference refDeviceIndices;
		public UInt32[] DeviceIndices {
			get {
				if (m->DeviceIndexCount == 0)
					return null;
				var values = new UInt32 [m->DeviceIndexCount];
				unsafe
				{
					UInt32* ptr = (UInt32*)m->DeviceIndices;
					for (int i = 0; i < values.Length; i++) 
						values [i] = ptr [i];
				}
				return values;
			}

			set {
				if (value == null) {
					m->DeviceIndexCount = 0;
					m->DeviceIndices = IntPtr.Zero;
					return;
				}
				m->DeviceIndexCount = (uint)value.Length;
				refDeviceIndices = new NativeReference ((int)(sizeof(UInt32)*value.Length));
				m->DeviceIndices = refDeviceIndices.Handle;
				unsafe
				{
					UInt32* ptr = (UInt32*)m->DeviceIndices;
					for (int i = 0; i < value.Length; i++)
						ptr [i] = value [i];
				}
			}
		}
		internal Interop.BindBufferMemoryDeviceGroupInfoKhx* m {

			get {
				return (Interop.BindBufferMemoryDeviceGroupInfoKhx*)native.Handle;
			}
		}

		public BindBufferMemoryDeviceGroupInfoKhx ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.BindBufferMemoryDeviceGroupInfoKhx));
			Initialize ();
		}

		internal BindBufferMemoryDeviceGroupInfoKhx (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}

		override public void Dispose (bool disposing)
		{
			base.Dispose (disposing);
			if (!disposing)
				return;
			refDeviceIndices.Dispose ();
			refDeviceIndices = null;
		}

		internal void Initialize ()
		{
			m->SType = StructureType.BindBufferMemoryDeviceGroupInfoKhx;
		}

	}

	unsafe public partial class BindImageMemoryInfoKHR : MarshalledObject
	{
		Image lImage;
		public Image Image {
			get { return lImage; }
			set { lImage = value; m->Image = value != null ? (UInt64)value.m : default(UInt64); }
		}

		DeviceMemory lMemory;
		public DeviceMemory Memory {
			get { return lMemory; }
			set { lMemory = value; m->Memory = value != null ? (UInt64)value.m : default(UInt64); }
		}

		public DeviceSize MemoryOffset {
			get { return m->MemoryOffset; }
			set { m->MemoryOffset = value; }
		}
		internal Interop.BindImageMemoryInfoKHR* m {

			get {
				return (Interop.BindImageMemoryInfoKHR*)native.Handle;
			}
		}

		public BindImageMemoryInfoKHR ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.BindImageMemoryInfoKHR));
			Initialize ();
		}

		internal BindImageMemoryInfoKHR (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}


		internal void Initialize ()
		{
			m->SType = StructureType.BindImageMemoryInfoKHR;
		}

	}

	unsafe public partial class BindImageMemoryDeviceGroupInfoKhx : MarshalledObject
	{
		public UInt32 DeviceIndexCount {
			get { return m->DeviceIndexCount; }
			set { m->DeviceIndexCount = value; }
		}

		NativeReference refDeviceIndices;
		public UInt32[] DeviceIndices {
			get {
				if (m->DeviceIndexCount == 0)
					return null;
				var values = new UInt32 [m->DeviceIndexCount];
				unsafe
				{
					UInt32* ptr = (UInt32*)m->DeviceIndices;
					for (int i = 0; i < values.Length; i++) 
						values [i] = ptr [i];
				}
				return values;
			}

			set {
				if (value == null) {
					m->DeviceIndexCount = 0;
					m->DeviceIndices = IntPtr.Zero;
					return;
				}
				m->DeviceIndexCount = (uint)value.Length;
				refDeviceIndices = new NativeReference ((int)(sizeof(UInt32)*value.Length));
				m->DeviceIndices = refDeviceIndices.Handle;
				unsafe
				{
					UInt32* ptr = (UInt32*)m->DeviceIndices;
					for (int i = 0; i < value.Length; i++)
						ptr [i] = value [i];
				}
			}
		}

		public UInt32 SfrrectCount {
			get { return m->SfrrectCount; }
			set { m->SfrrectCount = value; }
		}

		NativeReference refSfrrects;
		public Rect2D[] Sfrrects {
			get {
				if (m->SfrrectCount == 0)
					return null;
				var values = new Rect2D [m->SfrrectCount];
				unsafe
				{
					Rect2D* ptr = (Rect2D*)m->Sfrrects;
					for (int i = 0; i < values.Length; i++) 
						values [i] = ptr [i];
				}
				return values;
			}

			set {
				if (value == null) {
					m->SfrrectCount = 0;
					m->Sfrrects = IntPtr.Zero;
					return;
				}
				m->SfrrectCount = (uint)value.Length;
				refSfrrects = new NativeReference ((int)(sizeof(Rect2D)*value.Length));
				m->Sfrrects = refSfrrects.Handle;
				unsafe
				{
					Rect2D* ptr = (Rect2D*)m->Sfrrects;
					for (int i = 0; i < value.Length; i++)
						ptr [i] = value [i];
				}
			}
		}
		internal Interop.BindImageMemoryDeviceGroupInfoKhx* m {

			get {
				return (Interop.BindImageMemoryDeviceGroupInfoKhx*)native.Handle;
			}
		}

		public BindImageMemoryDeviceGroupInfoKhx ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.BindImageMemoryDeviceGroupInfoKhx));
			Initialize ();
		}

		internal BindImageMemoryDeviceGroupInfoKhx (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}

		override public void Dispose (bool disposing)
		{
			base.Dispose (disposing);
			if (!disposing)
				return;
			refDeviceIndices.Dispose ();
			refDeviceIndices = null;
			refSfrrects.Dispose ();
			refSfrrects = null;
		}

		internal void Initialize ()
		{
			m->SType = StructureType.BindImageMemoryDeviceGroupInfoKhx;
		}

	}

	unsafe public partial class DeviceGroupRenderPassBeginInfoKhx : MarshalledObject
	{
		public UInt32 DeviceMask {
			get { return m->DeviceMask; }
			set { m->DeviceMask = value; }
		}

		public UInt32 DeviceRenderAreaCount {
			get { return m->DeviceRenderAreaCount; }
			set { m->DeviceRenderAreaCount = value; }
		}

		NativeReference refDeviceRenderAreas;
		public Rect2D[] DeviceRenderAreas {
			get {
				if (m->DeviceRenderAreaCount == 0)
					return null;
				var values = new Rect2D [m->DeviceRenderAreaCount];
				unsafe
				{
					Rect2D* ptr = (Rect2D*)m->DeviceRenderAreas;
					for (int i = 0; i < values.Length; i++) 
						values [i] = ptr [i];
				}
				return values;
			}

			set {
				if (value == null) {
					m->DeviceRenderAreaCount = 0;
					m->DeviceRenderAreas = IntPtr.Zero;
					return;
				}
				m->DeviceRenderAreaCount = (uint)value.Length;
				refDeviceRenderAreas = new NativeReference ((int)(sizeof(Rect2D)*value.Length));
				m->DeviceRenderAreas = refDeviceRenderAreas.Handle;
				unsafe
				{
					Rect2D* ptr = (Rect2D*)m->DeviceRenderAreas;
					for (int i = 0; i < value.Length; i++)
						ptr [i] = value [i];
				}
			}
		}
		internal Interop.DeviceGroupRenderPassBeginInfoKhx* m {

			get {
				return (Interop.DeviceGroupRenderPassBeginInfoKhx*)native.Handle;
			}
		}

		public DeviceGroupRenderPassBeginInfoKhx ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.DeviceGroupRenderPassBeginInfoKhx));
			Initialize ();
		}

		internal DeviceGroupRenderPassBeginInfoKhx (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}

		override public void Dispose (bool disposing)
		{
			base.Dispose (disposing);
			if (!disposing)
				return;
			refDeviceRenderAreas.Dispose ();
			refDeviceRenderAreas = null;
		}

		internal void Initialize ()
		{
			m->SType = StructureType.DeviceGroupRenderPassBeginInfoKhx;
		}

	}

	unsafe public partial class DeviceGroupCommandBufferBeginInfoKhx : MarshalledObject
	{
		public UInt32 DeviceMask {
			get { return m->DeviceMask; }
			set { m->DeviceMask = value; }
		}
		internal Interop.DeviceGroupCommandBufferBeginInfoKhx* m {

			get {
				return (Interop.DeviceGroupCommandBufferBeginInfoKhx*)native.Handle;
			}
		}

		public DeviceGroupCommandBufferBeginInfoKhx ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.DeviceGroupCommandBufferBeginInfoKhx));
			Initialize ();
		}

		internal DeviceGroupCommandBufferBeginInfoKhx (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}


		internal void Initialize ()
		{
			m->SType = StructureType.DeviceGroupCommandBufferBeginInfoKhx;
		}

	}

	unsafe public partial class DeviceGroupSubmitInfoKhx : MarshalledObject
	{
		public UInt32 WaitSemaphoreCount {
			get { return m->WaitSemaphoreCount; }
			set { m->WaitSemaphoreCount = value; }
		}

		NativeReference refWaitSemaphoreDeviceIndices;
		public UInt32[] WaitSemaphoreDeviceIndices {
			get {
				if (m->WaitSemaphoreCount == 0)
					return null;
				var values = new UInt32 [m->WaitSemaphoreCount];
				unsafe
				{
					UInt32* ptr = (UInt32*)m->WaitSemaphoreDeviceIndices;
					for (int i = 0; i < values.Length; i++) 
						values [i] = ptr [i];
				}
				return values;
			}

			set {
				if (value == null) {
					m->WaitSemaphoreCount = 0;
					m->WaitSemaphoreDeviceIndices = IntPtr.Zero;
					return;
				}
				m->WaitSemaphoreCount = (uint)value.Length;
				refWaitSemaphoreDeviceIndices = new NativeReference ((int)(sizeof(UInt32)*value.Length));
				m->WaitSemaphoreDeviceIndices = refWaitSemaphoreDeviceIndices.Handle;
				unsafe
				{
					UInt32* ptr = (UInt32*)m->WaitSemaphoreDeviceIndices;
					for (int i = 0; i < value.Length; i++)
						ptr [i] = value [i];
				}
			}
		}

		public UInt32 CommandBufferCount {
			get { return m->CommandBufferCount; }
			set { m->CommandBufferCount = value; }
		}

		NativeReference refCommandBufferDeviceMasks;
		public UInt32[] CommandBufferDeviceMasks {
			get {
				if (m->CommandBufferCount == 0)
					return null;
				var values = new UInt32 [m->CommandBufferCount];
				unsafe
				{
					UInt32* ptr = (UInt32*)m->CommandBufferDeviceMasks;
					for (int i = 0; i < values.Length; i++) 
						values [i] = ptr [i];
				}
				return values;
			}

			set {
				if (value == null) {
					m->CommandBufferCount = 0;
					m->CommandBufferDeviceMasks = IntPtr.Zero;
					return;
				}
				m->CommandBufferCount = (uint)value.Length;
				refCommandBufferDeviceMasks = new NativeReference ((int)(sizeof(UInt32)*value.Length));
				m->CommandBufferDeviceMasks = refCommandBufferDeviceMasks.Handle;
				unsafe
				{
					UInt32* ptr = (UInt32*)m->CommandBufferDeviceMasks;
					for (int i = 0; i < value.Length; i++)
						ptr [i] = value [i];
				}
			}
		}

		public UInt32 SignalSemaphoreCount {
			get { return m->SignalSemaphoreCount; }
			set { m->SignalSemaphoreCount = value; }
		}

		NativeReference refSignalSemaphoreDeviceIndices;
		public UInt32[] SignalSemaphoreDeviceIndices {
			get {
				if (m->SignalSemaphoreCount == 0)
					return null;
				var values = new UInt32 [m->SignalSemaphoreCount];
				unsafe
				{
					UInt32* ptr = (UInt32*)m->SignalSemaphoreDeviceIndices;
					for (int i = 0; i < values.Length; i++) 
						values [i] = ptr [i];
				}
				return values;
			}

			set {
				if (value == null) {
					m->SignalSemaphoreCount = 0;
					m->SignalSemaphoreDeviceIndices = IntPtr.Zero;
					return;
				}
				m->SignalSemaphoreCount = (uint)value.Length;
				refSignalSemaphoreDeviceIndices = new NativeReference ((int)(sizeof(UInt32)*value.Length));
				m->SignalSemaphoreDeviceIndices = refSignalSemaphoreDeviceIndices.Handle;
				unsafe
				{
					UInt32* ptr = (UInt32*)m->SignalSemaphoreDeviceIndices;
					for (int i = 0; i < value.Length; i++)
						ptr [i] = value [i];
				}
			}
		}
		internal Interop.DeviceGroupSubmitInfoKhx* m {

			get {
				return (Interop.DeviceGroupSubmitInfoKhx*)native.Handle;
			}
		}

		public DeviceGroupSubmitInfoKhx ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.DeviceGroupSubmitInfoKhx));
			Initialize ();
		}

		internal DeviceGroupSubmitInfoKhx (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}

		override public void Dispose (bool disposing)
		{
			base.Dispose (disposing);
			if (!disposing)
				return;
			refWaitSemaphoreDeviceIndices.Dispose ();
			refWaitSemaphoreDeviceIndices = null;
			refCommandBufferDeviceMasks.Dispose ();
			refCommandBufferDeviceMasks = null;
			refSignalSemaphoreDeviceIndices.Dispose ();
			refSignalSemaphoreDeviceIndices = null;
		}

		internal void Initialize ()
		{
			m->SType = StructureType.DeviceGroupSubmitInfoKhx;
		}

	}

	unsafe public partial class DeviceGroupBindSparseInfoKhx : MarshalledObject
	{
		public UInt32 ResourceDeviceIndex {
			get { return m->ResourceDeviceIndex; }
			set { m->ResourceDeviceIndex = value; }
		}

		public UInt32 MemoryDeviceIndex {
			get { return m->MemoryDeviceIndex; }
			set { m->MemoryDeviceIndex = value; }
		}
		internal Interop.DeviceGroupBindSparseInfoKhx* m {

			get {
				return (Interop.DeviceGroupBindSparseInfoKhx*)native.Handle;
			}
		}

		public DeviceGroupBindSparseInfoKhx ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.DeviceGroupBindSparseInfoKhx));
			Initialize ();
		}

		internal DeviceGroupBindSparseInfoKhx (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}


		internal void Initialize ()
		{
			m->SType = StructureType.DeviceGroupBindSparseInfoKhx;
		}

	}

	unsafe public partial class DeviceGroupPresentCapabilitiesKhx : MarshalledObject
	{
		public UInt32[] PresentMask {
			get {
				var arr = new UInt32 [32];
				for (int i = 0; i < 32; i++)
					arr [i] = m->PresentMask [i];
				return arr;
			}

			set {
				if (value.Length > 32)
					throw new Exception ("array too long");
				for (int i = 0; i < value.Length; i++)
					m->PresentMask [i] = value [i];
				for (int i = value.Length; i < 32; i++)
					m->PresentMask [i] = 0;
			}
		}

		public DeviceGroupPresentModeFlagsKhx Modes {
			get { return m->Modes; }
			set { m->Modes = value; }
		}
		internal Interop.DeviceGroupPresentCapabilitiesKhx* m {

			get {
				return (Interop.DeviceGroupPresentCapabilitiesKhx*)native.Handle;
			}
		}

		public DeviceGroupPresentCapabilitiesKhx ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.DeviceGroupPresentCapabilitiesKhx));
			Initialize ();
		}

		internal DeviceGroupPresentCapabilitiesKhx (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}


		internal void Initialize ()
		{
			m->SType = StructureType.DeviceGroupPresentCapabilitiesKhx;
		}

	}

	unsafe public partial class ImageSwapchainCreateInfoKhx : MarshalledObject
	{
		SwapchainKHR lSwapchain;
		public SwapchainKHR Swapchain {
			get { return lSwapchain; }
			set { lSwapchain = value; m->Swapchain = value != null ? (UInt64)value.m : default(UInt64); }
		}
		internal Interop.ImageSwapchainCreateInfoKhx* m {

			get {
				return (Interop.ImageSwapchainCreateInfoKhx*)native.Handle;
			}
		}

		public ImageSwapchainCreateInfoKhx ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.ImageSwapchainCreateInfoKhx));
			Initialize ();
		}

		internal ImageSwapchainCreateInfoKhx (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}


		internal void Initialize ()
		{
			m->SType = StructureType.ImageSwapchainCreateInfoKhx;
		}

	}

	unsafe public partial class BindImageMemorySwapchainInfoKhx : MarshalledObject
	{
		SwapchainKHR lSwapchain;
		public SwapchainKHR Swapchain {
			get { return lSwapchain; }
			set { lSwapchain = value; m->Swapchain = value != null ? (UInt64)value.m : default(UInt64); }
		}

		public UInt32 ImageIndex {
			get { return m->ImageIndex; }
			set { m->ImageIndex = value; }
		}
		internal Interop.BindImageMemorySwapchainInfoKhx* m {

			get {
				return (Interop.BindImageMemorySwapchainInfoKhx*)native.Handle;
			}
		}

		public BindImageMemorySwapchainInfoKhx ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.BindImageMemorySwapchainInfoKhx));
			Initialize ();
		}

		internal BindImageMemorySwapchainInfoKhx (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}


		internal void Initialize ()
		{
			m->SType = StructureType.BindImageMemorySwapchainInfoKhx;
		}

	}

	unsafe public partial class AcquireNextImageInfoKhx : MarshalledObject
	{
		SwapchainKHR lSwapchain;
		public SwapchainKHR Swapchain {
			get { return lSwapchain; }
			set { lSwapchain = value; m->Swapchain = value != null ? (UInt64)value.m : default(UInt64); }
		}

		public UInt64 Timeout {
			get { return m->Timeout; }
			set { m->Timeout = value; }
		}

		Semaphore lSemaphore;
		public Semaphore Semaphore {
			get { return lSemaphore; }
			set { lSemaphore = value; m->Semaphore = value != null ? (UInt64)value.m : default(UInt64); }
		}

		Fence lFence;
		public Fence Fence {
			get { return lFence; }
			set { lFence = value; m->Fence = value != null ? (UInt64)value.m : default(UInt64); }
		}

		public UInt32 DeviceMask {
			get { return m->DeviceMask; }
			set { m->DeviceMask = value; }
		}
		internal Interop.AcquireNextImageInfoKhx* m {

			get {
				return (Interop.AcquireNextImageInfoKhx*)native.Handle;
			}
		}

		public AcquireNextImageInfoKhx ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.AcquireNextImageInfoKhx));
			Initialize ();
		}

		internal AcquireNextImageInfoKhx (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}


		internal void Initialize ()
		{
			m->SType = StructureType.AcquireNextImageInfoKhx;
		}

	}

	unsafe public partial class DeviceGroupPresentInfoKhx : MarshalledObject
	{
		public UInt32 SwapchainCount {
			get { return m->SwapchainCount; }
			set { m->SwapchainCount = value; }
		}

		NativeReference refDeviceMasks;
		public UInt32[] DeviceMasks {
			get {
				if (m->SwapchainCount == 0)
					return null;
				var values = new UInt32 [m->SwapchainCount];
				unsafe
				{
					UInt32* ptr = (UInt32*)m->DeviceMasks;
					for (int i = 0; i < values.Length; i++) 
						values [i] = ptr [i];
				}
				return values;
			}

			set {
				if (value == null) {
					m->SwapchainCount = 0;
					m->DeviceMasks = IntPtr.Zero;
					return;
				}
				m->SwapchainCount = (uint)value.Length;
				refDeviceMasks = new NativeReference ((int)(sizeof(UInt32)*value.Length));
				m->DeviceMasks = refDeviceMasks.Handle;
				unsafe
				{
					UInt32* ptr = (UInt32*)m->DeviceMasks;
					for (int i = 0; i < value.Length; i++)
						ptr [i] = value [i];
				}
			}
		}

		public DeviceGroupPresentModeFlagsKhx Mode {
			get { return m->Mode; }
			set { m->Mode = value; }
		}
		internal Interop.DeviceGroupPresentInfoKhx* m {

			get {
				return (Interop.DeviceGroupPresentInfoKhx*)native.Handle;
			}
		}

		public DeviceGroupPresentInfoKhx ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.DeviceGroupPresentInfoKhx));
			Initialize ();
		}

		internal DeviceGroupPresentInfoKhx (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}

		override public void Dispose (bool disposing)
		{
			base.Dispose (disposing);
			if (!disposing)
				return;
			refDeviceMasks.Dispose ();
			refDeviceMasks = null;
		}

		internal void Initialize ()
		{
			m->SType = StructureType.DeviceGroupPresentInfoKhx;
		}

	}

	unsafe public partial class DeviceGroupDeviceCreateInfoKhx : MarshalledObject
	{
		public UInt32 PhysicalDeviceCount {
			get { return m->PhysicalDeviceCount; }
			set { m->PhysicalDeviceCount = value; }
		}

		NativeReference refPhysicalDevices;
		public PhysicalDevice[] PhysicalDevices {
			get {
				if (m->PhysicalDeviceCount == 0)
					return null;
				var values = new PhysicalDevice [m->PhysicalDeviceCount];
				unsafe
				{
					IntPtr* ptr = (IntPtr*)m->PhysicalDevices;
					for (int i = 0; i < values.Length; i++) {
						values [i] = new PhysicalDevice ();
						values [i].m = ptr [i];
					}
				}
				return values;
			}

			set {
				if (value == null) {
					m->PhysicalDeviceCount = 0;
					m->PhysicalDevices = IntPtr.Zero;
					return;
				}
				m->PhysicalDeviceCount = (uint)value.Length;
				refPhysicalDevices = new NativeReference ((int)(sizeof(IntPtr)*value.Length));
				m->PhysicalDevices = refPhysicalDevices.Handle;
				unsafe
				{
					IntPtr* ptr = (IntPtr*)m->PhysicalDevices;
					for (int i = 0; i < value.Length; i++)
						ptr [i] = value [i].m;
				}
			}
		}
		internal Interop.DeviceGroupDeviceCreateInfoKhx* m {

			get {
				return (Interop.DeviceGroupDeviceCreateInfoKhx*)native.Handle;
			}
		}

		public DeviceGroupDeviceCreateInfoKhx ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.DeviceGroupDeviceCreateInfoKhx));
			Initialize ();
		}

		internal DeviceGroupDeviceCreateInfoKhx (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}

		override public void Dispose (bool disposing)
		{
			base.Dispose (disposing);
			if (!disposing)
				return;
			refPhysicalDevices.Dispose ();
			refPhysicalDevices = null;
		}

		internal void Initialize ()
		{
			m->SType = StructureType.DeviceGroupDeviceCreateInfoKhx;
		}

	}

	unsafe public partial class DeviceGroupSwapchainCreateInfoKhx : MarshalledObject
	{
		public DeviceGroupPresentModeFlagsKhx Modes {
			get { return m->Modes; }
			set { m->Modes = value; }
		}
		internal Interop.DeviceGroupSwapchainCreateInfoKhx* m {

			get {
				return (Interop.DeviceGroupSwapchainCreateInfoKhx*)native.Handle;
			}
		}

		public DeviceGroupSwapchainCreateInfoKhx ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.DeviceGroupSwapchainCreateInfoKhx));
			Initialize ();
		}

		internal DeviceGroupSwapchainCreateInfoKhx (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}


		internal void Initialize ()
		{
			m->SType = StructureType.DeviceGroupSwapchainCreateInfoKhx;
		}

	}

	unsafe public partial struct DescriptorUpdateTemplateEntryKHR
	{
		public UInt32 DstBinding;
		public UInt32 DstArrayElement;
		public UInt32 DescriptorCount;
		public DescriptorType DescriptorType;
		public UIntPtr Offset;
		public UIntPtr Stride;
	}

	unsafe public partial class DescriptorUpdateTemplateCreateInfoKHR : MarshalledObject
	{
		public UInt32 Flags {
			get { return m->Flags; }
			set { m->Flags = value; }
		}

		public UInt32 DescriptorUpdateEntryCount {
			get { return m->DescriptorUpdateEntryCount; }
			set { m->DescriptorUpdateEntryCount = value; }
		}

		NativeReference refDescriptorUpdateEntries;
		public DescriptorUpdateTemplateEntryKHR[] DescriptorUpdateEntries {
			get {
				if (m->DescriptorUpdateEntryCount == 0)
					return null;
				var values = new DescriptorUpdateTemplateEntryKHR [m->DescriptorUpdateEntryCount];
				unsafe
				{
					DescriptorUpdateTemplateEntryKHR* ptr = (DescriptorUpdateTemplateEntryKHR*)m->DescriptorUpdateEntries;
					for (int i = 0; i < values.Length; i++) 
						values [i] = ptr [i];
				}
				return values;
			}

			set {
				if (value == null) {
					m->DescriptorUpdateEntryCount = 0;
					m->DescriptorUpdateEntries = IntPtr.Zero;
					return;
				}
				m->DescriptorUpdateEntryCount = (uint)value.Length;
				refDescriptorUpdateEntries = new NativeReference ((int)(sizeof(DescriptorUpdateTemplateEntryKHR)*value.Length));
				m->DescriptorUpdateEntries = refDescriptorUpdateEntries.Handle;
				unsafe
				{
					DescriptorUpdateTemplateEntryKHR* ptr = (DescriptorUpdateTemplateEntryKHR*)m->DescriptorUpdateEntries;
					for (int i = 0; i < value.Length; i++)
						ptr [i] = value [i];
				}
			}
		}

		public DescriptorUpdateTemplateTypeKHR TemplateType {
			get { return m->TemplateType; }
			set { m->TemplateType = value; }
		}

		DescriptorSetLayout lDescriptorSetLayout;
		public DescriptorSetLayout DescriptorSetLayout {
			get { return lDescriptorSetLayout; }
			set { lDescriptorSetLayout = value; m->DescriptorSetLayout = value != null ? (UInt64)value.m : default(UInt64); }
		}

		public PipelineBindPoint PipelineBindPoint {
			get { return m->PipelineBindPoint; }
			set { m->PipelineBindPoint = value; }
		}

		PipelineLayout lPipelineLayout;
		public PipelineLayout PipelineLayout {
			get { return lPipelineLayout; }
			set { lPipelineLayout = value; m->PipelineLayout = value != null ? (UInt64)value.m : default(UInt64); }
		}

		public UInt32 Set {
			get { return m->Set; }
			set { m->Set = value; }
		}
		internal Interop.DescriptorUpdateTemplateCreateInfoKHR* m {

			get {
				return (Interop.DescriptorUpdateTemplateCreateInfoKHR*)native.Handle;
			}
		}

		public DescriptorUpdateTemplateCreateInfoKHR ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.DescriptorUpdateTemplateCreateInfoKHR));
			Initialize ();
		}

		internal DescriptorUpdateTemplateCreateInfoKHR (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}

		override public void Dispose (bool disposing)
		{
			base.Dispose (disposing);
			if (!disposing)
				return;
			refDescriptorUpdateEntries.Dispose ();
			refDescriptorUpdateEntries = null;
		}

		internal void Initialize ()
		{
			m->SType = StructureType.DescriptorUpdateTemplateCreateInfoKHR;
		}

	}

	unsafe public partial struct XYColorExt
	{
		public float X;
		public float Y;
	}

	unsafe public partial class HdrMetadataExt : MarshalledObject
	{
		public XYColorExt DisplayPrimaryRed {
			get { return m->DisplayPrimaryRed; }
			set { m->DisplayPrimaryRed = value; }
		}

		public XYColorExt DisplayPrimaryGreen {
			get { return m->DisplayPrimaryGreen; }
			set { m->DisplayPrimaryGreen = value; }
		}

		public XYColorExt DisplayPrimaryBlue {
			get { return m->DisplayPrimaryBlue; }
			set { m->DisplayPrimaryBlue = value; }
		}

		public XYColorExt WhitePoint {
			get { return m->WhitePoint; }
			set { m->WhitePoint = value; }
		}

		public float MaxLuminance {
			get { return m->MaxLuminance; }
			set { m->MaxLuminance = value; }
		}

		public float MinLuminance {
			get { return m->MinLuminance; }
			set { m->MinLuminance = value; }
		}

		public float MaxContentLightLevel {
			get { return m->MaxContentLightLevel; }
			set { m->MaxContentLightLevel = value; }
		}

		public float MaxFrameAverageLightLevel {
			get { return m->MaxFrameAverageLightLevel; }
			set { m->MaxFrameAverageLightLevel = value; }
		}
		internal Interop.HdrMetadataExt* m {

			get {
				return (Interop.HdrMetadataExt*)native.Handle;
			}
		}

		public HdrMetadataExt ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.HdrMetadataExt));
			Initialize ();
		}

		internal HdrMetadataExt (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}


		internal void Initialize ()
		{
			m->SType = StructureType.HdrMetadataExt;
		}

	}

	unsafe public partial struct RefreshCycleDurationGoogle
	{
		public UInt64 RefreshDuration;
	}

	unsafe public partial struct PastPresentationTimingGoogle
	{
		public UInt32 PresentId;
		public UInt64 DesiredPresentTime;
		public UInt64 ActualPresentTime;
		public UInt64 EarliestPresentTime;
		public UInt64 PresentMargin;
	}

	unsafe public partial class PresentTimesInfoGoogle : MarshalledObject
	{
		public UInt32 SwapchainCount {
			get { return m->SwapchainCount; }
			set { m->SwapchainCount = value; }
		}

		NativeReference refTimes;
		public PresentTimeGoogle[] Times {
			get {
				if (m->SwapchainCount == 0)
					return null;
				var values = new PresentTimeGoogle [m->SwapchainCount];
				unsafe
				{
					PresentTimeGoogle* ptr = (PresentTimeGoogle*)m->Times;
					for (int i = 0; i < values.Length; i++) 
						values [i] = ptr [i];
				}
				return values;
			}

			set {
				if (value == null) {
					m->SwapchainCount = 0;
					m->Times = IntPtr.Zero;
					return;
				}
				m->SwapchainCount = (uint)value.Length;
				refTimes = new NativeReference ((int)(sizeof(PresentTimeGoogle)*value.Length));
				m->Times = refTimes.Handle;
				unsafe
				{
					PresentTimeGoogle* ptr = (PresentTimeGoogle*)m->Times;
					for (int i = 0; i < value.Length; i++)
						ptr [i] = value [i];
				}
			}
		}
		internal Interop.PresentTimesInfoGoogle* m {

			get {
				return (Interop.PresentTimesInfoGoogle*)native.Handle;
			}
		}

		public PresentTimesInfoGoogle ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.PresentTimesInfoGoogle));
			Initialize ();
		}

		internal PresentTimesInfoGoogle (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}

		override public void Dispose (bool disposing)
		{
			base.Dispose (disposing);
			if (!disposing)
				return;
			refTimes.Dispose ();
			refTimes = null;
		}

		internal void Initialize ()
		{
			m->SType = StructureType.PresentTimesInfoGoogle;
		}

	}

	unsafe public partial struct PresentTimeGoogle
	{
		public UInt32 PresentId;
		public UInt64 DesiredPresentTime;
	}

	unsafe public partial class IOSSurfaceCreateInfoMvk : MarshalledObject
	{
		public UInt32 Flags {
			get { return m->Flags; }
			set { m->Flags = value; }
		}

		public IntPtr View {
			get { return m->View; }
			set { m->View = value; }
		}
		internal Interop.IOSSurfaceCreateInfoMvk* m {

			get {
				return (Interop.IOSSurfaceCreateInfoMvk*)native.Handle;
			}
		}

		public IOSSurfaceCreateInfoMvk ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.IOSSurfaceCreateInfoMvk));
			Initialize ();
		}

		internal IOSSurfaceCreateInfoMvk (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}


		internal void Initialize ()
		{
			m->SType = StructureType.IOSSurfaceCreateInfoMvk;
		}

	}

	unsafe public partial class MacOSSurfaceCreateInfoMvk : MarshalledObject
	{
		public UInt32 Flags {
			get { return m->Flags; }
			set { m->Flags = value; }
		}

		public IntPtr View {
			get { return m->View; }
			set { m->View = value; }
		}
		internal Interop.MacOSSurfaceCreateInfoMvk* m {

			get {
				return (Interop.MacOSSurfaceCreateInfoMvk*)native.Handle;
			}
		}

		public MacOSSurfaceCreateInfoMvk ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.MacOSSurfaceCreateInfoMvk));
			Initialize ();
		}

		internal MacOSSurfaceCreateInfoMvk (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}


		internal void Initialize ()
		{
			m->SType = StructureType.MacOSSurfaceCreateInfoMvk;
		}

	}

	unsafe public partial struct ViewportWScalingNv
	{
		public float Xcoeff;
		public float Ycoeff;
	}

	unsafe public partial class PipelineViewportWScalingStateCreateInfoNv : MarshalledObject
	{
		public bool ViewportWscalingEnable {
			get { return m->ViewportWscalingEnable; }
			set { m->ViewportWscalingEnable = value; }
		}

		public UInt32 ViewportCount {
			get { return m->ViewportCount; }
			set { m->ViewportCount = value; }
		}

		NativeReference refViewportWscalings;
		public ViewportWScalingNv[] ViewportWscalings {
			get {
				if (m->ViewportCount == 0)
					return null;
				var values = new ViewportWScalingNv [m->ViewportCount];
				unsafe
				{
					ViewportWScalingNv* ptr = (ViewportWScalingNv*)m->ViewportWscalings;
					for (int i = 0; i < values.Length; i++) 
						values [i] = ptr [i];
				}
				return values;
			}

			set {
				if (value == null) {
					m->ViewportCount = 0;
					m->ViewportWscalings = IntPtr.Zero;
					return;
				}
				m->ViewportCount = (uint)value.Length;
				refViewportWscalings = new NativeReference ((int)(sizeof(ViewportWScalingNv)*value.Length));
				m->ViewportWscalings = refViewportWscalings.Handle;
				unsafe
				{
					ViewportWScalingNv* ptr = (ViewportWScalingNv*)m->ViewportWscalings;
					for (int i = 0; i < value.Length; i++)
						ptr [i] = value [i];
				}
			}
		}
		internal Interop.PipelineViewportWScalingStateCreateInfoNv* m {

			get {
				return (Interop.PipelineViewportWScalingStateCreateInfoNv*)native.Handle;
			}
		}

		public PipelineViewportWScalingStateCreateInfoNv ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.PipelineViewportWScalingStateCreateInfoNv));
			Initialize ();
		}

		internal PipelineViewportWScalingStateCreateInfoNv (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}

		override public void Dispose (bool disposing)
		{
			base.Dispose (disposing);
			if (!disposing)
				return;
			refViewportWscalings.Dispose ();
			refViewportWscalings = null;
		}

		internal void Initialize ()
		{
			m->SType = StructureType.PipelineViewportWScalingStateCreateInfoNv;
		}

	}

	unsafe public partial struct ViewportSwizzleNv
	{
		public ViewportCoordinateSwizzleNv X;
		public ViewportCoordinateSwizzleNv Y;
		public ViewportCoordinateSwizzleNv Z;
		public ViewportCoordinateSwizzleNv W;
	}

	unsafe public partial class PipelineViewportSwizzleStateCreateInfoNv : MarshalledObject
	{
		public UInt32 Flags {
			get { return m->Flags; }
			set { m->Flags = value; }
		}

		public UInt32 ViewportCount {
			get { return m->ViewportCount; }
			set { m->ViewportCount = value; }
		}

		NativeReference refViewportSwizzles;
		public ViewportSwizzleNv[] ViewportSwizzles {
			get {
				if (m->ViewportCount == 0)
					return null;
				var values = new ViewportSwizzleNv [m->ViewportCount];
				unsafe
				{
					ViewportSwizzleNv* ptr = (ViewportSwizzleNv*)m->ViewportSwizzles;
					for (int i = 0; i < values.Length; i++) 
						values [i] = ptr [i];
				}
				return values;
			}

			set {
				if (value == null) {
					m->ViewportCount = 0;
					m->ViewportSwizzles = IntPtr.Zero;
					return;
				}
				m->ViewportCount = (uint)value.Length;
				refViewportSwizzles = new NativeReference ((int)(sizeof(ViewportSwizzleNv)*value.Length));
				m->ViewportSwizzles = refViewportSwizzles.Handle;
				unsafe
				{
					ViewportSwizzleNv* ptr = (ViewportSwizzleNv*)m->ViewportSwizzles;
					for (int i = 0; i < value.Length; i++)
						ptr [i] = value [i];
				}
			}
		}
		internal Interop.PipelineViewportSwizzleStateCreateInfoNv* m {

			get {
				return (Interop.PipelineViewportSwizzleStateCreateInfoNv*)native.Handle;
			}
		}

		public PipelineViewportSwizzleStateCreateInfoNv ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.PipelineViewportSwizzleStateCreateInfoNv));
			Initialize ();
		}

		internal PipelineViewportSwizzleStateCreateInfoNv (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}

		override public void Dispose (bool disposing)
		{
			base.Dispose (disposing);
			if (!disposing)
				return;
			refViewportSwizzles.Dispose ();
			refViewportSwizzles = null;
		}

		internal void Initialize ()
		{
			m->SType = StructureType.PipelineViewportSwizzleStateCreateInfoNv;
		}

	}

	unsafe public partial class PhysicalDeviceDiscardRectanglePropertiesExt : MarshalledObject
	{
		public UInt32 MaxDiscardRectangles {
			get { return m->MaxDiscardRectangles; }
			set { m->MaxDiscardRectangles = value; }
		}
		internal Interop.PhysicalDeviceDiscardRectanglePropertiesExt* m {

			get {
				return (Interop.PhysicalDeviceDiscardRectanglePropertiesExt*)native.Handle;
			}
		}

		public PhysicalDeviceDiscardRectanglePropertiesExt ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.PhysicalDeviceDiscardRectanglePropertiesExt));
			Initialize ();
		}

		internal PhysicalDeviceDiscardRectanglePropertiesExt (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}


		internal void Initialize ()
		{
			m->SType = StructureType.PhysicalDeviceDiscardRectanglePropertiesExt;
		}

	}

	unsafe public partial class PipelineDiscardRectangleStateCreateInfoExt : MarshalledObject
	{
		public UInt32 Flags {
			get { return m->Flags; }
			set { m->Flags = value; }
		}

		public DiscardRectangleModeExt DiscardRectangleMode {
			get { return m->DiscardRectangleMode; }
			set { m->DiscardRectangleMode = value; }
		}

		public UInt32 DiscardRectangleCount {
			get { return m->DiscardRectangleCount; }
			set { m->DiscardRectangleCount = value; }
		}

		NativeReference refDiscardRectangles;
		public Rect2D[] DiscardRectangles {
			get {
				if (m->DiscardRectangleCount == 0)
					return null;
				var values = new Rect2D [m->DiscardRectangleCount];
				unsafe
				{
					Rect2D* ptr = (Rect2D*)m->DiscardRectangles;
					for (int i = 0; i < values.Length; i++) 
						values [i] = ptr [i];
				}
				return values;
			}

			set {
				if (value == null) {
					m->DiscardRectangleCount = 0;
					m->DiscardRectangles = IntPtr.Zero;
					return;
				}
				m->DiscardRectangleCount = (uint)value.Length;
				refDiscardRectangles = new NativeReference ((int)(sizeof(Rect2D)*value.Length));
				m->DiscardRectangles = refDiscardRectangles.Handle;
				unsafe
				{
					Rect2D* ptr = (Rect2D*)m->DiscardRectangles;
					for (int i = 0; i < value.Length; i++)
						ptr [i] = value [i];
				}
			}
		}
		internal Interop.PipelineDiscardRectangleStateCreateInfoExt* m {

			get {
				return (Interop.PipelineDiscardRectangleStateCreateInfoExt*)native.Handle;
			}
		}

		public PipelineDiscardRectangleStateCreateInfoExt ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.PipelineDiscardRectangleStateCreateInfoExt));
			Initialize ();
		}

		internal PipelineDiscardRectangleStateCreateInfoExt (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}

		override public void Dispose (bool disposing)
		{
			base.Dispose (disposing);
			if (!disposing)
				return;
			refDiscardRectangles.Dispose ();
			refDiscardRectangles = null;
		}

		internal void Initialize ()
		{
			m->SType = StructureType.PipelineDiscardRectangleStateCreateInfoExt;
		}

	}

	unsafe public partial class PhysicalDeviceMultiviewPerViewAttributesPropertiesNvx : MarshalledObject
	{
		public bool PerViewPositionAllComponents {
			get { return m->PerViewPositionAllComponents; }
			set { m->PerViewPositionAllComponents = value; }
		}
		internal Interop.PhysicalDeviceMultiviewPerViewAttributesPropertiesNvx* m {

			get {
				return (Interop.PhysicalDeviceMultiviewPerViewAttributesPropertiesNvx*)native.Handle;
			}
		}

		public PhysicalDeviceMultiviewPerViewAttributesPropertiesNvx ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.PhysicalDeviceMultiviewPerViewAttributesPropertiesNvx));
			Initialize ();
		}

		internal PhysicalDeviceMultiviewPerViewAttributesPropertiesNvx (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}


		internal void Initialize ()
		{
			m->SType = StructureType.PhysicalDeviceMultiviewPerViewAttributesPropertiesNvx;
		}

	}

	unsafe public partial struct InputAttachmentAspectReferenceKHR
	{
		public UInt32 Subpass;
		public UInt32 InputAttachmentIndex;
		public ImageAspectFlags AspectMask;
	}

	unsafe public partial class RenderPassInputAttachmentAspectCreateInfoKHR : MarshalledObject
	{
		public UInt32 AspectReferenceCount {
			get { return m->AspectReferenceCount; }
			set { m->AspectReferenceCount = value; }
		}

		NativeReference refAspectReferences;
		public InputAttachmentAspectReferenceKHR[] AspectReferences {
			get {
				if (m->AspectReferenceCount == 0)
					return null;
				var values = new InputAttachmentAspectReferenceKHR [m->AspectReferenceCount];
				unsafe
				{
					InputAttachmentAspectReferenceKHR* ptr = (InputAttachmentAspectReferenceKHR*)m->AspectReferences;
					for (int i = 0; i < values.Length; i++) 
						values [i] = ptr [i];
				}
				return values;
			}

			set {
				if (value == null) {
					m->AspectReferenceCount = 0;
					m->AspectReferences = IntPtr.Zero;
					return;
				}
				m->AspectReferenceCount = (uint)value.Length;
				refAspectReferences = new NativeReference ((int)(sizeof(InputAttachmentAspectReferenceKHR)*value.Length));
				m->AspectReferences = refAspectReferences.Handle;
				unsafe
				{
					InputAttachmentAspectReferenceKHR* ptr = (InputAttachmentAspectReferenceKHR*)m->AspectReferences;
					for (int i = 0; i < value.Length; i++)
						ptr [i] = value [i];
				}
			}
		}
		internal Interop.RenderPassInputAttachmentAspectCreateInfoKHR* m {

			get {
				return (Interop.RenderPassInputAttachmentAspectCreateInfoKHR*)native.Handle;
			}
		}

		public RenderPassInputAttachmentAspectCreateInfoKHR ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.RenderPassInputAttachmentAspectCreateInfoKHR));
			Initialize ();
		}

		internal RenderPassInputAttachmentAspectCreateInfoKHR (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}

		override public void Dispose (bool disposing)
		{
			base.Dispose (disposing);
			if (!disposing)
				return;
			refAspectReferences.Dispose ();
			refAspectReferences = null;
		}

		internal void Initialize ()
		{
			m->SType = StructureType.RenderPassInputAttachmentAspectCreateInfoKHR;
		}

	}

	unsafe public partial class PhysicalDeviceSurfaceInfo2KHR : MarshalledObject
	{
		SurfaceKHR lSurface;
		public SurfaceKHR Surface {
			get { return lSurface; }
			set { lSurface = value; m->Surface = value != null ? (UInt64)value.m : default(UInt64); }
		}
		internal Interop.PhysicalDeviceSurfaceInfo2KHR* m {

			get {
				return (Interop.PhysicalDeviceSurfaceInfo2KHR*)native.Handle;
			}
		}

		public PhysicalDeviceSurfaceInfo2KHR ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.PhysicalDeviceSurfaceInfo2KHR));
			Initialize ();
		}

		internal PhysicalDeviceSurfaceInfo2KHR (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}


		internal void Initialize ()
		{
			m->SType = StructureType.PhysicalDeviceSurfaceInfo2KHR;
		}

	}

	unsafe public partial class SurfaceCapabilities2KHR : MarshalledObject
	{
		public SurfaceCapabilitiesKHR SurfaceCapabilities {
			get { return m->SurfaceCapabilities; }
			set { m->SurfaceCapabilities = value; }
		}
		internal Interop.SurfaceCapabilities2KHR* m {

			get {
				return (Interop.SurfaceCapabilities2KHR*)native.Handle;
			}
		}

		public SurfaceCapabilities2KHR ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.SurfaceCapabilities2KHR));
			Initialize ();
		}

		internal SurfaceCapabilities2KHR (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}


		internal void Initialize ()
		{
			m->SType = StructureType.SurfaceCapabilities2KHR;
		}

	}

	unsafe public partial class SurfaceFormat2KHR : MarshalledObject
	{
		public SurfaceFormatKHR SurfaceFormat {
			get { return m->SurfaceFormat; }
			set { m->SurfaceFormat = value; }
		}
		internal Interop.SurfaceFormat2KHR* m {

			get {
				return (Interop.SurfaceFormat2KHR*)native.Handle;
			}
		}

		public SurfaceFormat2KHR ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.SurfaceFormat2KHR));
			Initialize ();
		}

		internal SurfaceFormat2KHR (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}


		internal void Initialize ()
		{
			m->SType = StructureType.SurfaceFormat2KHR;
		}

	}

	unsafe public partial class SharedPresentSurfaceCapabilitiesKHR : MarshalledObject
	{
		public ImageUsageFlags SharedPresentSupportedUsageFlags {
			get { return m->SharedPresentSupportedUsageFlags; }
			set { m->SharedPresentSupportedUsageFlags = value; }
		}
		internal Interop.SharedPresentSurfaceCapabilitiesKHR* m {

			get {
				return (Interop.SharedPresentSurfaceCapabilitiesKHR*)native.Handle;
			}
		}

		public SharedPresentSurfaceCapabilitiesKHR ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.SharedPresentSurfaceCapabilitiesKHR));
			Initialize ();
		}

		internal SharedPresentSurfaceCapabilitiesKHR (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}


		internal void Initialize ()
		{
			m->SType = StructureType.SharedPresentSurfaceCapabilitiesKHR;
		}

	}

	unsafe public partial class PhysicalDevice16BitStorageFeaturesKHR : MarshalledObject
	{
		public bool StorageBuffer16BitAccess {
			get { return m->StorageBuffer16BitAccess; }
			set { m->StorageBuffer16BitAccess = value; }
		}

		public bool UniformAndStorageBuffer16BitAccess {
			get { return m->UniformAndStorageBuffer16BitAccess; }
			set { m->UniformAndStorageBuffer16BitAccess = value; }
		}

		public bool StoragePushConstant16 {
			get { return m->StoragePushConstant16; }
			set { m->StoragePushConstant16 = value; }
		}

		public bool StorageInputOutput16 {
			get { return m->StorageInputOutput16; }
			set { m->StorageInputOutput16 = value; }
		}
		internal Interop.PhysicalDevice16BitStorageFeaturesKHR* m {

			get {
				return (Interop.PhysicalDevice16BitStorageFeaturesKHR*)native.Handle;
			}
		}

		public PhysicalDevice16BitStorageFeaturesKHR ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.PhysicalDevice16BitStorageFeaturesKHR));
			Initialize ();
		}

		internal PhysicalDevice16BitStorageFeaturesKHR (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}


		internal void Initialize ()
		{
			m->SType = StructureType.PhysicalDevice16BitStorageFeaturesKHR;
		}

	}

	unsafe public partial class BufferMemoryRequirementsInfo2KHR : MarshalledObject
	{
		VulkanBuffer lBuffer;
		public VulkanBuffer Buffer {
			get { return lBuffer; }
			set { lBuffer = value; m->Buffer = value != null ? (UInt64)value.m : default(UInt64); }
		}
		internal Interop.BufferMemoryRequirementsInfo2KHR* m {

			get {
				return (Interop.BufferMemoryRequirementsInfo2KHR*)native.Handle;
			}
		}

		public BufferMemoryRequirementsInfo2KHR ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.BufferMemoryRequirementsInfo2KHR));
			Initialize ();
		}

		internal BufferMemoryRequirementsInfo2KHR (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}


		internal void Initialize ()
		{
			m->SType = StructureType.BufferMemoryRequirementsInfo2KHR;
		}

	}

	unsafe public partial class ImageMemoryRequirementsInfo2KHR : MarshalledObject
	{
		Image lImage;
		public Image Image {
			get { return lImage; }
			set { lImage = value; m->Image = value != null ? (UInt64)value.m : default(UInt64); }
		}
		internal Interop.ImageMemoryRequirementsInfo2KHR* m {

			get {
				return (Interop.ImageMemoryRequirementsInfo2KHR*)native.Handle;
			}
		}

		public ImageMemoryRequirementsInfo2KHR ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.ImageMemoryRequirementsInfo2KHR));
			Initialize ();
		}

		internal ImageMemoryRequirementsInfo2KHR (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}


		internal void Initialize ()
		{
			m->SType = StructureType.ImageMemoryRequirementsInfo2KHR;
		}

	}

	unsafe public partial class ImageSparseMemoryRequirementsInfo2KHR : MarshalledObject
	{
		Image lImage;
		public Image Image {
			get { return lImage; }
			set { lImage = value; m->Image = value != null ? (UInt64)value.m : default(UInt64); }
		}
		internal Interop.ImageSparseMemoryRequirementsInfo2KHR* m {

			get {
				return (Interop.ImageSparseMemoryRequirementsInfo2KHR*)native.Handle;
			}
		}

		public ImageSparseMemoryRequirementsInfo2KHR ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.ImageSparseMemoryRequirementsInfo2KHR));
			Initialize ();
		}

		internal ImageSparseMemoryRequirementsInfo2KHR (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}


		internal void Initialize ()
		{
			m->SType = StructureType.ImageSparseMemoryRequirementsInfo2KHR;
		}

	}

	unsafe public partial class MemoryRequirements2KHR : MarshalledObject
	{
		public MemoryRequirements MemoryRequirements {
			get { return m->MemoryRequirements; }
			set { m->MemoryRequirements = value; }
		}
		internal Interop.MemoryRequirements2KHR* m {

			get {
				return (Interop.MemoryRequirements2KHR*)native.Handle;
			}
		}

		public MemoryRequirements2KHR ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.MemoryRequirements2KHR));
			Initialize ();
		}

		internal MemoryRequirements2KHR (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}


		internal void Initialize ()
		{
			m->SType = StructureType.MemoryRequirements2KHR;
		}

	}

	unsafe public partial class SparseImageMemoryRequirements2KHR : MarshalledObject
	{
		public SparseImageMemoryRequirements MemoryRequirements {
			get { return m->MemoryRequirements; }
			set { m->MemoryRequirements = value; }
		}
		internal Interop.SparseImageMemoryRequirements2KHR* m {

			get {
				return (Interop.SparseImageMemoryRequirements2KHR*)native.Handle;
			}
		}

		public SparseImageMemoryRequirements2KHR ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.SparseImageMemoryRequirements2KHR));
			Initialize ();
		}

		internal SparseImageMemoryRequirements2KHR (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}


		internal void Initialize ()
		{
			m->SType = StructureType.SparseImageMemoryRequirements2KHR;
		}

	}

	unsafe public partial class PhysicalDevicePointClippingPropertiesKHR : MarshalledObject
	{
		public PointClippingBehaviorKHR PointClippingBehavior {
			get { return m->PointClippingBehavior; }
			set { m->PointClippingBehavior = value; }
		}
		internal Interop.PhysicalDevicePointClippingPropertiesKHR* m {

			get {
				return (Interop.PhysicalDevicePointClippingPropertiesKHR*)native.Handle;
			}
		}

		public PhysicalDevicePointClippingPropertiesKHR ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.PhysicalDevicePointClippingPropertiesKHR));
			Initialize ();
		}

		internal PhysicalDevicePointClippingPropertiesKHR (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}


		internal void Initialize ()
		{
			m->SType = StructureType.PhysicalDevicePointClippingPropertiesKHR;
		}

	}

	unsafe public partial class MemoryDedicatedRequirementsKHR : MarshalledObject
	{
		public bool PrefersDedicatedAllocation {
			get { return m->PrefersDedicatedAllocation; }
			set { m->PrefersDedicatedAllocation = value; }
		}

		public bool RequiresDedicatedAllocation {
			get { return m->RequiresDedicatedAllocation; }
			set { m->RequiresDedicatedAllocation = value; }
		}
		internal Interop.MemoryDedicatedRequirementsKHR* m {

			get {
				return (Interop.MemoryDedicatedRequirementsKHR*)native.Handle;
			}
		}

		public MemoryDedicatedRequirementsKHR ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.MemoryDedicatedRequirementsKHR));
			Initialize ();
		}

		internal MemoryDedicatedRequirementsKHR (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}


		internal void Initialize ()
		{
			m->SType = StructureType.MemoryDedicatedRequirementsKHR;
		}

	}

	unsafe public partial class MemoryDedicatedAllocateInfoKHR : MarshalledObject
	{
		Image lImage;
		public Image Image {
			get { return lImage; }
			set { lImage = value; m->Image = value != null ? (UInt64)value.m : default(UInt64); }
		}

		VulkanBuffer lBuffer;
		public VulkanBuffer Buffer {
			get { return lBuffer; }
			set { lBuffer = value; m->Buffer = value != null ? (UInt64)value.m : default(UInt64); }
		}
		internal Interop.MemoryDedicatedAllocateInfoKHR* m {

			get {
				return (Interop.MemoryDedicatedAllocateInfoKHR*)native.Handle;
			}
		}

		public MemoryDedicatedAllocateInfoKHR ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.MemoryDedicatedAllocateInfoKHR));
			Initialize ();
		}

		internal MemoryDedicatedAllocateInfoKHR (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}


		internal void Initialize ()
		{
			m->SType = StructureType.MemoryDedicatedAllocateInfoKHR;
		}

	}

	unsafe public partial class ImageViewUsageCreateInfoKHR : MarshalledObject
	{
		public ImageUsageFlags Usage {
			get { return m->Usage; }
			set { m->Usage = value; }
		}
		internal Interop.ImageViewUsageCreateInfoKHR* m {

			get {
				return (Interop.ImageViewUsageCreateInfoKHR*)native.Handle;
			}
		}

		public ImageViewUsageCreateInfoKHR ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.ImageViewUsageCreateInfoKHR));
			Initialize ();
		}

		internal ImageViewUsageCreateInfoKHR (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}


		internal void Initialize ()
		{
			m->SType = StructureType.ImageViewUsageCreateInfoKHR;
		}

	}

	unsafe public partial class PipelineTessellationDomainOriginStateCreateInfoKHR : MarshalledObject
	{
		public TessellationDomainOriginKHR DomainOrigin {
			get { return m->DomainOrigin; }
			set { m->DomainOrigin = value; }
		}
		internal Interop.PipelineTessellationDomainOriginStateCreateInfoKHR* m {

			get {
				return (Interop.PipelineTessellationDomainOriginStateCreateInfoKHR*)native.Handle;
			}
		}

		public PipelineTessellationDomainOriginStateCreateInfoKHR ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.PipelineTessellationDomainOriginStateCreateInfoKHR));
			Initialize ();
		}

		internal PipelineTessellationDomainOriginStateCreateInfoKHR (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}


		internal void Initialize ()
		{
			m->SType = StructureType.PipelineTessellationDomainOriginStateCreateInfoKHR;
		}

	}

	unsafe public partial class SamplerYcbcrConversionInfoKHR : MarshalledObject
	{
		SamplerYcbcrConversionKHR lConversion;
		public SamplerYcbcrConversionKHR Conversion {
			get { return lConversion; }
			set { lConversion = value; m->Conversion = value != null ? (UInt64)value.m : default(UInt64); }
		}
		internal Interop.SamplerYcbcrConversionInfoKHR* m {

			get {
				return (Interop.SamplerYcbcrConversionInfoKHR*)native.Handle;
			}
		}

		public SamplerYcbcrConversionInfoKHR ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.SamplerYcbcrConversionInfoKHR));
			Initialize ();
		}

		internal SamplerYcbcrConversionInfoKHR (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}


		internal void Initialize ()
		{
			m->SType = StructureType.SamplerYcbcrConversionInfoKHR;
		}

	}

	unsafe public partial class SamplerYcbcrConversionCreateInfoKHR : MarshalledObject
	{
		public Format Format {
			get { return m->Format; }
			set { m->Format = value; }
		}

		public SamplerYcbcrModelConversionKHR YcbcrModel {
			get { return m->YcbcrModel; }
			set { m->YcbcrModel = value; }
		}

		public SamplerYcbcrRangeKHR YcbcrRange {
			get { return m->YcbcrRange; }
			set { m->YcbcrRange = value; }
		}

		public ComponentMapping Components {
			get { return m->Components; }
			set { m->Components = value; }
		}

		public ChromaLocationKHR XChromaOffset {
			get { return m->XChromaOffset; }
			set { m->XChromaOffset = value; }
		}

		public ChromaLocationKHR YChromaOffset {
			get { return m->YChromaOffset; }
			set { m->YChromaOffset = value; }
		}

		public Filter ChromaFilter {
			get { return m->ChromaFilter; }
			set { m->ChromaFilter = value; }
		}

		public bool ForceExplicitReconstruction {
			get { return m->ForceExplicitReconstruction; }
			set { m->ForceExplicitReconstruction = value; }
		}
		internal Interop.SamplerYcbcrConversionCreateInfoKHR* m {

			get {
				return (Interop.SamplerYcbcrConversionCreateInfoKHR*)native.Handle;
			}
		}

		public SamplerYcbcrConversionCreateInfoKHR ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.SamplerYcbcrConversionCreateInfoKHR));
			Initialize ();
		}

		internal SamplerYcbcrConversionCreateInfoKHR (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}


		internal void Initialize ()
		{
			m->SType = StructureType.SamplerYcbcrConversionCreateInfoKHR;
		}

	}

	unsafe public partial class BindImagePlaneMemoryInfoKHR : MarshalledObject
	{
		public ImageAspectFlags PlaneAspect {
			get { return m->PlaneAspect; }
			set { m->PlaneAspect = value; }
		}
		internal Interop.BindImagePlaneMemoryInfoKHR* m {

			get {
				return (Interop.BindImagePlaneMemoryInfoKHR*)native.Handle;
			}
		}

		public BindImagePlaneMemoryInfoKHR ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.BindImagePlaneMemoryInfoKHR));
			Initialize ();
		}

		internal BindImagePlaneMemoryInfoKHR (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}


		internal void Initialize ()
		{
			m->SType = StructureType.BindImagePlaneMemoryInfoKHR;
		}

	}

	unsafe public partial class ImagePlaneMemoryRequirementsInfoKHR : MarshalledObject
	{
		public ImageAspectFlags PlaneAspect {
			get { return m->PlaneAspect; }
			set { m->PlaneAspect = value; }
		}
		internal Interop.ImagePlaneMemoryRequirementsInfoKHR* m {

			get {
				return (Interop.ImagePlaneMemoryRequirementsInfoKHR*)native.Handle;
			}
		}

		public ImagePlaneMemoryRequirementsInfoKHR ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.ImagePlaneMemoryRequirementsInfoKHR));
			Initialize ();
		}

		internal ImagePlaneMemoryRequirementsInfoKHR (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}


		internal void Initialize ()
		{
			m->SType = StructureType.ImagePlaneMemoryRequirementsInfoKHR;
		}

	}

	unsafe public partial class PhysicalDeviceSamplerYcbcrConversionFeaturesKHR : MarshalledObject
	{
		public bool SamplerYcbcrConversion {
			get { return m->SamplerYcbcrConversion; }
			set { m->SamplerYcbcrConversion = value; }
		}
		internal Interop.PhysicalDeviceSamplerYcbcrConversionFeaturesKHR* m {

			get {
				return (Interop.PhysicalDeviceSamplerYcbcrConversionFeaturesKHR*)native.Handle;
			}
		}

		public PhysicalDeviceSamplerYcbcrConversionFeaturesKHR ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.PhysicalDeviceSamplerYcbcrConversionFeaturesKHR));
			Initialize ();
		}

		internal PhysicalDeviceSamplerYcbcrConversionFeaturesKHR (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}


		internal void Initialize ()
		{
			m->SType = StructureType.PhysicalDeviceSamplerYcbcrConversionFeaturesKHR;
		}

	}

	unsafe public partial class SamplerYcbcrConversionImageFormatPropertiesKHR : MarshalledObject
	{
		public UInt32 CombinedImageSamplerDescriptorCount {
			get { return m->CombinedImageSamplerDescriptorCount; }
			set { m->CombinedImageSamplerDescriptorCount = value; }
		}
		internal Interop.SamplerYcbcrConversionImageFormatPropertiesKHR* m {

			get {
				return (Interop.SamplerYcbcrConversionImageFormatPropertiesKHR*)native.Handle;
			}
		}

		public SamplerYcbcrConversionImageFormatPropertiesKHR ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.SamplerYcbcrConversionImageFormatPropertiesKHR));
			Initialize ();
		}

		internal SamplerYcbcrConversionImageFormatPropertiesKHR (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}


		internal void Initialize ()
		{
			m->SType = StructureType.SamplerYcbcrConversionImageFormatPropertiesKHR;
		}

	}

	unsafe public partial class TextureLODGatherFormatPropertiesAmd : MarshalledObject
	{
		public bool SupportsTextureGatherLodbiasAmd {
			get { return m->SupportsTextureGatherLodbiasAmd; }
			set { m->SupportsTextureGatherLodbiasAmd = value; }
		}
		internal Interop.TextureLODGatherFormatPropertiesAmd* m {

			get {
				return (Interop.TextureLODGatherFormatPropertiesAmd*)native.Handle;
			}
		}

		public TextureLODGatherFormatPropertiesAmd ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.TextureLODGatherFormatPropertiesAmd));
			Initialize ();
		}

		internal TextureLODGatherFormatPropertiesAmd (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}


		internal void Initialize ()
		{
			m->SType = StructureType.TextureLODGatherFormatPropertiesAmd;
		}

	}

	unsafe public partial class PipelineCoverageToColorStateCreateInfoNv : MarshalledObject
	{
		public UInt32 Flags {
			get { return m->Flags; }
			set { m->Flags = value; }
		}

		public bool CoverageToColorEnable {
			get { return m->CoverageToColorEnable; }
			set { m->CoverageToColorEnable = value; }
		}

		public UInt32 CoverageToColorLocation {
			get { return m->CoverageToColorLocation; }
			set { m->CoverageToColorLocation = value; }
		}
		internal Interop.PipelineCoverageToColorStateCreateInfoNv* m {

			get {
				return (Interop.PipelineCoverageToColorStateCreateInfoNv*)native.Handle;
			}
		}

		public PipelineCoverageToColorStateCreateInfoNv ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.PipelineCoverageToColorStateCreateInfoNv));
			Initialize ();
		}

		internal PipelineCoverageToColorStateCreateInfoNv (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}


		internal void Initialize ()
		{
			m->SType = StructureType.PipelineCoverageToColorStateCreateInfoNv;
		}

	}

	unsafe public partial class PhysicalDeviceSamplerFilterMinmaxPropertiesExt : MarshalledObject
	{
		public bool FilterMinmaxSingleComponentFormats {
			get { return m->FilterMinmaxSingleComponentFormats; }
			set { m->FilterMinmaxSingleComponentFormats = value; }
		}

		public bool FilterMinmaxImageComponentMapping {
			get { return m->FilterMinmaxImageComponentMapping; }
			set { m->FilterMinmaxImageComponentMapping = value; }
		}
		internal Interop.PhysicalDeviceSamplerFilterMinmaxPropertiesExt* m {

			get {
				return (Interop.PhysicalDeviceSamplerFilterMinmaxPropertiesExt*)native.Handle;
			}
		}

		public PhysicalDeviceSamplerFilterMinmaxPropertiesExt ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.PhysicalDeviceSamplerFilterMinmaxPropertiesExt));
			Initialize ();
		}

		internal PhysicalDeviceSamplerFilterMinmaxPropertiesExt (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}


		internal void Initialize ()
		{
			m->SType = StructureType.PhysicalDeviceSamplerFilterMinmaxPropertiesExt;
		}

	}

	unsafe public partial struct SampleLocationExt
	{
		public float X;
		public float Y;
	}

	unsafe public partial class SampleLocationsInfoExt : MarshalledObject
	{
		public SampleCountFlags SampleLocationsPerPixel {
			get { return m->SampleLocationsPerPixel; }
			set { m->SampleLocationsPerPixel = value; }
		}

		public Extent2D SampleLocationGridSize {
			get { return m->SampleLocationGridSize; }
			set { m->SampleLocationGridSize = value; }
		}

		public UInt32 SampleLocationsCount {
			get { return m->SampleLocationsCount; }
			set { m->SampleLocationsCount = value; }
		}

		NativeReference refSampleLocations;
		public SampleLocationExt[] SampleLocations {
			get {
				if (m->SampleLocationsCount == 0)
					return null;
				var values = new SampleLocationExt [m->SampleLocationsCount];
				unsafe
				{
					SampleLocationExt* ptr = (SampleLocationExt*)m->SampleLocations;
					for (int i = 0; i < values.Length; i++) 
						values [i] = ptr [i];
				}
				return values;
			}

			set {
				if (value == null) {
					m->SampleLocationsCount = 0;
					m->SampleLocations = IntPtr.Zero;
					return;
				}
				m->SampleLocationsCount = (uint)value.Length;
				refSampleLocations = new NativeReference ((int)(sizeof(SampleLocationExt)*value.Length));
				m->SampleLocations = refSampleLocations.Handle;
				unsafe
				{
					SampleLocationExt* ptr = (SampleLocationExt*)m->SampleLocations;
					for (int i = 0; i < value.Length; i++)
						ptr [i] = value [i];
				}
			}
		}
		internal Interop.SampleLocationsInfoExt* m {

			get {
				return (Interop.SampleLocationsInfoExt*)native.Handle;
			}
		}

		public SampleLocationsInfoExt ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.SampleLocationsInfoExt));
			Initialize ();
		}

		internal SampleLocationsInfoExt (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}

		override public void Dispose (bool disposing)
		{
			base.Dispose (disposing);
			if (!disposing)
				return;
			refSampleLocations.Dispose ();
			refSampleLocations = null;
		}

		internal void Initialize ()
		{
			m->SType = StructureType.SampleLocationsInfoExt;
		}

	}

	unsafe public partial class AttachmentSampleLocationsExt : MarshalledObject
	{
		public UInt32 AttachmentIndex {
			get { return m->AttachmentIndex; }
			set { m->AttachmentIndex = value; }
		}

		SampleLocationsInfoExt lSampleLocationsInfo;
		public SampleLocationsInfoExt SampleLocationsInfo {
			get { return lSampleLocationsInfo; }
			set { lSampleLocationsInfo = value; m->SampleLocationsInfo = value != null ? *value.m : default(Interop.SampleLocationsInfoExt); }
		}
		internal Interop.AttachmentSampleLocationsExt* m {

			get {
				return (Interop.AttachmentSampleLocationsExt*)native.Handle;
			}
		}

		public AttachmentSampleLocationsExt ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.AttachmentSampleLocationsExt));
			Initialize ();
		}

		internal AttachmentSampleLocationsExt (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}


		internal void Initialize ()
		{
			lSampleLocationsInfo = new SampleLocationsInfoExt (new NativePointer (native.Reference, (IntPtr)(&m->SampleLocationsInfo)));
		}

	}

	unsafe public partial class SubpassSampleLocationsExt : MarshalledObject
	{
		public UInt32 SubpassIndex {
			get { return m->SubpassIndex; }
			set { m->SubpassIndex = value; }
		}

		SampleLocationsInfoExt lSampleLocationsInfo;
		public SampleLocationsInfoExt SampleLocationsInfo {
			get { return lSampleLocationsInfo; }
			set { lSampleLocationsInfo = value; m->SampleLocationsInfo = value != null ? *value.m : default(Interop.SampleLocationsInfoExt); }
		}
		internal Interop.SubpassSampleLocationsExt* m {

			get {
				return (Interop.SubpassSampleLocationsExt*)native.Handle;
			}
		}

		public SubpassSampleLocationsExt ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.SubpassSampleLocationsExt));
			Initialize ();
		}

		internal SubpassSampleLocationsExt (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}


		internal void Initialize ()
		{
			lSampleLocationsInfo = new SampleLocationsInfoExt (new NativePointer (native.Reference, (IntPtr)(&m->SampleLocationsInfo)));
		}

	}

	unsafe public partial class RenderPassSampleLocationsBeginInfoExt : MarshalledObject
	{
		public UInt32 AttachmentInitialSampleLocationsCount {
			get { return m->AttachmentInitialSampleLocationsCount; }
			set { m->AttachmentInitialSampleLocationsCount = value; }
		}

		NativeReference refAttachmentInitialSampleLocations;
		public AttachmentSampleLocationsExt[] AttachmentInitialSampleLocations {
			get {
				if (m->AttachmentInitialSampleLocationsCount == 0)
					return null;
				var values = new AttachmentSampleLocationsExt [m->AttachmentInitialSampleLocationsCount];
				unsafe
				{
					Interop.AttachmentSampleLocationsExt* ptr = (Interop.AttachmentSampleLocationsExt*)m->AttachmentInitialSampleLocations;
					for (int i = 0; i < values.Length; i++) {
						values [i] = new AttachmentSampleLocationsExt ();
						*values [i].m = ptr [i];
					}
				}
				return values;
			}

			set {
				if (value == null) {
					m->AttachmentInitialSampleLocationsCount = 0;
					m->AttachmentInitialSampleLocations = IntPtr.Zero;
					return;
				}
				m->AttachmentInitialSampleLocationsCount = (uint)value.Length;
				refAttachmentInitialSampleLocations = new NativeReference ((int)(sizeof(Interop.AttachmentSampleLocationsExt)*value.Length));
				m->AttachmentInitialSampleLocations = refAttachmentInitialSampleLocations.Handle;
				unsafe
				{
					Interop.AttachmentSampleLocationsExt* ptr = (Interop.AttachmentSampleLocationsExt*)m->AttachmentInitialSampleLocations;
					for (int i = 0; i < value.Length; i++)
						ptr [i] = *value [i].m;
				}
			}
		}

		public UInt32 PostSubpassSampleLocationsCount {
			get { return m->PostSubpassSampleLocationsCount; }
			set { m->PostSubpassSampleLocationsCount = value; }
		}

		NativeReference refPostSubpassSampleLocations;
		public SubpassSampleLocationsExt[] PostSubpassSampleLocations {
			get {
				if (m->PostSubpassSampleLocationsCount == 0)
					return null;
				var values = new SubpassSampleLocationsExt [m->PostSubpassSampleLocationsCount];
				unsafe
				{
					Interop.SubpassSampleLocationsExt* ptr = (Interop.SubpassSampleLocationsExt*)m->PostSubpassSampleLocations;
					for (int i = 0; i < values.Length; i++) {
						values [i] = new SubpassSampleLocationsExt ();
						*values [i].m = ptr [i];
					}
				}
				return values;
			}

			set {
				if (value == null) {
					m->PostSubpassSampleLocationsCount = 0;
					m->PostSubpassSampleLocations = IntPtr.Zero;
					return;
				}
				m->PostSubpassSampleLocationsCount = (uint)value.Length;
				refPostSubpassSampleLocations = new NativeReference ((int)(sizeof(Interop.SubpassSampleLocationsExt)*value.Length));
				m->PostSubpassSampleLocations = refPostSubpassSampleLocations.Handle;
				unsafe
				{
					Interop.SubpassSampleLocationsExt* ptr = (Interop.SubpassSampleLocationsExt*)m->PostSubpassSampleLocations;
					for (int i = 0; i < value.Length; i++)
						ptr [i] = *value [i].m;
				}
			}
		}
		internal Interop.RenderPassSampleLocationsBeginInfoExt* m {

			get {
				return (Interop.RenderPassSampleLocationsBeginInfoExt*)native.Handle;
			}
		}

		public RenderPassSampleLocationsBeginInfoExt ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.RenderPassSampleLocationsBeginInfoExt));
			Initialize ();
		}

		internal RenderPassSampleLocationsBeginInfoExt (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}

		override public void Dispose (bool disposing)
		{
			base.Dispose (disposing);
			if (!disposing)
				return;
			refAttachmentInitialSampleLocations.Dispose ();
			refAttachmentInitialSampleLocations = null;
			refPostSubpassSampleLocations.Dispose ();
			refPostSubpassSampleLocations = null;
		}

		internal void Initialize ()
		{
			m->SType = StructureType.RenderPassSampleLocationsBeginInfoExt;
		}

	}

	unsafe public partial class PipelineSampleLocationsStateCreateInfoExt : MarshalledObject
	{
		public bool SampleLocationsEnable {
			get { return m->SampleLocationsEnable; }
			set { m->SampleLocationsEnable = value; }
		}

		SampleLocationsInfoExt lSampleLocationsInfo;
		public SampleLocationsInfoExt SampleLocationsInfo {
			get { return lSampleLocationsInfo; }
			set { lSampleLocationsInfo = value; m->SampleLocationsInfo = value != null ? *value.m : default(Interop.SampleLocationsInfoExt); }
		}
		internal Interop.PipelineSampleLocationsStateCreateInfoExt* m {

			get {
				return (Interop.PipelineSampleLocationsStateCreateInfoExt*)native.Handle;
			}
		}

		public PipelineSampleLocationsStateCreateInfoExt ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.PipelineSampleLocationsStateCreateInfoExt));
			Initialize ();
		}

		internal PipelineSampleLocationsStateCreateInfoExt (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}


		internal void Initialize ()
		{
			m->SType = StructureType.PipelineSampleLocationsStateCreateInfoExt;
			lSampleLocationsInfo = new SampleLocationsInfoExt (new NativePointer (native.Reference, (IntPtr)(&m->SampleLocationsInfo)));
		}

	}

	unsafe public partial class PhysicalDeviceSampleLocationsPropertiesExt : MarshalledObject
	{
		public SampleCountFlags SampleLocationSampleCounts {
			get { return m->SampleLocationSampleCounts; }
			set { m->SampleLocationSampleCounts = value; }
		}

		public Extent2D MaxSampleLocationGridSize {
			get { return m->MaxSampleLocationGridSize; }
			set { m->MaxSampleLocationGridSize = value; }
		}

		public float[] SampleLocationCoordinateRange {
			get {
				var arr = new float [2];
				for (int i = 0; i < 2; i++)
					arr [i] = m->SampleLocationCoordinateRange [i];
				return arr;
			}

			set {
				if (value.Length > 2)
					throw new Exception ("array too long");
				for (int i = 0; i < value.Length; i++)
					m->SampleLocationCoordinateRange [i] = value [i];
				for (int i = value.Length; i < 2; i++)
					m->SampleLocationCoordinateRange [i] = 0;
			}
		}

		public UInt32 SampleLocationSubPixelBits {
			get { return m->SampleLocationSubPixelBits; }
			set { m->SampleLocationSubPixelBits = value; }
		}

		public bool VariableSampleLocations {
			get { return m->VariableSampleLocations; }
			set { m->VariableSampleLocations = value; }
		}
		internal Interop.PhysicalDeviceSampleLocationsPropertiesExt* m {

			get {
				return (Interop.PhysicalDeviceSampleLocationsPropertiesExt*)native.Handle;
			}
		}

		public PhysicalDeviceSampleLocationsPropertiesExt ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.PhysicalDeviceSampleLocationsPropertiesExt));
			Initialize ();
		}

		internal PhysicalDeviceSampleLocationsPropertiesExt (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}


		internal void Initialize ()
		{
			m->SType = StructureType.PhysicalDeviceSampleLocationsPropertiesExt;
		}

	}

	unsafe public partial class MultisamplePropertiesExt : MarshalledObject
	{
		public Extent2D MaxSampleLocationGridSize {
			get { return m->MaxSampleLocationGridSize; }
			set { m->MaxSampleLocationGridSize = value; }
		}
		internal Interop.MultisamplePropertiesExt* m {

			get {
				return (Interop.MultisamplePropertiesExt*)native.Handle;
			}
		}

		public MultisamplePropertiesExt ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.MultisamplePropertiesExt));
			Initialize ();
		}

		internal MultisamplePropertiesExt (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}


		internal void Initialize ()
		{
			m->SType = StructureType.MultisamplePropertiesExt;
		}

	}

	unsafe public partial class SamplerReductionModeCreateInfoExt : MarshalledObject
	{
		public SamplerReductionModeExt ReductionMode {
			get { return m->ReductionMode; }
			set { m->ReductionMode = value; }
		}
		internal Interop.SamplerReductionModeCreateInfoExt* m {

			get {
				return (Interop.SamplerReductionModeCreateInfoExt*)native.Handle;
			}
		}

		public SamplerReductionModeCreateInfoExt ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.SamplerReductionModeCreateInfoExt));
			Initialize ();
		}

		internal SamplerReductionModeCreateInfoExt (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}


		internal void Initialize ()
		{
			m->SType = StructureType.SamplerReductionModeCreateInfoExt;
		}

	}

	unsafe public partial class PhysicalDeviceBlendOperationAdvancedFeaturesExt : MarshalledObject
	{
		public bool AdvancedBlendCoherentOperations {
			get { return m->AdvancedBlendCoherentOperations; }
			set { m->AdvancedBlendCoherentOperations = value; }
		}
		internal Interop.PhysicalDeviceBlendOperationAdvancedFeaturesExt* m {

			get {
				return (Interop.PhysicalDeviceBlendOperationAdvancedFeaturesExt*)native.Handle;
			}
		}

		public PhysicalDeviceBlendOperationAdvancedFeaturesExt ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.PhysicalDeviceBlendOperationAdvancedFeaturesExt));
			Initialize ();
		}

		internal PhysicalDeviceBlendOperationAdvancedFeaturesExt (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}


		internal void Initialize ()
		{
			m->SType = StructureType.PhysicalDeviceBlendOperationAdvancedFeaturesExt;
		}

	}

	unsafe public partial class PhysicalDeviceBlendOperationAdvancedPropertiesExt : MarshalledObject
	{
		public UInt32 AdvancedBlendMaxColorAttachments {
			get { return m->AdvancedBlendMaxColorAttachments; }
			set { m->AdvancedBlendMaxColorAttachments = value; }
		}

		public bool AdvancedBlendIndependentBlend {
			get { return m->AdvancedBlendIndependentBlend; }
			set { m->AdvancedBlendIndependentBlend = value; }
		}

		public bool AdvancedBlendNonPremultipliedSrcColor {
			get { return m->AdvancedBlendNonPremultipliedSrcColor; }
			set { m->AdvancedBlendNonPremultipliedSrcColor = value; }
		}

		public bool AdvancedBlendNonPremultipliedDstColor {
			get { return m->AdvancedBlendNonPremultipliedDstColor; }
			set { m->AdvancedBlendNonPremultipliedDstColor = value; }
		}

		public bool AdvancedBlendCorrelatedOverlap {
			get { return m->AdvancedBlendCorrelatedOverlap; }
			set { m->AdvancedBlendCorrelatedOverlap = value; }
		}

		public bool AdvancedBlendAllOperations {
			get { return m->AdvancedBlendAllOperations; }
			set { m->AdvancedBlendAllOperations = value; }
		}
		internal Interop.PhysicalDeviceBlendOperationAdvancedPropertiesExt* m {

			get {
				return (Interop.PhysicalDeviceBlendOperationAdvancedPropertiesExt*)native.Handle;
			}
		}

		public PhysicalDeviceBlendOperationAdvancedPropertiesExt ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.PhysicalDeviceBlendOperationAdvancedPropertiesExt));
			Initialize ();
		}

		internal PhysicalDeviceBlendOperationAdvancedPropertiesExt (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}


		internal void Initialize ()
		{
			m->SType = StructureType.PhysicalDeviceBlendOperationAdvancedPropertiesExt;
		}

	}

	unsafe public partial class PipelineColorBlendAdvancedStateCreateInfoExt : MarshalledObject
	{
		public bool SrcPremultiplied {
			get { return m->SrcPremultiplied; }
			set { m->SrcPremultiplied = value; }
		}

		public bool DstPremultiplied {
			get { return m->DstPremultiplied; }
			set { m->DstPremultiplied = value; }
		}

		public BlendOverlapExt BlendOverlap {
			get { return m->BlendOverlap; }
			set { m->BlendOverlap = value; }
		}
		internal Interop.PipelineColorBlendAdvancedStateCreateInfoExt* m {

			get {
				return (Interop.PipelineColorBlendAdvancedStateCreateInfoExt*)native.Handle;
			}
		}

		public PipelineColorBlendAdvancedStateCreateInfoExt ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.PipelineColorBlendAdvancedStateCreateInfoExt));
			Initialize ();
		}

		internal PipelineColorBlendAdvancedStateCreateInfoExt (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}


		internal void Initialize ()
		{
			m->SType = StructureType.PipelineColorBlendAdvancedStateCreateInfoExt;
		}

	}

	unsafe public partial class PipelineCoverageModulationStateCreateInfoNv : MarshalledObject
	{
		public UInt32 Flags {
			get { return m->Flags; }
			set { m->Flags = value; }
		}

		public CoverageModulationModeNv CoverageModulationMode {
			get { return m->CoverageModulationMode; }
			set { m->CoverageModulationMode = value; }
		}

		public bool CoverageModulationTableEnable {
			get { return m->CoverageModulationTableEnable; }
			set { m->CoverageModulationTableEnable = value; }
		}

		public UInt32 CoverageModulationTableCount {
			get { return m->CoverageModulationTableCount; }
			set { m->CoverageModulationTableCount = value; }
		}

		NativeReference refCoverageModulationTable;
		public float[] CoverageModulationTable {
			get {
				if (m->CoverageModulationTableCount == 0)
					return null;
				var values = new float [m->CoverageModulationTableCount];
				unsafe
				{
					float* ptr = (float*)m->CoverageModulationTable;
					for (int i = 0; i < values.Length; i++) 
						values [i] = ptr [i];
				}
				return values;
			}

			set {
				if (value == null) {
					m->CoverageModulationTableCount = 0;
					m->CoverageModulationTable = IntPtr.Zero;
					return;
				}
				m->CoverageModulationTableCount = (uint)value.Length;
				refCoverageModulationTable = new NativeReference ((int)(sizeof(float)*value.Length));
				m->CoverageModulationTable = refCoverageModulationTable.Handle;
				unsafe
				{
					float* ptr = (float*)m->CoverageModulationTable;
					for (int i = 0; i < value.Length; i++)
						ptr [i] = value [i];
				}
			}
		}
		internal Interop.PipelineCoverageModulationStateCreateInfoNv* m {

			get {
				return (Interop.PipelineCoverageModulationStateCreateInfoNv*)native.Handle;
			}
		}

		public PipelineCoverageModulationStateCreateInfoNv ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.PipelineCoverageModulationStateCreateInfoNv));
			Initialize ();
		}

		internal PipelineCoverageModulationStateCreateInfoNv (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}

		override public void Dispose (bool disposing)
		{
			base.Dispose (disposing);
			if (!disposing)
				return;
			refCoverageModulationTable.Dispose ();
			refCoverageModulationTable = null;
		}

		internal void Initialize ()
		{
			m->SType = StructureType.PipelineCoverageModulationStateCreateInfoNv;
		}

	}

	unsafe public partial class ImageFormatListCreateInfoKHR : MarshalledObject
	{
		public UInt32 ViewFormatCount {
			get { return m->ViewFormatCount; }
			set { m->ViewFormatCount = value; }
		}

		NativeReference refViewFormats;
		public Format[] ViewFormats {
			get {
				if (m->ViewFormatCount == 0)
					return null;
				var values = new Format [m->ViewFormatCount];
				unsafe
				{
					Format* ptr = (Format*)m->ViewFormats;
					for (int i = 0; i < values.Length; i++) 
						values [i] = ptr [i];
				}
				return values;
			}

			set {
				if (value == null) {
					m->ViewFormatCount = 0;
					m->ViewFormats = IntPtr.Zero;
					return;
				}
				m->ViewFormatCount = (uint)value.Length;
				refViewFormats = new NativeReference ((int)(sizeof(Format)*value.Length));
				m->ViewFormats = refViewFormats.Handle;
				unsafe
				{
					Format* ptr = (Format*)m->ViewFormats;
					for (int i = 0; i < value.Length; i++)
						ptr [i] = value [i];
				}
			}
		}
		internal Interop.ImageFormatListCreateInfoKHR* m {

			get {
				return (Interop.ImageFormatListCreateInfoKHR*)native.Handle;
			}
		}

		public ImageFormatListCreateInfoKHR ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.ImageFormatListCreateInfoKHR));
			Initialize ();
		}

		internal ImageFormatListCreateInfoKHR (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}

		override public void Dispose (bool disposing)
		{
			base.Dispose (disposing);
			if (!disposing)
				return;
			refViewFormats.Dispose ();
			refViewFormats = null;
		}

		internal void Initialize ()
		{
			m->SType = StructureType.ImageFormatListCreateInfoKHR;
		}

	}

	unsafe public partial class ValidationCacheCreateInfoExt : MarshalledObject
	{
		public UInt32 Flags {
			get { return m->Flags; }
			set { m->Flags = value; }
		}

		public UIntPtr InitialDataSize {
			get { return m->InitialDataSize; }
			set { m->InitialDataSize = value; }
		}

		public IntPtr InitialData {
			get { return m->InitialData; }
			set { m->InitialData = value; }
		}
		internal Interop.ValidationCacheCreateInfoExt* m {

			get {
				return (Interop.ValidationCacheCreateInfoExt*)native.Handle;
			}
		}

		public ValidationCacheCreateInfoExt ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.ValidationCacheCreateInfoExt));
			Initialize ();
		}

		internal ValidationCacheCreateInfoExt (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}


		internal void Initialize ()
		{
			m->SType = StructureType.ValidationCacheCreateInfoExt;
		}

	}

	unsafe public partial class ShaderModuleValidationCacheCreateInfoExt : MarshalledObject
	{
		ValidationCacheExt lValidationCache;
		public ValidationCacheExt ValidationCache {
			get { return lValidationCache; }
			set { lValidationCache = value; m->ValidationCache = value != null ? (UInt64)value.m : default(UInt64); }
		}
		internal Interop.ShaderModuleValidationCacheCreateInfoExt* m {

			get {
				return (Interop.ShaderModuleValidationCacheCreateInfoExt*)native.Handle;
			}
		}

		public ShaderModuleValidationCacheCreateInfoExt ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.ShaderModuleValidationCacheCreateInfoExt));
			Initialize ();
		}

		internal ShaderModuleValidationCacheCreateInfoExt (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}


		internal void Initialize ()
		{
			m->SType = StructureType.ShaderModuleValidationCacheCreateInfoExt;
		}

	}

	unsafe public partial struct ShaderResourceUsageAmd
	{
		public UInt32 NumUsedVgprs;
		public UInt32 NumUsedSgprs;
		public UInt32 LdsSizePerLocalWorkGroup;
		public UIntPtr LdsUsageSizeInBytes;
		public UIntPtr ScratchMemUsageInBytes;
	}

	unsafe public partial class ShaderStatisticsInfoAmd : MarshalledObject
	{
		public ShaderStageFlags ShaderStageMask {
			get { return m->ShaderStageMask; }
			set { m->ShaderStageMask = value; }
		}

		public ShaderResourceUsageAmd ResourceUsage {
			get { return m->ResourceUsage; }
			set { m->ResourceUsage = value; }
		}

		public UInt32 NumPhysicalVgprs {
			get { return m->NumPhysicalVgprs; }
			set { m->NumPhysicalVgprs = value; }
		}

		public UInt32 NumPhysicalSgprs {
			get { return m->NumPhysicalSgprs; }
			set { m->NumPhysicalSgprs = value; }
		}

		public UInt32 NumAvailableVgprs {
			get { return m->NumAvailableVgprs; }
			set { m->NumAvailableVgprs = value; }
		}

		public UInt32 NumAvailableSgprs {
			get { return m->NumAvailableSgprs; }
			set { m->NumAvailableSgprs = value; }
		}

		public UInt32[] ComputeWorkGroupSize {
			get {
				var arr = new UInt32 [3];
				for (int i = 0; i < 3; i++)
					arr [i] = m->ComputeWorkGroupSize [i];
				return arr;
			}

			set {
				if (value.Length > 3)
					throw new Exception ("array too long");
				for (int i = 0; i < value.Length; i++)
					m->ComputeWorkGroupSize [i] = value [i];
				for (int i = value.Length; i < 3; i++)
					m->ComputeWorkGroupSize [i] = 0;
			}
		}
		internal Interop.ShaderStatisticsInfoAmd* m {

			get {
				return (Interop.ShaderStatisticsInfoAmd*)native.Handle;
			}
		}

		public ShaderStatisticsInfoAmd ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.ShaderStatisticsInfoAmd));
		}

		internal ShaderStatisticsInfoAmd (NativePointer pointer)
		{
			native = pointer;
		}

	}

	unsafe public partial class DeviceQueueGlobalPriorityCreateInfoExt : MarshalledObject
	{
		public QueueGlobalPriorityExt GlobalPriority {
			get { return m->GlobalPriority; }
			set { m->GlobalPriority = value; }
		}
		internal Interop.DeviceQueueGlobalPriorityCreateInfoExt* m {

			get {
				return (Interop.DeviceQueueGlobalPriorityCreateInfoExt*)native.Handle;
			}
		}

		public DeviceQueueGlobalPriorityCreateInfoExt ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.DeviceQueueGlobalPriorityCreateInfoExt));
			Initialize ();
		}

		internal DeviceQueueGlobalPriorityCreateInfoExt (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}


		internal void Initialize ()
		{
			m->SType = StructureType.DeviceQueueGlobalPriorityCreateInfoExt;
		}

	}

	unsafe public partial class ImportMemoryHostPointerInfoExt : MarshalledObject
	{
		public ExternalMemoryHandleTypeFlagsKHR HandleType {
			get { return m->HandleType; }
			set { m->HandleType = value; }
		}

		public IntPtr HostPointer {
			get { return m->HostPointer; }
			set { m->HostPointer = value; }
		}
		internal Interop.ImportMemoryHostPointerInfoExt* m {

			get {
				return (Interop.ImportMemoryHostPointerInfoExt*)native.Handle;
			}
		}

		public ImportMemoryHostPointerInfoExt ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.ImportMemoryHostPointerInfoExt));
			Initialize ();
		}

		internal ImportMemoryHostPointerInfoExt (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}


		internal void Initialize ()
		{
			m->SType = StructureType.ImportMemoryHostPointerInfoExt;
		}

	}

	unsafe public partial class MemoryHostPointerPropertiesExt : MarshalledObject
	{
		public UInt32 MemoryTypeBits {
			get { return m->MemoryTypeBits; }
			set { m->MemoryTypeBits = value; }
		}
		internal Interop.MemoryHostPointerPropertiesExt* m {

			get {
				return (Interop.MemoryHostPointerPropertiesExt*)native.Handle;
			}
		}

		public MemoryHostPointerPropertiesExt ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.MemoryHostPointerPropertiesExt));
			Initialize ();
		}

		internal MemoryHostPointerPropertiesExt (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}


		internal void Initialize ()
		{
			m->SType = StructureType.MemoryHostPointerPropertiesExt;
		}

	}

	unsafe public partial class PhysicalDeviceExternalMemoryHostPropertiesExt : MarshalledObject
	{
		public DeviceSize MinImportedHostPointerAlignment {
			get { return m->MinImportedHostPointerAlignment; }
			set { m->MinImportedHostPointerAlignment = value; }
		}
		internal Interop.PhysicalDeviceExternalMemoryHostPropertiesExt* m {

			get {
				return (Interop.PhysicalDeviceExternalMemoryHostPropertiesExt*)native.Handle;
			}
		}

		public PhysicalDeviceExternalMemoryHostPropertiesExt ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.PhysicalDeviceExternalMemoryHostPropertiesExt));
			Initialize ();
		}

		internal PhysicalDeviceExternalMemoryHostPropertiesExt (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}


		internal void Initialize ()
		{
			m->SType = StructureType.PhysicalDeviceExternalMemoryHostPropertiesExt;
		}

	}

	unsafe public partial class PhysicalDeviceConservativeRasterizationPropertiesExt : MarshalledObject
	{
		public float PrimitiveOverestimationSize {
			get { return m->PrimitiveOverestimationSize; }
			set { m->PrimitiveOverestimationSize = value; }
		}

		public float MaxExtraPrimitiveOverestimationSize {
			get { return m->MaxExtraPrimitiveOverestimationSize; }
			set { m->MaxExtraPrimitiveOverestimationSize = value; }
		}

		public float ExtraPrimitiveOverestimationSizeGranularity {
			get { return m->ExtraPrimitiveOverestimationSizeGranularity; }
			set { m->ExtraPrimitiveOverestimationSizeGranularity = value; }
		}

		public bool PrimitiveUnderestimation {
			get { return m->PrimitiveUnderestimation; }
			set { m->PrimitiveUnderestimation = value; }
		}

		public bool ConservativePointAndLineRasterization {
			get { return m->ConservativePointAndLineRasterization; }
			set { m->ConservativePointAndLineRasterization = value; }
		}

		public bool DegenerateTrianglesRasterized {
			get { return m->DegenerateTrianglesRasterized; }
			set { m->DegenerateTrianglesRasterized = value; }
		}

		public bool DegenerateLinesRasterized {
			get { return m->DegenerateLinesRasterized; }
			set { m->DegenerateLinesRasterized = value; }
		}

		public bool FullyCoveredFragmentShaderInputVariable {
			get { return m->FullyCoveredFragmentShaderInputVariable; }
			set { m->FullyCoveredFragmentShaderInputVariable = value; }
		}

		public bool ConservativeRasterizationPostDepthCoverage {
			get { return m->ConservativeRasterizationPostDepthCoverage; }
			set { m->ConservativeRasterizationPostDepthCoverage = value; }
		}
		internal Interop.PhysicalDeviceConservativeRasterizationPropertiesExt* m {

			get {
				return (Interop.PhysicalDeviceConservativeRasterizationPropertiesExt*)native.Handle;
			}
		}

		public PhysicalDeviceConservativeRasterizationPropertiesExt ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.PhysicalDeviceConservativeRasterizationPropertiesExt));
			Initialize ();
		}

		internal PhysicalDeviceConservativeRasterizationPropertiesExt (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}


		internal void Initialize ()
		{
			m->SType = StructureType.PhysicalDeviceConservativeRasterizationPropertiesExt;
		}

	}

	unsafe public partial class PipelineRasterizationConservativeStateCreateInfoExt : MarshalledObject
	{
		public UInt32 Flags {
			get { return m->Flags; }
			set { m->Flags = value; }
		}

		public ConservativeRasterizationModeExt ConservativeRasterizationMode {
			get { return m->ConservativeRasterizationMode; }
			set { m->ConservativeRasterizationMode = value; }
		}

		public float ExtraPrimitiveOverestimationSize {
			get { return m->ExtraPrimitiveOverestimationSize; }
			set { m->ExtraPrimitiveOverestimationSize = value; }
		}
		internal Interop.PipelineRasterizationConservativeStateCreateInfoExt* m {

			get {
				return (Interop.PipelineRasterizationConservativeStateCreateInfoExt*)native.Handle;
			}
		}

		public PipelineRasterizationConservativeStateCreateInfoExt ()
		{
			native = Interop.Structure.Allocate (typeof (Interop.PipelineRasterizationConservativeStateCreateInfoExt));
			Initialize ();
		}

		internal PipelineRasterizationConservativeStateCreateInfoExt (NativePointer pointer)
		{
			native = pointer;
			Initialize ();
		}


		internal void Initialize ()
		{
			m->SType = StructureType.PipelineRasterizationConservativeStateCreateInfoExt;
		}

	}
}
