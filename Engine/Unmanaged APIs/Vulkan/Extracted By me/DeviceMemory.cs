/* Please note that this file is generated by the VulkanSharp's generator. Do not edit directly.

   Licensed under the MIT license.

   Copyright 2016 Xamarin Inc

   This notice may not be removed from any source distribution.
   See LICENSE file for licensing details.
*/

using EngineRenderer;
using System;

namespace Vulkan
{
    public partial class DeviceMemory : INonDispatchableHandleMarshalling, IDisposable
	{
		internal DeviceMemory() {}

		public unsafe DeviceMemory(Device myDevice, MemoryAllocateInfo myAllocation, AllocationCallbacks pAllocator = null)
		{
			Result result;
			fixed (UInt64* ptrpMemory = &this.m)
			{
				result = Interop.NativeMethods.vkAllocateMemory(myDevice.m, myAllocation.m, pAllocator != null ? pAllocator.m : null, ptrpMemory);
			}
			if (result != Result.Success)
				throw new ResultException(result);
		}
		public unsafe DeviceMemory(MemoryAllocateInfo myAllocation, AllocationCallbacks pAllocator = null)
		: this(VulkanRenderer.SelectedLogicalDevice, myAllocation, pAllocator)
		{

		}





		internal UInt64 m;

		UInt64 INonDispatchableHandleMarshalling.Handle {
			get {
				return m;
			}
		}

		#region IDisposable Support
		private bool disposedValue = false; // To detect redundant calls

		protected virtual void Dispose(bool disposing)
		{
			if (!disposedValue)
			{
				if (disposing)
				{
					
				}
				unsafe
				{
					Interop.NativeMethods.vkFreeMemory(VulkanRenderer.SelectedLogicalDevice.m, m, null);
				}

				// TODO: free unmanaged resources (unmanaged objects) and override a finalizer below.
				// TODO: set large fields to null.

				disposedValue = true;
			}
		}
		~DeviceMemory()
		{
			Dispose(true);
		}
		// TODO: override a finalizer only if Dispose(bool disposing) above has code to free unmanaged resources.
		// ~DeviceMemory()
		// {
		//   // Do not change this code. Put cleanup code in Dispose(bool disposing) above.
		//   Dispose(false);
		// }

		// This code added to correctly implement the disposable pattern.
		public void Dispose()
		{
			// Do not change this code. Put cleanup code in Dispose(bool disposing) above.
			Dispose(true);
			// TODO: uncomment the following line if the finalizer is overridden above.
			// GC.SuppressFinalize(this);
		}
		#endregion
	}
}
